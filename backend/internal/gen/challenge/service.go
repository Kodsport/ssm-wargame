// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge service
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package challenge

import (
	"context"

	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the challenge service interface.
type Service interface {
	// ListChallenges implements ListChallenges.
	ListChallenges(context.Context, *ListChallengesPayload) (res SsmChallengeCollection, err error)
	// ListEvents implements ListEvents.
	ListEvents(context.Context, *ListEventsPayload) (res []*CTFEvent, err error)
	// GetCurrentMonthlyChallenge implements GetCurrentMonthlyChallenge.
	GetCurrentMonthlyChallenge(context.Context, *GetCurrentMonthlyChallengePayload) (res *SsmUserMonthlyChallenge, err error)
	// ListMonthlyChallenges implements ListMonthlyChallenges.
	ListMonthlyChallenges(context.Context, *ListMonthlyChallengesPayload) (res SsmUserMonthlyChallengeCollection, err error)
	// SubmitFlag implements SubmitFlag.
	SubmitFlag(context.Context, *SubmitFlagPayload) (err error)
	// SchoolScoreboard implements SchoolScoreboard.
	SchoolScoreboard(context.Context, *SchoolScoreboardPayload) (res *SsmSchoolScoreboard, err error)
	// UserScoreboard implements UserScoreboard.
	UserScoreboard(context.Context, *UserScoreboardPayload) (res *SsmUserScoreboard, err error)
	// ListAuthors implements ListAuthors.
	ListAuthors(context.Context, *ListAuthorsPayload) (res []*Author, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "challenge"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"ListChallenges", "ListEvents", "GetCurrentMonthlyChallenge", "ListMonthlyChallenges", "SubmitFlag", "SchoolScoreboard", "UserScoreboard", "ListAuthors"}

// ListChallengesPayload is the payload type of the challenge service
// ListChallenges method.
type ListChallengesPayload struct {
	// Filter by slug
	Slug *string
	// Filter by author
	AuthorSlug *string
	Token      *string
}

// SsmChallengeCollection is the result type of the challenge service
// ListChallenges method.
type SsmChallengeCollection []*SsmChallenge

// ListEventsPayload is the payload type of the challenge service ListEvents
// method.
type ListEventsPayload struct {
	Token *string
}

// GetCurrentMonthlyChallengePayload is the payload type of the challenge
// service GetCurrentMonthlyChallenge method.
type GetCurrentMonthlyChallengePayload struct {
	Token *string
}

// SsmUserMonthlyChallenge is the result type of the challenge service
// GetCurrentMonthlyChallenge method.
type SsmUserMonthlyChallenge struct {
	ChallengeID string
	// The month(s) that the challenge is assigned for
	DisplayMonth string
	// Starting date of the monthly challenge
	StartDate int64
	// Ending date of the monthly challenge
	EndDate   int64
	Challenge *SsmChallenge
}

// ListMonthlyChallengesPayload is the payload type of the challenge service
// ListMonthlyChallenges method.
type ListMonthlyChallengesPayload struct {
	Token *string
}

// SsmUserMonthlyChallengeCollection is the result type of the challenge
// service ListMonthlyChallenges method.
type SsmUserMonthlyChallengeCollection []*SsmUserMonthlyChallenge

// SubmitFlagPayload is the payload type of the challenge service SubmitFlag
// method.
type SubmitFlagPayload struct {
	Flag string
	// ID of a challenge
	ChallengeID string
	Token       string
}

// SchoolScoreboardPayload is the payload type of the challenge service
// SchoolScoreboard method.
type SchoolScoreboardPayload struct {
	Token *string
}

// SsmSchoolScoreboard is the result type of the challenge service
// SchoolScoreboard method.
type SsmSchoolScoreboard struct {
	Scores []*SchoolScoreboardScore
}

// UserScoreboardPayload is the payload type of the challenge service
// UserScoreboard method.
type UserScoreboardPayload struct {
	Token *string
}

// SsmUserScoreboard is the result type of the challenge service UserScoreboard
// method.
type SsmUserScoreboard struct {
	Scores []*UserScoreboardScore
}

// ListAuthorsPayload is the payload type of the challenge service ListAuthors
// method.
type ListAuthorsPayload struct {
	Token *string
}

// A Wargame challenge
type SsmChallenge struct {
	ID string
	// A unique string that can be used in URLs
	Slug string
	// Title displayed to user
	Title string
	// A short text describing the challenge
	Description string
	// The number of points given to the solver
	Score    int
	Services []*ChallengeService
	Files    []*ChallengeFiles
	// The numer of people who solved the challenge
	Solves int
	// The ID of the CTF the challenge was taken from
	CtfEventID *string
	// whether the user has solved the challenge or not
	Solved   bool
	Category string
	Authors  []*Author
	Solvers  []*SsmSolver
}

type ChallengeService struct {
	UserDisplay string
	Hyperlink   bool
}

type ChallengeFiles struct {
	Filename string
	URL      string
}

type Author struct {
	ID          string
	FullName    string
	Description string
	Sponsor     bool
	Slug        string
	ImageURL    *string
	Publish     bool
}

type SsmSolver struct {
	ID       string
	FullName string
	SolvedAt int64
}

type CTFEvent struct {
	ID   string
	Name string
}

type SchoolScoreboardScore struct {
	Score      int
	SchoolName string
}

type UserScoreboardScore struct {
	UserID     string
	Name       string
	SchoolName string
	Score      int
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeAlreadySolved builds a goa.ServiceError from an error.
func MakeAlreadySolved(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "already_solved",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeIncorrectFlag builds a goa.ServiceError from an error.
func MakeIncorrectFlag(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "incorrect_flag",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewSsmChallengeCollection initializes result type SsmChallengeCollection
// from viewed result type SsmChallengeCollection.
func NewSsmChallengeCollection(vres challengeviews.SsmChallengeCollection) SsmChallengeCollection {
	return newSsmChallengeCollection(vres.Projected)
}

// NewViewedSsmChallengeCollection initializes viewed result type
// SsmChallengeCollection from result type SsmChallengeCollection using the
// given view.
func NewViewedSsmChallengeCollection(res SsmChallengeCollection, view string) challengeviews.SsmChallengeCollection {
	p := newSsmChallengeCollectionView(res)
	return challengeviews.SsmChallengeCollection{Projected: p, View: "default"}
}

// NewSsmUserMonthlyChallenge initializes result type SsmUserMonthlyChallenge
// from viewed result type SsmUserMonthlyChallenge.
func NewSsmUserMonthlyChallenge(vres *challengeviews.SsmUserMonthlyChallenge) *SsmUserMonthlyChallenge {
	return newSsmUserMonthlyChallenge(vres.Projected)
}

// NewViewedSsmUserMonthlyChallenge initializes viewed result type
// SsmUserMonthlyChallenge from result type SsmUserMonthlyChallenge using the
// given view.
func NewViewedSsmUserMonthlyChallenge(res *SsmUserMonthlyChallenge, view string) *challengeviews.SsmUserMonthlyChallenge {
	p := newSsmUserMonthlyChallengeView(res)
	return &challengeviews.SsmUserMonthlyChallenge{Projected: p, View: "default"}
}

// NewSsmUserMonthlyChallengeCollection initializes result type
// SsmUserMonthlyChallengeCollection from viewed result type
// SsmUserMonthlyChallengeCollection.
func NewSsmUserMonthlyChallengeCollection(vres challengeviews.SsmUserMonthlyChallengeCollection) SsmUserMonthlyChallengeCollection {
	return newSsmUserMonthlyChallengeCollection(vres.Projected)
}

// NewViewedSsmUserMonthlyChallengeCollection initializes viewed result type
// SsmUserMonthlyChallengeCollection from result type
// SsmUserMonthlyChallengeCollection using the given view.
func NewViewedSsmUserMonthlyChallengeCollection(res SsmUserMonthlyChallengeCollection, view string) challengeviews.SsmUserMonthlyChallengeCollection {
	p := newSsmUserMonthlyChallengeCollectionView(res)
	return challengeviews.SsmUserMonthlyChallengeCollection{Projected: p, View: "default"}
}

// NewSsmSchoolScoreboard initializes result type SsmSchoolScoreboard from
// viewed result type SsmSchoolScoreboard.
func NewSsmSchoolScoreboard(vres *challengeviews.SsmSchoolScoreboard) *SsmSchoolScoreboard {
	return newSsmSchoolScoreboard(vres.Projected)
}

// NewViewedSsmSchoolScoreboard initializes viewed result type
// SsmSchoolScoreboard from result type SsmSchoolScoreboard using the given
// view.
func NewViewedSsmSchoolScoreboard(res *SsmSchoolScoreboard, view string) *challengeviews.SsmSchoolScoreboard {
	p := newSsmSchoolScoreboardView(res)
	return &challengeviews.SsmSchoolScoreboard{Projected: p, View: "default"}
}

// NewSsmUserScoreboard initializes result type SsmUserScoreboard from viewed
// result type SsmUserScoreboard.
func NewSsmUserScoreboard(vres *challengeviews.SsmUserScoreboard) *SsmUserScoreboard {
	return newSsmUserScoreboard(vres.Projected)
}

// NewViewedSsmUserScoreboard initializes viewed result type SsmUserScoreboard
// from result type SsmUserScoreboard using the given view.
func NewViewedSsmUserScoreboard(res *SsmUserScoreboard, view string) *challengeviews.SsmUserScoreboard {
	p := newSsmUserScoreboardView(res)
	return &challengeviews.SsmUserScoreboard{Projected: p, View: "default"}
}

// newSsmChallengeCollection converts projected type SsmChallengeCollection to
// service type SsmChallengeCollection.
func newSsmChallengeCollection(vres challengeviews.SsmChallengeCollectionView) SsmChallengeCollection {
	res := make(SsmChallengeCollection, len(vres))
	for i, n := range vres {
		res[i] = newSsmChallenge(n)
	}
	return res
}

// newSsmChallengeCollectionView projects result type SsmChallengeCollection to
// projected type SsmChallengeCollectionView using the "default" view.
func newSsmChallengeCollectionView(res SsmChallengeCollection) challengeviews.SsmChallengeCollectionView {
	vres := make(challengeviews.SsmChallengeCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSsmChallengeView(n)
	}
	return vres
}

// newSsmChallenge converts projected type SsmChallenge to service type
// SsmChallenge.
func newSsmChallenge(vres *challengeviews.SsmChallengeView) *SsmChallenge {
	res := &SsmChallenge{
		CtfEventID: vres.CtfEventID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Slug != nil {
		res.Slug = *vres.Slug
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.Score != nil {
		res.Score = *vres.Score
	}
	if vres.Solves != nil {
		res.Solves = *vres.Solves
	}
	if vres.Solved != nil {
		res.Solved = *vres.Solved
	}
	if vres.Category != nil {
		res.Category = *vres.Category
	}
	if vres.Services != nil {
		res.Services = make([]*ChallengeService, len(vres.Services))
		for i, val := range vres.Services {
			res.Services[i] = transformChallengeviewsChallengeServiceViewToChallengeService(val)
		}
	}
	if vres.Files != nil {
		res.Files = make([]*ChallengeFiles, len(vres.Files))
		for i, val := range vres.Files {
			res.Files[i] = transformChallengeviewsChallengeFilesViewToChallengeFiles(val)
		}
	}
	if vres.Authors != nil {
		res.Authors = make([]*Author, len(vres.Authors))
		for i, val := range vres.Authors {
			res.Authors[i] = transformChallengeviewsAuthorViewToAuthor(val)
		}
	}
	if vres.Solvers != nil {
		res.Solvers = make([]*SsmSolver, len(vres.Solvers))
		for i, val := range vres.Solvers {
			res.Solvers[i] = transformChallengeviewsSsmSolverViewToSsmSolver(val)
		}
	}
	return res
}

// newSsmChallengeView projects result type SsmChallenge to projected type
// SsmChallengeView using the "default" view.
func newSsmChallengeView(res *SsmChallenge) *challengeviews.SsmChallengeView {
	vres := &challengeviews.SsmChallengeView{
		ID:          &res.ID,
		Slug:        &res.Slug,
		Title:       &res.Title,
		Description: &res.Description,
		Score:       &res.Score,
		Solves:      &res.Solves,
		CtfEventID:  res.CtfEventID,
		Solved:      &res.Solved,
		Category:    &res.Category,
	}
	if res.Services != nil {
		vres.Services = make([]*challengeviews.ChallengeServiceView, len(res.Services))
		for i, val := range res.Services {
			vres.Services[i] = transformChallengeServiceToChallengeviewsChallengeServiceView(val)
		}
	}
	if res.Files != nil {
		vres.Files = make([]*challengeviews.ChallengeFilesView, len(res.Files))
		for i, val := range res.Files {
			vres.Files[i] = transformChallengeFilesToChallengeviewsChallengeFilesView(val)
		}
	}
	if res.Authors != nil {
		vres.Authors = make([]*challengeviews.AuthorView, len(res.Authors))
		for i, val := range res.Authors {
			vres.Authors[i] = transformAuthorToChallengeviewsAuthorView(val)
		}
	}
	if res.Solvers != nil {
		vres.Solvers = make([]*challengeviews.SsmSolverView, len(res.Solvers))
		for i, val := range res.Solvers {
			vres.Solvers[i] = transformSsmSolverToChallengeviewsSsmSolverView(val)
		}
	}
	return vres
}

// newSsmSolver converts projected type SsmSolver to service type SsmSolver.
func newSsmSolver(vres *challengeviews.SsmSolverView) *SsmSolver {
	res := &SsmSolver{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.FullName != nil {
		res.FullName = *vres.FullName
	}
	if vres.SolvedAt != nil {
		res.SolvedAt = *vres.SolvedAt
	}
	return res
}

// newSsmSolverView projects result type SsmSolver to projected type
// SsmSolverView using the "default" view.
func newSsmSolverView(res *SsmSolver) *challengeviews.SsmSolverView {
	vres := &challengeviews.SsmSolverView{
		ID:       &res.ID,
		FullName: &res.FullName,
		SolvedAt: &res.SolvedAt,
	}
	return vres
}

// newSsmUserMonthlyChallenge converts projected type SsmUserMonthlyChallenge
// to service type SsmUserMonthlyChallenge.
func newSsmUserMonthlyChallenge(vres *challengeviews.SsmUserMonthlyChallengeView) *SsmUserMonthlyChallenge {
	res := &SsmUserMonthlyChallenge{}
	if vres.ChallengeID != nil {
		res.ChallengeID = *vres.ChallengeID
	}
	if vres.DisplayMonth != nil {
		res.DisplayMonth = *vres.DisplayMonth
	}
	if vres.StartDate != nil {
		res.StartDate = *vres.StartDate
	}
	if vres.EndDate != nil {
		res.EndDate = *vres.EndDate
	}
	if vres.Challenge != nil {
		res.Challenge = newSsmChallenge(vres.Challenge)
	}
	return res
}

// newSsmUserMonthlyChallengeView projects result type SsmUserMonthlyChallenge
// to projected type SsmUserMonthlyChallengeView using the "default" view.
func newSsmUserMonthlyChallengeView(res *SsmUserMonthlyChallenge) *challengeviews.SsmUserMonthlyChallengeView {
	vres := &challengeviews.SsmUserMonthlyChallengeView{
		ChallengeID:  &res.ChallengeID,
		DisplayMonth: &res.DisplayMonth,
		StartDate:    &res.StartDate,
		EndDate:      &res.EndDate,
	}
	if res.Challenge != nil {
		vres.Challenge = newSsmChallengeView(res.Challenge)
	}
	return vres
}

// newSsmUserMonthlyChallengeCollection converts projected type
// SsmUserMonthlyChallengeCollection to service type
// SsmUserMonthlyChallengeCollection.
func newSsmUserMonthlyChallengeCollection(vres challengeviews.SsmUserMonthlyChallengeCollectionView) SsmUserMonthlyChallengeCollection {
	res := make(SsmUserMonthlyChallengeCollection, len(vres))
	for i, n := range vres {
		res[i] = newSsmUserMonthlyChallenge(n)
	}
	return res
}

// newSsmUserMonthlyChallengeCollectionView projects result type
// SsmUserMonthlyChallengeCollection to projected type
// SsmUserMonthlyChallengeCollectionView using the "default" view.
func newSsmUserMonthlyChallengeCollectionView(res SsmUserMonthlyChallengeCollection) challengeviews.SsmUserMonthlyChallengeCollectionView {
	vres := make(challengeviews.SsmUserMonthlyChallengeCollectionView, len(res))
	for i, n := range res {
		vres[i] = newSsmUserMonthlyChallengeView(n)
	}
	return vres
}

// newSsmSchoolScoreboard converts projected type SsmSchoolScoreboard to
// service type SsmSchoolScoreboard.
func newSsmSchoolScoreboard(vres *challengeviews.SsmSchoolScoreboardView) *SsmSchoolScoreboard {
	res := &SsmSchoolScoreboard{}
	if vres.Scores != nil {
		res.Scores = make([]*SchoolScoreboardScore, len(vres.Scores))
		for i, val := range vres.Scores {
			res.Scores[i] = transformChallengeviewsSchoolScoreboardScoreViewToSchoolScoreboardScore(val)
		}
	}
	return res
}

// newSsmSchoolScoreboardView projects result type SsmSchoolScoreboard to
// projected type SsmSchoolScoreboardView using the "default" view.
func newSsmSchoolScoreboardView(res *SsmSchoolScoreboard) *challengeviews.SsmSchoolScoreboardView {
	vres := &challengeviews.SsmSchoolScoreboardView{}
	if res.Scores != nil {
		vres.Scores = make([]*challengeviews.SchoolScoreboardScoreView, len(res.Scores))
		for i, val := range res.Scores {
			vres.Scores[i] = transformSchoolScoreboardScoreToChallengeviewsSchoolScoreboardScoreView(val)
		}
	}
	return vres
}

// newSsmUserScoreboard converts projected type SsmUserScoreboard to service
// type SsmUserScoreboard.
func newSsmUserScoreboard(vres *challengeviews.SsmUserScoreboardView) *SsmUserScoreboard {
	res := &SsmUserScoreboard{}
	if vres.Scores != nil {
		res.Scores = make([]*UserScoreboardScore, len(vres.Scores))
		for i, val := range vres.Scores {
			res.Scores[i] = transformChallengeviewsUserScoreboardScoreViewToUserScoreboardScore(val)
		}
	}
	return res
}

// newSsmUserScoreboardView projects result type SsmUserScoreboard to projected
// type SsmUserScoreboardView using the "default" view.
func newSsmUserScoreboardView(res *SsmUserScoreboard) *challengeviews.SsmUserScoreboardView {
	vres := &challengeviews.SsmUserScoreboardView{}
	if res.Scores != nil {
		vres.Scores = make([]*challengeviews.UserScoreboardScoreView, len(res.Scores))
		for i, val := range res.Scores {
			vres.Scores[i] = transformUserScoreboardScoreToChallengeviewsUserScoreboardScoreView(val)
		}
	}
	return vres
}

// transformChallengeviewsChallengeServiceViewToChallengeService builds a value
// of type *ChallengeService from a value of type
// *challengeviews.ChallengeServiceView.
func transformChallengeviewsChallengeServiceViewToChallengeService(v *challengeviews.ChallengeServiceView) *ChallengeService {
	if v == nil {
		return nil
	}
	res := &ChallengeService{
		UserDisplay: *v.UserDisplay,
		Hyperlink:   *v.Hyperlink,
	}

	return res
}

// transformChallengeviewsChallengeFilesViewToChallengeFiles builds a value of
// type *ChallengeFiles from a value of type *challengeviews.ChallengeFilesView.
func transformChallengeviewsChallengeFilesViewToChallengeFiles(v *challengeviews.ChallengeFilesView) *ChallengeFiles {
	if v == nil {
		return nil
	}
	res := &ChallengeFiles{
		Filename: *v.Filename,
		URL:      *v.URL,
	}

	return res
}

// transformChallengeviewsAuthorViewToAuthor builds a value of type *Author
// from a value of type *challengeviews.AuthorView.
func transformChallengeviewsAuthorViewToAuthor(v *challengeviews.AuthorView) *Author {
	if v == nil {
		return nil
	}
	res := &Author{
		ID:          *v.ID,
		FullName:    *v.FullName,
		Description: *v.Description,
		Sponsor:     *v.Sponsor,
		Slug:        *v.Slug,
		ImageURL:    v.ImageURL,
		Publish:     *v.Publish,
	}

	return res
}

// transformChallengeviewsSsmSolverViewToSsmSolver builds a value of type
// *SsmSolver from a value of type *challengeviews.SsmSolverView.
func transformChallengeviewsSsmSolverViewToSsmSolver(v *challengeviews.SsmSolverView) *SsmSolver {
	if v == nil {
		return nil
	}
	res := &SsmSolver{
		ID:       *v.ID,
		FullName: *v.FullName,
		SolvedAt: *v.SolvedAt,
	}

	return res
}

// transformChallengeServiceToChallengeviewsChallengeServiceView builds a value
// of type *challengeviews.ChallengeServiceView from a value of type
// *ChallengeService.
func transformChallengeServiceToChallengeviewsChallengeServiceView(v *ChallengeService) *challengeviews.ChallengeServiceView {
	if v == nil {
		return nil
	}
	res := &challengeviews.ChallengeServiceView{
		UserDisplay: &v.UserDisplay,
		Hyperlink:   &v.Hyperlink,
	}

	return res
}

// transformChallengeFilesToChallengeviewsChallengeFilesView builds a value of
// type *challengeviews.ChallengeFilesView from a value of type *ChallengeFiles.
func transformChallengeFilesToChallengeviewsChallengeFilesView(v *ChallengeFiles) *challengeviews.ChallengeFilesView {
	if v == nil {
		return nil
	}
	res := &challengeviews.ChallengeFilesView{
		Filename: &v.Filename,
		URL:      &v.URL,
	}

	return res
}

// transformAuthorToChallengeviewsAuthorView builds a value of type
// *challengeviews.AuthorView from a value of type *Author.
func transformAuthorToChallengeviewsAuthorView(v *Author) *challengeviews.AuthorView {
	if v == nil {
		return nil
	}
	res := &challengeviews.AuthorView{
		ID:          &v.ID,
		FullName:    &v.FullName,
		Description: &v.Description,
		Sponsor:     &v.Sponsor,
		Slug:        &v.Slug,
		ImageURL:    v.ImageURL,
		Publish:     &v.Publish,
	}

	return res
}

// transformSsmSolverToChallengeviewsSsmSolverView builds a value of type
// *challengeviews.SsmSolverView from a value of type *SsmSolver.
func transformSsmSolverToChallengeviewsSsmSolverView(v *SsmSolver) *challengeviews.SsmSolverView {
	if v == nil {
		return nil
	}
	res := &challengeviews.SsmSolverView{
		ID:       &v.ID,
		FullName: &v.FullName,
		SolvedAt: &v.SolvedAt,
	}

	return res
}

// transformChallengeviewsSchoolScoreboardScoreViewToSchoolScoreboardScore
// builds a value of type *SchoolScoreboardScore from a value of type
// *challengeviews.SchoolScoreboardScoreView.
func transformChallengeviewsSchoolScoreboardScoreViewToSchoolScoreboardScore(v *challengeviews.SchoolScoreboardScoreView) *SchoolScoreboardScore {
	if v == nil {
		return nil
	}
	res := &SchoolScoreboardScore{
		Score:      *v.Score,
		SchoolName: *v.SchoolName,
	}

	return res
}

// transformSchoolScoreboardScoreToChallengeviewsSchoolScoreboardScoreView
// builds a value of type *challengeviews.SchoolScoreboardScoreView from a
// value of type *SchoolScoreboardScore.
func transformSchoolScoreboardScoreToChallengeviewsSchoolScoreboardScoreView(v *SchoolScoreboardScore) *challengeviews.SchoolScoreboardScoreView {
	res := &challengeviews.SchoolScoreboardScoreView{
		Score:      &v.Score,
		SchoolName: &v.SchoolName,
	}

	return res
}

// transformChallengeviewsUserScoreboardScoreViewToUserScoreboardScore builds a
// value of type *UserScoreboardScore from a value of type
// *challengeviews.UserScoreboardScoreView.
func transformChallengeviewsUserScoreboardScoreViewToUserScoreboardScore(v *challengeviews.UserScoreboardScoreView) *UserScoreboardScore {
	if v == nil {
		return nil
	}
	res := &UserScoreboardScore{
		UserID:     *v.UserID,
		Name:       *v.Name,
		SchoolName: *v.SchoolName,
		Score:      *v.Score,
	}

	return res
}

// transformUserScoreboardScoreToChallengeviewsUserScoreboardScoreView builds a
// value of type *challengeviews.UserScoreboardScoreView from a value of type
// *UserScoreboardScore.
func transformUserScoreboardScoreToChallengeviewsUserScoreboardScoreView(v *UserScoreboardScore) *challengeviews.UserScoreboardScoreView {
	res := &challengeviews.UserScoreboardScoreView{
		UserID:     &v.UserID,
		Name:       &v.Name,
		SchoolName: &v.SchoolName,
		Score:      &v.Score,
	}

	return res
}
