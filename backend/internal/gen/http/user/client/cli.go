// Code generated by goa v3.5.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	user "github.com/sakerhetsm/ssm-wargame/internal/gen/user"
)

// BuildGetSelfPayload builds the payload for the user GetSelf endpoint from
// CLI flags.
func BuildGetSelfPayload(userGetSelfToken string) (*user.GetSelfPayload, error) {
	var token string
	{
		token = userGetSelfToken
	}
	v := &user.GetSelfPayload{}
	v.Token = token

	return v, nil
}

// BuildUpdateSelfPayload builds the payload for the user UpdateSelf endpoint
// from CLI flags.
func BuildUpdateSelfPayload(userUpdateSelfBody string, userUpdateSelfToken string) (*user.UpdateSelfPayload, error) {
	var err error
	var body UpdateSelfRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateSelfBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"full_name\": \"Movitz Sunar\"\n   }'")
		}
	}
	var token string
	{
		token = userUpdateSelfToken
	}
	v := &user.UpdateSelfPayload{
		FullName: body.FullName,
	}
	v.Token = token

	return v, nil
}

// BuildCompleteOnboardingPayload builds the payload for the user
// CompleteOnboarding endpoint from CLI flags.
func BuildCompleteOnboardingPayload(userCompleteOnboardingToken string) (*user.CompleteOnboardingPayload, error) {
	var token string
	{
		token = userCompleteOnboardingToken
	}
	v := &user.CompleteOnboardingPayload{}
	v.Token = token

	return v, nil
}

// BuildJoinSchoolPayload builds the payload for the user JoinSchool endpoint
// from CLI flags.
func BuildJoinSchoolPayload(userJoinSchoolBody string, userJoinSchoolToken string) (*user.JoinSchoolPayload, error) {
	var err error
	var body JoinSchoolRequestBody
	{
		err = json.Unmarshal([]byte(userJoinSchoolBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"school_id\": \"b6d5e5eb-3272-4795-ba1c-73a8efc1cf19\"\n   }'")
		}
	}
	var token string
	{
		token = userJoinSchoolToken
	}
	v := &user.JoinSchoolPayload{
		SchoolID: body.SchoolID,
	}
	v.Token = token

	return v, nil
}

// BuildLeaveSchoolPayload builds the payload for the user LeaveSchool endpoint
// from CLI flags.
func BuildLeaveSchoolPayload(userLeaveSchoolToken string) (*user.LeaveSchoolPayload, error) {
	var token string
	{
		token = userLeaveSchoolToken
	}
	v := &user.LeaveSchoolPayload{}
	v.Token = token

	return v, nil
}

// BuildSearchSchoolsPayload builds the payload for the user SearchSchools
// endpoint from CLI flags.
func BuildSearchSchoolsPayload(userSearchSchoolsQ string, userSearchSchoolsUniversity string, userSearchSchoolsToken string) (*user.SearchSchoolsPayload, error) {
	var err error
	var q string
	{
		q = userSearchSchoolsQ
	}
	var university *bool
	{
		if userSearchSchoolsUniversity != "" {
			var val bool
			val, err = strconv.ParseBool(userSearchSchoolsUniversity)
			university = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for university, must be BOOL")
			}
		}
	}
	var token string
	{
		token = userSearchSchoolsToken
	}
	v := &user.SearchSchoolsPayload{}
	v.Q = q
	v.University = university
	v.Token = token

	return v, nil
}
