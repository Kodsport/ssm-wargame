// Code generated by goa v3.5.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	user "github.com/sakerhetsm/ssm-wargame/internal/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// UpdateSelfRequestBody is the type of the "user" service "UpdateSelf"
// endpoint HTTP request body.
type UpdateSelfRequestBody struct {
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
}

// JoinSchoolRequestBody is the type of the "user" service "JoinSchool"
// endpoint HTTP request body.
type JoinSchoolRequestBody struct {
	SchoolID string `form:"school_id" json:"school_id" xml:"school_id"`
}

// GetSelfResponseBody is the type of the "user" service "GetSelf" endpoint
// HTTP response body.
type GetSelfResponseBody struct {
	SchoolName     *string `form:"school_name,omitempty" json:"school_name,omitempty" xml:"school_name,omitempty"`
	OnboardingDone *bool   `form:"onboarding_done,omitempty" json:"onboarding_done,omitempty" xml:"onboarding_done,omitempty"`
	ID             *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Email          *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FullName       *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	Role           *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	SchoolID       *string `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// SearchSchoolsResponseBody is the type of the "user" service "SearchSchools"
// endpoint HTTP response body.
type SearchSchoolsResponseBody []*SchoolResponse

// SchoolResponse is used to define fields on response body types.
type SchoolResponse struct {
	Name             *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	MunicipalityName *string `form:"municipality_name,omitempty" json:"municipality_name,omitempty" xml:"municipality_name,omitempty"`
	IsUniversity     *bool   `form:"is_university,omitempty" json:"is_university,omitempty" xml:"is_university,omitempty"`
	// ID of a file
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewUpdateSelfRequestBody builds the HTTP request body from the payload of
// the "UpdateSelf" endpoint of the "user" service.
func NewUpdateSelfRequestBody(p *user.UpdateSelfPayload) *UpdateSelfRequestBody {
	body := &UpdateSelfRequestBody{
		FullName: p.FullName,
	}
	return body
}

// NewJoinSchoolRequestBody builds the HTTP request body from the payload of
// the "JoinSchool" endpoint of the "user" service.
func NewJoinSchoolRequestBody(p *user.JoinSchoolPayload) *JoinSchoolRequestBody {
	body := &JoinSchoolRequestBody{
		SchoolID: p.SchoolID,
	}
	return body
}

// NewGetSelfResultOK builds a "user" service "GetSelf" endpoint result from a
// HTTP "OK" response.
func NewGetSelfResultOK(body *GetSelfResponseBody) *user.GetSelfResult {
	v := &user.GetSelfResult{
		SchoolName:     body.SchoolName,
		OnboardingDone: *body.OnboardingDone,
		ID:             *body.ID,
		Email:          *body.Email,
		FullName:       *body.FullName,
		Role:           *body.Role,
		SchoolID:       body.SchoolID,
	}

	return v
}

// NewSearchSchoolsSchoolOK builds a "user" service "SearchSchools" endpoint
// result from a HTTP "OK" response.
func NewSearchSchoolsSchoolOK(body []*SchoolResponse) []*user.School {
	v := make([]*user.School, len(body))
	for i, val := range body {
		v[i] = unmarshalSchoolResponseToUserSchool(val)
	}

	return v
}

// ValidateGetSelfResponseBody runs the validations defined on
// GetSelfResponseBody
func ValidateGetSelfResponseBody(body *GetSelfResponseBody) (err error) {
	if body.OnboardingDone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("onboarding_done", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateSchoolResponse runs the validations defined on SchoolResponse
func ValidateSchoolResponse(body *SchoolResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.MunicipalityName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("municipality_name", "body"))
	}
	if body.IsUniversity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_university", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
