// Code generated by goa v3.5.2, DO NOT EDIT.
//
// wargame HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	adminc "github.com/sakerhetsm/ssm-wargame/internal/gen/http/admin/client"
	authc "github.com/sakerhetsm/ssm-wargame/internal/gen/http/auth/client"
	challengec "github.com/sakerhetsm/ssm-wargame/internal/gen/http/challenge/client"
	userc "github.com/sakerhetsm/ssm-wargame/internal/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (generate-discord-auth-url|exchange-discord)
challenge (list-challenges|list-events|get-current-monthly-challenge|list-monthly-challenges|submit-flag|school-scoreboard|user-scoreboard|list-authors|list-courses|enroll-course|complete-course)
admin (list-challenges|get-challenge-meta|create-challenge|update-challenge|presign-chall-file-upload|list-monthly-challenges|delete-monthly-challenge|delete-file|create-monthly-challenge|list-users|list-authors|update-author|create-author|delete-author|add-flag|delete-flag|list-categories|challtools-import|list-ctf-events|create-ctf-event|delete-ctf-event|create-ctf-event-import-token|list-courses|create-course|update-course)
user (get-self|complete-onboarding|join-school|leave-school|search-schools)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth generate-discord-auth-url` + "\n" +
		os.Args[0] + ` challenge list-challenges --slug "brumm" --ids [] --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"` + "\n" +
		os.Args[0] + ` admin list-challenges --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"` + "\n" +
		os.Args[0] + ` user get-self --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authGenerateDiscordAuthURLFlags = flag.NewFlagSet("generate-discord-auth-url", flag.ExitOnError)

		authExchangeDiscordFlags    = flag.NewFlagSet("exchange-discord", flag.ExitOnError)
		authExchangeDiscordBodyFlag = authExchangeDiscordFlags.String("body", "REQUIRED", "")

		challengeFlags = flag.NewFlagSet("challenge", flag.ContinueOnError)

		challengeListChallengesFlags     = flag.NewFlagSet("list-challenges", flag.ExitOnError)
		challengeListChallengesSlugFlag  = challengeListChallengesFlags.String("slug", "", "")
		challengeListChallengesIdsFlag   = challengeListChallengesFlags.String("ids", "", "")
		challengeListChallengesTokenFlag = challengeListChallengesFlags.String("token", "", "")

		challengeListEventsFlags     = flag.NewFlagSet("list-events", flag.ExitOnError)
		challengeListEventsTokenFlag = challengeListEventsFlags.String("token", "", "")

		challengeGetCurrentMonthlyChallengeFlags     = flag.NewFlagSet("get-current-monthly-challenge", flag.ExitOnError)
		challengeGetCurrentMonthlyChallengeTokenFlag = challengeGetCurrentMonthlyChallengeFlags.String("token", "", "")

		challengeListMonthlyChallengesFlags     = flag.NewFlagSet("list-monthly-challenges", flag.ExitOnError)
		challengeListMonthlyChallengesTokenFlag = challengeListMonthlyChallengesFlags.String("token", "", "")

		challengeSubmitFlagFlags           = flag.NewFlagSet("submit-flag", flag.ExitOnError)
		challengeSubmitFlagBodyFlag        = challengeSubmitFlagFlags.String("body", "REQUIRED", "")
		challengeSubmitFlagChallengeIDFlag = challengeSubmitFlagFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		challengeSubmitFlagTokenFlag       = challengeSubmitFlagFlags.String("token", "REQUIRED", "")

		challengeSchoolScoreboardFlags     = flag.NewFlagSet("school-scoreboard", flag.ExitOnError)
		challengeSchoolScoreboardTokenFlag = challengeSchoolScoreboardFlags.String("token", "", "")

		challengeUserScoreboardFlags     = flag.NewFlagSet("user-scoreboard", flag.ExitOnError)
		challengeUserScoreboardTokenFlag = challengeUserScoreboardFlags.String("token", "", "")

		challengeListAuthorsFlags     = flag.NewFlagSet("list-authors", flag.ExitOnError)
		challengeListAuthorsTokenFlag = challengeListAuthorsFlags.String("token", "", "")

		challengeListCoursesFlags     = flag.NewFlagSet("list-courses", flag.ExitOnError)
		challengeListCoursesTokenFlag = challengeListCoursesFlags.String("token", "", "")

		challengeEnrollCourseFlags     = flag.NewFlagSet("enroll-course", flag.ExitOnError)
		challengeEnrollCourseIDFlag    = challengeEnrollCourseFlags.String("id", "REQUIRED", "ID of a file")
		challengeEnrollCourseTokenFlag = challengeEnrollCourseFlags.String("token", "", "")

		challengeCompleteCourseFlags     = flag.NewFlagSet("complete-course", flag.ExitOnError)
		challengeCompleteCourseIDFlag    = challengeCompleteCourseFlags.String("id", "REQUIRED", "ID of a file")
		challengeCompleteCourseTokenFlag = challengeCompleteCourseFlags.String("token", "", "")

		adminFlags = flag.NewFlagSet("admin", flag.ContinueOnError)

		adminListChallengesFlags     = flag.NewFlagSet("list-challenges", flag.ExitOnError)
		adminListChallengesTokenFlag = adminListChallengesFlags.String("token", "REQUIRED", "")

		adminGetChallengeMetaFlags           = flag.NewFlagSet("get-challenge-meta", flag.ExitOnError)
		adminGetChallengeMetaChallengeIDFlag = adminGetChallengeMetaFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminGetChallengeMetaTokenFlag       = adminGetChallengeMetaFlags.String("token", "REQUIRED", "")

		adminCreateChallengeFlags     = flag.NewFlagSet("create-challenge", flag.ExitOnError)
		adminCreateChallengeBodyFlag  = adminCreateChallengeFlags.String("body", "REQUIRED", "")
		adminCreateChallengeTokenFlag = adminCreateChallengeFlags.String("token", "REQUIRED", "")

		adminUpdateChallengeFlags           = flag.NewFlagSet("update-challenge", flag.ExitOnError)
		adminUpdateChallengeBodyFlag        = adminUpdateChallengeFlags.String("body", "REQUIRED", "")
		adminUpdateChallengeChallengeIDFlag = adminUpdateChallengeFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminUpdateChallengeTokenFlag       = adminUpdateChallengeFlags.String("token", "REQUIRED", "")

		adminPresignChallFileUploadFlags           = flag.NewFlagSet("presign-chall-file-upload", flag.ExitOnError)
		adminPresignChallFileUploadBodyFlag        = adminPresignChallFileUploadFlags.String("body", "REQUIRED", "")
		adminPresignChallFileUploadChallengeIDFlag = adminPresignChallFileUploadFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminPresignChallFileUploadTokenFlag       = adminPresignChallFileUploadFlags.String("token", "REQUIRED", "")

		adminListMonthlyChallengesFlags     = flag.NewFlagSet("list-monthly-challenges", flag.ExitOnError)
		adminListMonthlyChallengesTokenFlag = adminListMonthlyChallengesFlags.String("token", "REQUIRED", "")

		adminDeleteMonthlyChallengeFlags           = flag.NewFlagSet("delete-monthly-challenge", flag.ExitOnError)
		adminDeleteMonthlyChallengeChallengeIDFlag = adminDeleteMonthlyChallengeFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminDeleteMonthlyChallengeTokenFlag       = adminDeleteMonthlyChallengeFlags.String("token", "REQUIRED", "")

		adminDeleteFileFlags      = flag.NewFlagSet("delete-file", flag.ExitOnError)
		adminDeleteFileFileIDFlag = adminDeleteFileFlags.String("file-id", "REQUIRED", "ID of a file")
		adminDeleteFileTokenFlag  = adminDeleteFileFlags.String("token", "REQUIRED", "")

		adminCreateMonthlyChallengeFlags     = flag.NewFlagSet("create-monthly-challenge", flag.ExitOnError)
		adminCreateMonthlyChallengeBodyFlag  = adminCreateMonthlyChallengeFlags.String("body", "REQUIRED", "")
		adminCreateMonthlyChallengeTokenFlag = adminCreateMonthlyChallengeFlags.String("token", "REQUIRED", "")

		adminListUsersFlags     = flag.NewFlagSet("list-users", flag.ExitOnError)
		adminListUsersTokenFlag = adminListUsersFlags.String("token", "REQUIRED", "")

		adminListAuthorsFlags     = flag.NewFlagSet("list-authors", flag.ExitOnError)
		adminListAuthorsTokenFlag = adminListAuthorsFlags.String("token", "REQUIRED", "")

		adminUpdateAuthorFlags     = flag.NewFlagSet("update-author", flag.ExitOnError)
		adminUpdateAuthorBodyFlag  = adminUpdateAuthorFlags.String("body", "REQUIRED", "")
		adminUpdateAuthorIDFlag    = adminUpdateAuthorFlags.String("id", "REQUIRED", "ID of a file")
		adminUpdateAuthorTokenFlag = adminUpdateAuthorFlags.String("token", "REQUIRED", "")

		adminCreateAuthorFlags     = flag.NewFlagSet("create-author", flag.ExitOnError)
		adminCreateAuthorBodyFlag  = adminCreateAuthorFlags.String("body", "REQUIRED", "")
		adminCreateAuthorTokenFlag = adminCreateAuthorFlags.String("token", "REQUIRED", "")

		adminDeleteAuthorFlags     = flag.NewFlagSet("delete-author", flag.ExitOnError)
		adminDeleteAuthorIDFlag    = adminDeleteAuthorFlags.String("id", "REQUIRED", "")
		adminDeleteAuthorTokenFlag = adminDeleteAuthorFlags.String("token", "REQUIRED", "")

		adminAddFlagFlags           = flag.NewFlagSet("add-flag", flag.ExitOnError)
		adminAddFlagBodyFlag        = adminAddFlagFlags.String("body", "REQUIRED", "")
		adminAddFlagChallengeIDFlag = adminAddFlagFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminAddFlagTokenFlag       = adminAddFlagFlags.String("token", "REQUIRED", "")

		adminDeleteFlagFlags           = flag.NewFlagSet("delete-flag", flag.ExitOnError)
		adminDeleteFlagChallengeIDFlag = adminDeleteFlagFlags.String("challenge-id", "REQUIRED", "ID of a challenge")
		adminDeleteFlagFlagIDFlag      = adminDeleteFlagFlags.String("flag-id", "REQUIRED", "")
		adminDeleteFlagTokenFlag       = adminDeleteFlagFlags.String("token", "REQUIRED", "")

		adminListCategoriesFlags     = flag.NewFlagSet("list-categories", flag.ExitOnError)
		adminListCategoriesTokenFlag = adminListCategoriesFlags.String("token", "REQUIRED", "")

		adminChalltoolsImportFlags           = flag.NewFlagSet("challtools-import", flag.ExitOnError)
		adminChalltoolsImportBodyFlag        = adminChalltoolsImportFlags.String("body", "REQUIRED", "")
		adminChalltoolsImportImportTokenFlag = adminChalltoolsImportFlags.String("import-token", "REQUIRED", "")

		adminListCTFEventsFlags     = flag.NewFlagSet("list-ctf-events", flag.ExitOnError)
		adminListCTFEventsTokenFlag = adminListCTFEventsFlags.String("token", "REQUIRED", "")

		adminCreateCTFEventFlags     = flag.NewFlagSet("create-ctf-event", flag.ExitOnError)
		adminCreateCTFEventBodyFlag  = adminCreateCTFEventFlags.String("body", "REQUIRED", "")
		adminCreateCTFEventTokenFlag = adminCreateCTFEventFlags.String("token", "REQUIRED", "")

		adminDeleteCTFEventFlags     = flag.NewFlagSet("delete-ctf-event", flag.ExitOnError)
		adminDeleteCTFEventIDFlag    = adminDeleteCTFEventFlags.String("id", "REQUIRED", "ID of a file")
		adminDeleteCTFEventTokenFlag = adminDeleteCTFEventFlags.String("token", "REQUIRED", "")

		adminCreateCTFEventImportTokenFlags     = flag.NewFlagSet("create-ctf-event-import-token", flag.ExitOnError)
		adminCreateCTFEventImportTokenBodyFlag  = adminCreateCTFEventImportTokenFlags.String("body", "REQUIRED", "")
		adminCreateCTFEventImportTokenTokenFlag = adminCreateCTFEventImportTokenFlags.String("token", "REQUIRED", "")

		adminListCoursesFlags     = flag.NewFlagSet("list-courses", flag.ExitOnError)
		adminListCoursesTokenFlag = adminListCoursesFlags.String("token", "REQUIRED", "")

		adminCreateCourseFlags     = flag.NewFlagSet("create-course", flag.ExitOnError)
		adminCreateCourseBodyFlag  = adminCreateCourseFlags.String("body", "REQUIRED", "")
		adminCreateCourseTokenFlag = adminCreateCourseFlags.String("token", "REQUIRED", "")

		adminUpdateCourseFlags     = flag.NewFlagSet("update-course", flag.ExitOnError)
		adminUpdateCourseBodyFlag  = adminUpdateCourseFlags.String("body", "REQUIRED", "")
		adminUpdateCourseIDFlag    = adminUpdateCourseFlags.String("id", "REQUIRED", "ID of a file")
		adminUpdateCourseTokenFlag = adminUpdateCourseFlags.String("token", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userGetSelfFlags     = flag.NewFlagSet("get-self", flag.ExitOnError)
		userGetSelfTokenFlag = userGetSelfFlags.String("token", "REQUIRED", "")

		userCompleteOnboardingFlags     = flag.NewFlagSet("complete-onboarding", flag.ExitOnError)
		userCompleteOnboardingTokenFlag = userCompleteOnboardingFlags.String("token", "REQUIRED", "")

		userJoinSchoolFlags     = flag.NewFlagSet("join-school", flag.ExitOnError)
		userJoinSchoolBodyFlag  = userJoinSchoolFlags.String("body", "REQUIRED", "")
		userJoinSchoolTokenFlag = userJoinSchoolFlags.String("token", "REQUIRED", "")

		userLeaveSchoolFlags     = flag.NewFlagSet("leave-school", flag.ExitOnError)
		userLeaveSchoolTokenFlag = userLeaveSchoolFlags.String("token", "REQUIRED", "")

		userSearchSchoolsFlags          = flag.NewFlagSet("search-schools", flag.ExitOnError)
		userSearchSchoolsQFlag          = userSearchSchoolsFlags.String("q", "REQUIRED", "")
		userSearchSchoolsUniversityFlag = userSearchSchoolsFlags.String("university", "", "")
		userSearchSchoolsTokenFlag      = userSearchSchoolsFlags.String("token", "REQUIRED", "")
	)
	authFlags.Usage = authUsage
	authGenerateDiscordAuthURLFlags.Usage = authGenerateDiscordAuthURLUsage
	authExchangeDiscordFlags.Usage = authExchangeDiscordUsage

	challengeFlags.Usage = challengeUsage
	challengeListChallengesFlags.Usage = challengeListChallengesUsage
	challengeListEventsFlags.Usage = challengeListEventsUsage
	challengeGetCurrentMonthlyChallengeFlags.Usage = challengeGetCurrentMonthlyChallengeUsage
	challengeListMonthlyChallengesFlags.Usage = challengeListMonthlyChallengesUsage
	challengeSubmitFlagFlags.Usage = challengeSubmitFlagUsage
	challengeSchoolScoreboardFlags.Usage = challengeSchoolScoreboardUsage
	challengeUserScoreboardFlags.Usage = challengeUserScoreboardUsage
	challengeListAuthorsFlags.Usage = challengeListAuthorsUsage
	challengeListCoursesFlags.Usage = challengeListCoursesUsage
	challengeEnrollCourseFlags.Usage = challengeEnrollCourseUsage
	challengeCompleteCourseFlags.Usage = challengeCompleteCourseUsage

	adminFlags.Usage = adminUsage
	adminListChallengesFlags.Usage = adminListChallengesUsage
	adminGetChallengeMetaFlags.Usage = adminGetChallengeMetaUsage
	adminCreateChallengeFlags.Usage = adminCreateChallengeUsage
	adminUpdateChallengeFlags.Usage = adminUpdateChallengeUsage
	adminPresignChallFileUploadFlags.Usage = adminPresignChallFileUploadUsage
	adminListMonthlyChallengesFlags.Usage = adminListMonthlyChallengesUsage
	adminDeleteMonthlyChallengeFlags.Usage = adminDeleteMonthlyChallengeUsage
	adminDeleteFileFlags.Usage = adminDeleteFileUsage
	adminCreateMonthlyChallengeFlags.Usage = adminCreateMonthlyChallengeUsage
	adminListUsersFlags.Usage = adminListUsersUsage
	adminListAuthorsFlags.Usage = adminListAuthorsUsage
	adminUpdateAuthorFlags.Usage = adminUpdateAuthorUsage
	adminCreateAuthorFlags.Usage = adminCreateAuthorUsage
	adminDeleteAuthorFlags.Usage = adminDeleteAuthorUsage
	adminAddFlagFlags.Usage = adminAddFlagUsage
	adminDeleteFlagFlags.Usage = adminDeleteFlagUsage
	adminListCategoriesFlags.Usage = adminListCategoriesUsage
	adminChalltoolsImportFlags.Usage = adminChalltoolsImportUsage
	adminListCTFEventsFlags.Usage = adminListCTFEventsUsage
	adminCreateCTFEventFlags.Usage = adminCreateCTFEventUsage
	adminDeleteCTFEventFlags.Usage = adminDeleteCTFEventUsage
	adminCreateCTFEventImportTokenFlags.Usage = adminCreateCTFEventImportTokenUsage
	adminListCoursesFlags.Usage = adminListCoursesUsage
	adminCreateCourseFlags.Usage = adminCreateCourseUsage
	adminUpdateCourseFlags.Usage = adminUpdateCourseUsage

	userFlags.Usage = userUsage
	userGetSelfFlags.Usage = userGetSelfUsage
	userCompleteOnboardingFlags.Usage = userCompleteOnboardingUsage
	userJoinSchoolFlags.Usage = userJoinSchoolUsage
	userLeaveSchoolFlags.Usage = userLeaveSchoolUsage
	userSearchSchoolsFlags.Usage = userSearchSchoolsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "challenge":
			svcf = challengeFlags
		case "admin":
			svcf = adminFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "generate-discord-auth-url":
				epf = authGenerateDiscordAuthURLFlags

			case "exchange-discord":
				epf = authExchangeDiscordFlags

			}

		case "challenge":
			switch epn {
			case "list-challenges":
				epf = challengeListChallengesFlags

			case "list-events":
				epf = challengeListEventsFlags

			case "get-current-monthly-challenge":
				epf = challengeGetCurrentMonthlyChallengeFlags

			case "list-monthly-challenges":
				epf = challengeListMonthlyChallengesFlags

			case "submit-flag":
				epf = challengeSubmitFlagFlags

			case "school-scoreboard":
				epf = challengeSchoolScoreboardFlags

			case "user-scoreboard":
				epf = challengeUserScoreboardFlags

			case "list-authors":
				epf = challengeListAuthorsFlags

			case "list-courses":
				epf = challengeListCoursesFlags

			case "enroll-course":
				epf = challengeEnrollCourseFlags

			case "complete-course":
				epf = challengeCompleteCourseFlags

			}

		case "admin":
			switch epn {
			case "list-challenges":
				epf = adminListChallengesFlags

			case "get-challenge-meta":
				epf = adminGetChallengeMetaFlags

			case "create-challenge":
				epf = adminCreateChallengeFlags

			case "update-challenge":
				epf = adminUpdateChallengeFlags

			case "presign-chall-file-upload":
				epf = adminPresignChallFileUploadFlags

			case "list-monthly-challenges":
				epf = adminListMonthlyChallengesFlags

			case "delete-monthly-challenge":
				epf = adminDeleteMonthlyChallengeFlags

			case "delete-file":
				epf = adminDeleteFileFlags

			case "create-monthly-challenge":
				epf = adminCreateMonthlyChallengeFlags

			case "list-users":
				epf = adminListUsersFlags

			case "list-authors":
				epf = adminListAuthorsFlags

			case "update-author":
				epf = adminUpdateAuthorFlags

			case "create-author":
				epf = adminCreateAuthorFlags

			case "delete-author":
				epf = adminDeleteAuthorFlags

			case "add-flag":
				epf = adminAddFlagFlags

			case "delete-flag":
				epf = adminDeleteFlagFlags

			case "list-categories":
				epf = adminListCategoriesFlags

			case "challtools-import":
				epf = adminChalltoolsImportFlags

			case "list-ctf-events":
				epf = adminListCTFEventsFlags

			case "create-ctf-event":
				epf = adminCreateCTFEventFlags

			case "delete-ctf-event":
				epf = adminDeleteCTFEventFlags

			case "create-ctf-event-import-token":
				epf = adminCreateCTFEventImportTokenFlags

			case "list-courses":
				epf = adminListCoursesFlags

			case "create-course":
				epf = adminCreateCourseFlags

			case "update-course":
				epf = adminUpdateCourseFlags

			}

		case "user":
			switch epn {
			case "get-self":
				epf = userGetSelfFlags

			case "complete-onboarding":
				epf = userCompleteOnboardingFlags

			case "join-school":
				epf = userJoinSchoolFlags

			case "leave-school":
				epf = userLeaveSchoolFlags

			case "search-schools":
				epf = userSearchSchoolsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "generate-discord-auth-url":
				endpoint = c.GenerateDiscordAuthURL()
				data = nil
			case "exchange-discord":
				endpoint = c.ExchangeDiscord()
				data, err = authc.BuildExchangeDiscordPayload(*authExchangeDiscordBodyFlag)
			}
		case "challenge":
			c := challengec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-challenges":
				endpoint = c.ListChallenges()
				data, err = challengec.BuildListChallengesPayload(*challengeListChallengesSlugFlag, *challengeListChallengesIdsFlag, *challengeListChallengesTokenFlag)
			case "list-events":
				endpoint = c.ListEvents()
				data, err = challengec.BuildListEventsPayload(*challengeListEventsTokenFlag)
			case "get-current-monthly-challenge":
				endpoint = c.GetCurrentMonthlyChallenge()
				data, err = challengec.BuildGetCurrentMonthlyChallengePayload(*challengeGetCurrentMonthlyChallengeTokenFlag)
			case "list-monthly-challenges":
				endpoint = c.ListMonthlyChallenges()
				data, err = challengec.BuildListMonthlyChallengesPayload(*challengeListMonthlyChallengesTokenFlag)
			case "submit-flag":
				endpoint = c.SubmitFlag()
				data, err = challengec.BuildSubmitFlagPayload(*challengeSubmitFlagBodyFlag, *challengeSubmitFlagChallengeIDFlag, *challengeSubmitFlagTokenFlag)
			case "school-scoreboard":
				endpoint = c.SchoolScoreboard()
				data, err = challengec.BuildSchoolScoreboardPayload(*challengeSchoolScoreboardTokenFlag)
			case "user-scoreboard":
				endpoint = c.UserScoreboard()
				data, err = challengec.BuildUserScoreboardPayload(*challengeUserScoreboardTokenFlag)
			case "list-authors":
				endpoint = c.ListAuthors()
				data, err = challengec.BuildListAuthorsPayload(*challengeListAuthorsTokenFlag)
			case "list-courses":
				endpoint = c.ListCourses()
				data, err = challengec.BuildListCoursesPayload(*challengeListCoursesTokenFlag)
			case "enroll-course":
				endpoint = c.EnrollCourse()
				data, err = challengec.BuildEnrollCoursePayload(*challengeEnrollCourseIDFlag, *challengeEnrollCourseTokenFlag)
			case "complete-course":
				endpoint = c.CompleteCourse()
				data, err = challengec.BuildCompleteCoursePayload(*challengeCompleteCourseIDFlag, *challengeCompleteCourseTokenFlag)
			}
		case "admin":
			c := adminc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-challenges":
				endpoint = c.ListChallenges()
				data, err = adminc.BuildListChallengesPayload(*adminListChallengesTokenFlag)
			case "get-challenge-meta":
				endpoint = c.GetChallengeMeta()
				data, err = adminc.BuildGetChallengeMetaPayload(*adminGetChallengeMetaChallengeIDFlag, *adminGetChallengeMetaTokenFlag)
			case "create-challenge":
				endpoint = c.CreateChallenge()
				data, err = adminc.BuildCreateChallengePayload(*adminCreateChallengeBodyFlag, *adminCreateChallengeTokenFlag)
			case "update-challenge":
				endpoint = c.UpdateChallenge()
				data, err = adminc.BuildUpdateChallengePayload(*adminUpdateChallengeBodyFlag, *adminUpdateChallengeChallengeIDFlag, *adminUpdateChallengeTokenFlag)
			case "presign-chall-file-upload":
				endpoint = c.PresignChallFileUpload()
				data, err = adminc.BuildPresignChallFileUploadPayload(*adminPresignChallFileUploadBodyFlag, *adminPresignChallFileUploadChallengeIDFlag, *adminPresignChallFileUploadTokenFlag)
			case "list-monthly-challenges":
				endpoint = c.ListMonthlyChallenges()
				data, err = adminc.BuildListMonthlyChallengesPayload(*adminListMonthlyChallengesTokenFlag)
			case "delete-monthly-challenge":
				endpoint = c.DeleteMonthlyChallenge()
				data, err = adminc.BuildDeleteMonthlyChallengePayload(*adminDeleteMonthlyChallengeChallengeIDFlag, *adminDeleteMonthlyChallengeTokenFlag)
			case "delete-file":
				endpoint = c.DeleteFile()
				data, err = adminc.BuildDeleteFilePayload(*adminDeleteFileFileIDFlag, *adminDeleteFileTokenFlag)
			case "create-monthly-challenge":
				endpoint = c.CreateMonthlyChallenge()
				data, err = adminc.BuildCreateMonthlyChallengePayload(*adminCreateMonthlyChallengeBodyFlag, *adminCreateMonthlyChallengeTokenFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = adminc.BuildListUsersPayload(*adminListUsersTokenFlag)
			case "list-authors":
				endpoint = c.ListAuthors()
				data, err = adminc.BuildListAuthorsPayload(*adminListAuthorsTokenFlag)
			case "update-author":
				endpoint = c.UpdateAuthor()
				data, err = adminc.BuildUpdateAuthorPayload(*adminUpdateAuthorBodyFlag, *adminUpdateAuthorIDFlag, *adminUpdateAuthorTokenFlag)
			case "create-author":
				endpoint = c.CreateAuthor()
				data, err = adminc.BuildCreateAuthorPayload(*adminCreateAuthorBodyFlag, *adminCreateAuthorTokenFlag)
			case "delete-author":
				endpoint = c.DeleteAuthor()
				data, err = adminc.BuildDeleteAuthorPayload(*adminDeleteAuthorIDFlag, *adminDeleteAuthorTokenFlag)
			case "add-flag":
				endpoint = c.AddFlag()
				data, err = adminc.BuildAddFlagPayload(*adminAddFlagBodyFlag, *adminAddFlagChallengeIDFlag, *adminAddFlagTokenFlag)
			case "delete-flag":
				endpoint = c.DeleteFlag()
				data, err = adminc.BuildDeleteFlagPayload(*adminDeleteFlagChallengeIDFlag, *adminDeleteFlagFlagIDFlag, *adminDeleteFlagTokenFlag)
			case "list-categories":
				endpoint = c.ListCategories()
				data, err = adminc.BuildListCategoriesPayload(*adminListCategoriesTokenFlag)
			case "challtools-import":
				endpoint = c.ChalltoolsImport()
				data, err = adminc.BuildChalltoolsImportPayload(*adminChalltoolsImportBodyFlag, *adminChalltoolsImportImportTokenFlag)
			case "list-ctf-events":
				endpoint = c.ListCTFEvents()
				data, err = adminc.BuildListCTFEventsPayload(*adminListCTFEventsTokenFlag)
			case "create-ctf-event":
				endpoint = c.CreateCTFEvent()
				data, err = adminc.BuildCreateCTFEventPayload(*adminCreateCTFEventBodyFlag, *adminCreateCTFEventTokenFlag)
			case "delete-ctf-event":
				endpoint = c.DeleteCTFEvent()
				data, err = adminc.BuildDeleteCTFEventPayload(*adminDeleteCTFEventIDFlag, *adminDeleteCTFEventTokenFlag)
			case "create-ctf-event-import-token":
				endpoint = c.CreateCTFEventImportToken()
				data, err = adminc.BuildCreateCTFEventImportTokenPayload(*adminCreateCTFEventImportTokenBodyFlag, *adminCreateCTFEventImportTokenTokenFlag)
			case "list-courses":
				endpoint = c.ListCourses()
				data, err = adminc.BuildListCoursesPayload(*adminListCoursesTokenFlag)
			case "create-course":
				endpoint = c.CreateCourse()
				data, err = adminc.BuildCreateCoursePayload(*adminCreateCourseBodyFlag, *adminCreateCourseTokenFlag)
			case "update-course":
				endpoint = c.UpdateCourse()
				data, err = adminc.BuildUpdateCoursePayload(*adminUpdateCourseBodyFlag, *adminUpdateCourseIDFlag, *adminUpdateCourseTokenFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-self":
				endpoint = c.GetSelf()
				data, err = userc.BuildGetSelfPayload(*userGetSelfTokenFlag)
			case "complete-onboarding":
				endpoint = c.CompleteOnboarding()
				data, err = userc.BuildCompleteOnboardingPayload(*userCompleteOnboardingTokenFlag)
			case "join-school":
				endpoint = c.JoinSchool()
				data, err = userc.BuildJoinSchoolPayload(*userJoinSchoolBodyFlag, *userJoinSchoolTokenFlag)
			case "leave-school":
				endpoint = c.LeaveSchool()
				data, err = userc.BuildLeaveSchoolPayload(*userLeaveSchoolTokenFlag)
			case "search-schools":
				endpoint = c.SearchSchools()
				data, err = userc.BuildSearchSchoolsPayload(*userSearchSchoolsQFlag, *userSearchSchoolsUniversityFlag, *userSearchSchoolsTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Service is the auth service interface.
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    generate-discord-auth-url: GenerateDiscordAuthURL implements GenerateDiscordAuthURL.
    exchange-discord: ExchangeDiscord implements ExchangeDiscord.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authGenerateDiscordAuthURLUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth generate-discord-auth-url

GenerateDiscordAuthURL implements GenerateDiscordAuthURL.

Example:
    %[1]s auth generate-discord-auth-url
`, os.Args[0])
}

func authExchangeDiscordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth exchange-discord -body JSON

ExchangeDiscord implements ExchangeDiscord.
    -body JSON: 

Example:
    %[1]s auth exchange-discord --body '{
      "code": "123abc",
      "state": "15773059ghq9183habn"
   }'
`, os.Args[0])
}

// challengeUsage displays the usage of the challenge command and its
// subcommands.
func challengeUsage() {
	fmt.Fprintf(os.Stderr, `Service is the challenge service interface.
Usage:
    %[1]s [globalflags] challenge COMMAND [flags]

COMMAND:
    list-challenges: ListChallenges implements ListChallenges.
    list-events: ListEvents implements ListEvents.
    get-current-monthly-challenge: GetCurrentMonthlyChallenge implements GetCurrentMonthlyChallenge.
    list-monthly-challenges: ListMonthlyChallenges implements ListMonthlyChallenges.
    submit-flag: SubmitFlag implements SubmitFlag.
    school-scoreboard: SchoolScoreboard implements SchoolScoreboard.
    user-scoreboard: UserScoreboard implements UserScoreboard.
    list-authors: ListAuthors implements ListAuthors.
    list-courses: ListCourses implements ListCourses.
    enroll-course: EnrollCourse implements EnrollCourse.
    complete-course: CompleteCourse implements CompleteCourse.

Additional help:
    %[1]s challenge COMMAND --help
`, os.Args[0])
}
func challengeListChallengesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge list-challenges -slug STRING -ids JSON -token STRING

ListChallenges implements ListChallenges.
    -slug STRING: 
    -ids JSON: 
    -token STRING: 

Example:
    %[1]s challenge list-challenges --slug "brumm" --ids [] --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeListEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge list-events -token STRING

ListEvents implements ListEvents.
    -token STRING: 

Example:
    %[1]s challenge list-events --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeGetCurrentMonthlyChallengeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge get-current-monthly-challenge -token STRING

GetCurrentMonthlyChallenge implements GetCurrentMonthlyChallenge.
    -token STRING: 

Example:
    %[1]s challenge get-current-monthly-challenge --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeListMonthlyChallengesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge list-monthly-challenges -token STRING

ListMonthlyChallenges implements ListMonthlyChallenges.
    -token STRING: 

Example:
    %[1]s challenge list-monthly-challenges --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeSubmitFlagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge submit-flag -body JSON -challenge-id STRING -token STRING

SubmitFlag implements SubmitFlag.
    -body JSON: 
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s challenge submit-flag --body '{
      "flag": "SSM{flag}"
   }' --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeSchoolScoreboardUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge school-scoreboard -token STRING

SchoolScoreboard implements SchoolScoreboard.
    -token STRING: 

Example:
    %[1]s challenge school-scoreboard --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeUserScoreboardUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge user-scoreboard -token STRING

UserScoreboard implements UserScoreboard.
    -token STRING: 

Example:
    %[1]s challenge user-scoreboard --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeListAuthorsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge list-authors -token STRING

ListAuthors implements ListAuthors.
    -token STRING: 

Example:
    %[1]s challenge list-authors --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeListCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge list-courses -token STRING

ListCourses implements ListCourses.
    -token STRING: 

Example:
    %[1]s challenge list-courses --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeEnrollCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge enroll-course -id STRING -token STRING

EnrollCourse implements EnrollCourse.
    -id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s challenge enroll-course --id "020817da-8b5c-42c4-9e52-0f3a6628c1f8" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func challengeCompleteCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] challenge complete-course -id STRING -token STRING

CompleteCourse implements CompleteCourse.
    -id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s challenge complete-course --id "020817da-8b5c-42c4-9e52-0f3a6628c1f8" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

// adminUsage displays the usage of the admin command and its subcommands.
func adminUsage() {
	fmt.Fprintf(os.Stderr, `Service is the admin service interface.
Usage:
    %[1]s [globalflags] admin COMMAND [flags]

COMMAND:
    list-challenges: ListChallenges implements ListChallenges.
    get-challenge-meta: GetChallengeMeta implements GetChallengeMeta.
    create-challenge: CreateChallenge implements CreateChallenge.
    update-challenge: UpdateChallenge implements UpdateChallenge.
    presign-chall-file-upload: PresignChallFileUpload implements PresignChallFileUpload.
    list-monthly-challenges: ListMonthlyChallenges implements ListMonthlyChallenges.
    delete-monthly-challenge: DeleteMonthlyChallenge implements DeleteMonthlyChallenge.
    delete-file: DeleteFile implements DeleteFile.
    create-monthly-challenge: CreateMonthlyChallenge implements CreateMonthlyChallenge.
    list-users: ListUsers implements ListUsers.
    list-authors: ListAuthors implements ListAuthors.
    update-author: UpdateAuthor implements UpdateAuthor.
    create-author: CreateAuthor implements CreateAuthor.
    delete-author: DeleteAuthor implements DeleteAuthor.
    add-flag: AddFlag implements AddFlag.
    delete-flag: DeleteFlag implements DeleteFlag.
    list-categories: ListCategories implements ListCategories.
    challtools-import: ChalltoolsImport implements ChalltoolsImport.
    list-ctf-events: ListCTFEvents implements ListCTFEvents.
    create-ctf-event: CreateCTFEvent implements CreateCTFEvent.
    delete-ctf-event: DeleteCTFEvent implements DeleteCTFEvent.
    create-ctf-event-import-token: CreateCTFEventImportToken implements CreateCTFEventImportToken.
    list-courses: ListCourses implements ListCourses.
    create-course: CreateCourse implements CreateCourse.
    update-course: UpdateCourse implements UpdateCourse.

Additional help:
    %[1]s admin COMMAND --help
`, os.Args[0])
}
func adminListChallengesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-challenges -token STRING

ListChallenges implements ListChallenges.
    -token STRING: 

Example:
    %[1]s admin list-challenges --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminGetChallengeMetaUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin get-challenge-meta -challenge-id STRING -token STRING

GetChallengeMeta implements GetChallengeMeta.
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s admin get-challenge-meta --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateChallengeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-challenge -body JSON -token STRING

CreateChallenge implements CreateChallenge.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-challenge --body '{
      "authors": [
         "1b678293-6737-4cc7-8eae-aa821100293f"
      ],
      "category_id": "1b678292-6737-4cc7-8eae-aa821100293f",
      "ctf_event_id": "c397efb2-b171-4d77-9166-d105cf4f521a",
      "description": "A heap overflow challenge",
      "hide": false,
      "publish_at": 1638384718,
      "slug": "pwnme",
      "static_score": 50,
      "title": "pwnme"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminUpdateChallengeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin update-challenge -body JSON -challenge-id STRING -token STRING

UpdateChallenge implements UpdateChallenge.
    -body JSON: 
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s admin update-challenge --body '{
      "authors": [
         "1b678293-6737-4cc7-8eae-aa821100293f"
      ],
      "category_id": "1b678292-6737-4cc7-8eae-aa821100293f",
      "ctf_event_id": "c397efb2-b171-4d77-9166-d105cf4f521a",
      "description": "A heap overflow challenge",
      "hide": false,
      "publish_at": 1638384718,
      "slug": "pwnme",
      "static_score": 50,
      "title": "pwnme"
   }' --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminPresignChallFileUploadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin presign-chall-file-upload -body JSON -challenge-id STRING -token STRING

PresignChallFileUpload implements PresignChallFileUpload.
    -body JSON: 
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s admin presign-chall-file-upload --body '{
      "filename": "decryptor.exe",
      "md5": "cq02dBbcuugBHM1oKyvMlQ==",
      "size": 41239
   }' --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminListMonthlyChallengesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-monthly-challenges -token STRING

ListMonthlyChallenges implements ListMonthlyChallenges.
    -token STRING: 

Example:
    %[1]s admin list-monthly-challenges --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminDeleteMonthlyChallengeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin delete-monthly-challenge -challenge-id STRING -token STRING

DeleteMonthlyChallenge implements DeleteMonthlyChallenge.
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s admin delete-monthly-challenge --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminDeleteFileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin delete-file -file-id STRING -token STRING

DeleteFile implements DeleteFile.
    -file-id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s admin delete-file --file-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateMonthlyChallengeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-monthly-challenge -body JSON -token STRING

CreateMonthlyChallenge implements CreateMonthlyChallenge.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-monthly-challenge --body '{
      "challenge_id": "85163218-8735-42ed-a7a6-42a9de2294df",
      "display_month": "Januari/Februari",
      "end_date": 1690884841,
      "start_date": 1690874841
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-users -token STRING

ListUsers implements ListUsers.
    -token STRING: 

Example:
    %[1]s admin list-users --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminListAuthorsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-authors -token STRING

ListAuthors implements ListAuthors.
    -token STRING: 

Example:
    %[1]s admin list-authors --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminUpdateAuthorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin update-author -body JSON -id STRING -token STRING

UpdateAuthor implements UpdateAuthor.
    -body JSON: 
    -id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s admin update-author --body '{
      "description": "Movitz gör saker",
      "full_name": "Movitz Sunar",
      "image_url": "movitz",
      "publish": true,
      "slug": "movitz",
      "sponsor": true
   }' --id "020817da-8b5c-42c4-9e52-0f3a6628c1f8" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateAuthorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-author -body JSON -token STRING

CreateAuthor implements CreateAuthor.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-author --body '{
      "description": "Movitz gör saker",
      "full_name": "Movitz Sunar",
      "image_url": "movitz",
      "publish": true,
      "slug": "movitz",
      "sponsor": true
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminDeleteAuthorUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin delete-author -id STRING -token STRING

DeleteAuthor implements DeleteAuthor.
    -id STRING: 
    -token STRING: 

Example:
    %[1]s admin delete-author --id "8b141111-84d6-4c82-936e-86b45e52d456" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminAddFlagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin add-flag -body JSON -challenge-id STRING -token STRING

AddFlag implements AddFlag.
    -body JSON: 
    -challenge-id STRING: ID of a challenge
    -token STRING: 

Example:
    %[1]s admin add-flag --body '{
      "flag": "SSM{...}"
   }' --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminDeleteFlagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin delete-flag -challenge-id STRING -flag-id STRING -token STRING

DeleteFlag implements DeleteFlag.
    -challenge-id STRING: ID of a challenge
    -flag-id STRING: 
    -token STRING: 

Example:
    %[1]s admin delete-flag --challenge-id "195229b0-b15f-4ee5-9a99-94bfff492967" --flag-id "ac1c4362-c121-45a3-9745-8f8160a55f96" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminListCategoriesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-categories -token STRING

ListCategories implements ListCategories.
    -token STRING: 

Example:
    %[1]s admin list-categories --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminChalltoolsImportUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin challtools-import -body JSON -import-token STRING

ChalltoolsImport implements ChalltoolsImport.
    -body JSON: 
    -import-token STRING: 

Example:
    %[1]s admin challtools-import --body '{
      "authors": [
         "Movitz Sunar"
      ],
      "categories": [
         "web"
      ],
      "challenge_id": "225ada44-3fde-460d-84a4-2f16ff579618",
      "description": "how to dns",
      "file_urls": [
         "https://bucket/key"
      ],
      "flag_format_prefix": "SSM{",
      "flag_format_suffix": "}",
      "flags": [
         {
            "flag": "fl4g_l0l",
            "type": "regex"
         },
         {
            "flag": "fl4g_l0l",
            "type": "regex"
         },
         {
            "flag": "fl4g_l0l",
            "type": "regex"
         }
      ],
      "order": 5,
      "score": 100,
      "services": [
         {
            "hyperlink": true,
            "user_display": "nc 0.0.0.0 1234"
         },
         {
            "hyperlink": true,
            "user_display": "nc 0.0.0.0 1234"
         },
         {
            "hyperlink": true,
            "user_display": "nc 0.0.0.0 1234"
         }
      ],
      "title": "DNS 101"
   }' --import-token "ctfimp_7ad44accdcca4c5ea10ea7ea61bec01b_efc6066f6ca0c6cd"
`, os.Args[0])
}

func adminListCTFEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-ctf-events -token STRING

ListCTFEvents implements ListCTFEvents.
    -token STRING: 

Example:
    %[1]s admin list-ctf-events --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateCTFEventUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-ctf-event -body JSON -token STRING

CreateCTFEvent implements CreateCTFEvent.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-ctf-event --body '{
      "name": "Säkerhet-SM 2023"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminDeleteCTFEventUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin delete-ctf-event -id STRING -token STRING

DeleteCTFEvent implements DeleteCTFEvent.
    -id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s admin delete-ctf-event --id "020817da-8b5c-42c4-9e52-0f3a6628c1f8" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateCTFEventImportTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-ctf-event-import-token -body JSON -token STRING

CreateCTFEventImportToken implements CreateCTFEventImportToken.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-ctf-event-import-token --body '{
      "event_id": "e3bb4dc5-9479-42ce-aed3-b41e8139fccb"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminListCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin list-courses -token STRING

ListCourses implements ListCourses.
    -token STRING: 

Example:
    %[1]s admin list-courses --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminCreateCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin create-course -body JSON -token STRING

CreateCourse implements CreateCourse.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s admin create-course --body '{
      "author_ids": [
         "b29869ec-6eef-451c-a389-249a6d6ac47b"
      ],
      "category": "web",
      "description": "markdown text",
      "difficulty": "advanced",
      "publish": true,
      "slug": "sqli",
      "title": "SQL-Injektioner"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func adminUpdateCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] admin update-course -body JSON -id STRING -token STRING

UpdateCourse implements UpdateCourse.
    -body JSON: 
    -id STRING: ID of a file
    -token STRING: 

Example:
    %[1]s admin update-course --body '{
      "author_ids": [
         "b29869ec-6eef-451c-a389-249a6d6ac47b"
      ],
      "category": "web",
      "description": "markdown text",
      "difficulty": "advanced",
      "publish": true,
      "slug": "sqli",
      "title": "SQL-Injektioner"
   }' --id "020817da-8b5c-42c4-9e52-0f3a6628c1f8" --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %[1]s [globalflags] user COMMAND [flags]

COMMAND:
    get-self: GetSelf implements GetSelf.
    complete-onboarding: CompleteOnboarding implements CompleteOnboarding.
    join-school: JoinSchool implements JoinSchool.
    leave-school: LeaveSchool implements LeaveSchool.
    search-schools: SearchSchools implements SearchSchools.

Additional help:
    %[1]s user COMMAND --help
`, os.Args[0])
}
func userGetSelfUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user get-self -token STRING

GetSelf implements GetSelf.
    -token STRING: 

Example:
    %[1]s user get-self --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func userCompleteOnboardingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user complete-onboarding -token STRING

CompleteOnboarding implements CompleteOnboarding.
    -token STRING: 

Example:
    %[1]s user complete-onboarding --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func userJoinSchoolUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user join-school -body JSON -token STRING

JoinSchool implements JoinSchool.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s user join-school --body '{
      "school_id": "b6d5e5eb-3272-4795-ba1c-73a8efc1cf19"
   }' --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func userLeaveSchoolUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user leave-school -token STRING

LeaveSchool implements LeaveSchool.
    -token STRING: 

Example:
    %[1]s user leave-school --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}

func userSearchSchoolsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user search-schools -q STRING -university BOOL -token STRING

SearchSchools implements SearchSchools.
    -q STRING: 
    -university BOOL: 
    -token STRING: 

Example:
    %[1]s user search-schools --q "engelbrektssko" --university true --token "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6InN1cCAoIDoiLCJpYXQiOjE1MTYyMzkwMjJ9.niAX9xS6jNYQSX6hleuwGmzkUCuR9OXPRb5BksyMlkg"
`, os.Args[0])
}
