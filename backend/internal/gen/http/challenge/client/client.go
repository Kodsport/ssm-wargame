// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge client HTTP transport
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the challenge service endpoint HTTP clients.
type Client struct {
	// ListChallenges Doer is the HTTP client used to make requests to the
	// ListChallenges endpoint.
	ListChallengesDoer goahttp.Doer

	// ListEvents Doer is the HTTP client used to make requests to the ListEvents
	// endpoint.
	ListEventsDoer goahttp.Doer

	// GetCurrentMonthlyChallenge Doer is the HTTP client used to make requests to
	// the GetCurrentMonthlyChallenge endpoint.
	GetCurrentMonthlyChallengeDoer goahttp.Doer

	// ListMonthlyChallenges Doer is the HTTP client used to make requests to the
	// ListMonthlyChallenges endpoint.
	ListMonthlyChallengesDoer goahttp.Doer

	// SubmitFlag Doer is the HTTP client used to make requests to the SubmitFlag
	// endpoint.
	SubmitFlagDoer goahttp.Doer

	// SchoolScoreboard Doer is the HTTP client used to make requests to the
	// SchoolScoreboard endpoint.
	SchoolScoreboardDoer goahttp.Doer

	// UserScoreboard Doer is the HTTP client used to make requests to the
	// UserScoreboard endpoint.
	UserScoreboardDoer goahttp.Doer

	// ListAuthors Doer is the HTTP client used to make requests to the ListAuthors
	// endpoint.
	ListAuthorsDoer goahttp.Doer

	// ListCourses Doer is the HTTP client used to make requests to the ListCourses
	// endpoint.
	ListCoursesDoer goahttp.Doer

	// EnrollCourse Doer is the HTTP client used to make requests to the
	// EnrollCourse endpoint.
	EnrollCourseDoer goahttp.Doer

	// CompleteCourse Doer is the HTTP client used to make requests to the
	// CompleteCourse endpoint.
	CompleteCourseDoer goahttp.Doer

	// KnackKodenSubmitFlag Doer is the HTTP client used to make requests to the
	// KnackKodenSubmitFlag endpoint.
	KnackKodenSubmitFlagDoer goahttp.Doer

	// KnackKodenScoreboard Doer is the HTTP client used to make requests to the
	// KnackKodenScoreboard endpoint.
	KnackKodenScoreboardDoer goahttp.Doer

	// KnackKodenRegisterClass Doer is the HTTP client used to make requests to the
	// KnackKodenRegisterClass endpoint.
	KnackKodenRegisterClassDoer goahttp.Doer

	// KnackKodenGetClass Doer is the HTTP client used to make requests to the
	// KnackKodenGetClass endpoint.
	KnackKodenGetClassDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the challenge service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListChallengesDoer:             doer,
		ListEventsDoer:                 doer,
		GetCurrentMonthlyChallengeDoer: doer,
		ListMonthlyChallengesDoer:      doer,
		SubmitFlagDoer:                 doer,
		SchoolScoreboardDoer:           doer,
		UserScoreboardDoer:             doer,
		ListAuthorsDoer:                doer,
		ListCoursesDoer:                doer,
		EnrollCourseDoer:               doer,
		CompleteCourseDoer:             doer,
		KnackKodenSubmitFlagDoer:       doer,
		KnackKodenScoreboardDoer:       doer,
		KnackKodenRegisterClassDoer:    doer,
		KnackKodenGetClassDoer:         doer,
		RestoreResponseBody:            restoreBody,
		scheme:                         scheme,
		host:                           host,
		decoder:                        dec,
		encoder:                        enc,
	}
}

// ListChallenges returns an endpoint that makes HTTP requests to the challenge
// service ListChallenges server.
func (c *Client) ListChallenges() goa.Endpoint {
	var (
		encodeRequest  = EncodeListChallengesRequest(c.encoder)
		decodeResponse = DecodeListChallengesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListChallengesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListChallengesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "ListChallenges", err)
		}
		return decodeResponse(resp)
	}
}

// ListEvents returns an endpoint that makes HTTP requests to the challenge
// service ListEvents server.
func (c *Client) ListEvents() goa.Endpoint {
	var (
		encodeRequest  = EncodeListEventsRequest(c.encoder)
		decodeResponse = DecodeListEventsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListEventsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListEventsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "ListEvents", err)
		}
		return decodeResponse(resp)
	}
}

// GetCurrentMonthlyChallenge returns an endpoint that makes HTTP requests to
// the challenge service GetCurrentMonthlyChallenge server.
func (c *Client) GetCurrentMonthlyChallenge() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCurrentMonthlyChallengeRequest(c.encoder)
		decodeResponse = DecodeGetCurrentMonthlyChallengeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetCurrentMonthlyChallengeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCurrentMonthlyChallengeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "GetCurrentMonthlyChallenge", err)
		}
		return decodeResponse(resp)
	}
}

// ListMonthlyChallenges returns an endpoint that makes HTTP requests to the
// challenge service ListMonthlyChallenges server.
func (c *Client) ListMonthlyChallenges() goa.Endpoint {
	var (
		encodeRequest  = EncodeListMonthlyChallengesRequest(c.encoder)
		decodeResponse = DecodeListMonthlyChallengesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListMonthlyChallengesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListMonthlyChallengesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "ListMonthlyChallenges", err)
		}
		return decodeResponse(resp)
	}
}

// SubmitFlag returns an endpoint that makes HTTP requests to the challenge
// service SubmitFlag server.
func (c *Client) SubmitFlag() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubmitFlagRequest(c.encoder)
		decodeResponse = DecodeSubmitFlagResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSubmitFlagRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubmitFlagDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "SubmitFlag", err)
		}
		return decodeResponse(resp)
	}
}

// SchoolScoreboard returns an endpoint that makes HTTP requests to the
// challenge service SchoolScoreboard server.
func (c *Client) SchoolScoreboard() goa.Endpoint {
	var (
		encodeRequest  = EncodeSchoolScoreboardRequest(c.encoder)
		decodeResponse = DecodeSchoolScoreboardResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSchoolScoreboardRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SchoolScoreboardDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "SchoolScoreboard", err)
		}
		return decodeResponse(resp)
	}
}

// UserScoreboard returns an endpoint that makes HTTP requests to the challenge
// service UserScoreboard server.
func (c *Client) UserScoreboard() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserScoreboardRequest(c.encoder)
		decodeResponse = DecodeUserScoreboardResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUserScoreboardRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserScoreboardDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "UserScoreboard", err)
		}
		return decodeResponse(resp)
	}
}

// ListAuthors returns an endpoint that makes HTTP requests to the challenge
// service ListAuthors server.
func (c *Client) ListAuthors() goa.Endpoint {
	var (
		encodeRequest  = EncodeListAuthorsRequest(c.encoder)
		decodeResponse = DecodeListAuthorsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListAuthorsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListAuthorsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "ListAuthors", err)
		}
		return decodeResponse(resp)
	}
}

// ListCourses returns an endpoint that makes HTTP requests to the challenge
// service ListCourses server.
func (c *Client) ListCourses() goa.Endpoint {
	var (
		encodeRequest  = EncodeListCoursesRequest(c.encoder)
		decodeResponse = DecodeListCoursesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListCoursesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListCoursesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "ListCourses", err)
		}
		return decodeResponse(resp)
	}
}

// EnrollCourse returns an endpoint that makes HTTP requests to the challenge
// service EnrollCourse server.
func (c *Client) EnrollCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeEnrollCourseRequest(c.encoder)
		decodeResponse = DecodeEnrollCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEnrollCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EnrollCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "EnrollCourse", err)
		}
		return decodeResponse(resp)
	}
}

// CompleteCourse returns an endpoint that makes HTTP requests to the challenge
// service CompleteCourse server.
func (c *Client) CompleteCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeCompleteCourseRequest(c.encoder)
		decodeResponse = DecodeCompleteCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCompleteCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CompleteCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "CompleteCourse", err)
		}
		return decodeResponse(resp)
	}
}

// KnackKodenSubmitFlag returns an endpoint that makes HTTP requests to the
// challenge service KnackKodenSubmitFlag server.
func (c *Client) KnackKodenSubmitFlag() goa.Endpoint {
	var (
		encodeRequest  = EncodeKnackKodenSubmitFlagRequest(c.encoder)
		decodeResponse = DecodeKnackKodenSubmitFlagResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildKnackKodenSubmitFlagRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.KnackKodenSubmitFlagDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "KnackKodenSubmitFlag", err)
		}
		return decodeResponse(resp)
	}
}

// KnackKodenScoreboard returns an endpoint that makes HTTP requests to the
// challenge service KnackKodenScoreboard server.
func (c *Client) KnackKodenScoreboard() goa.Endpoint {
	var (
		encodeRequest  = EncodeKnackKodenScoreboardRequest(c.encoder)
		decodeResponse = DecodeKnackKodenScoreboardResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildKnackKodenScoreboardRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.KnackKodenScoreboardDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "KnackKodenScoreboard", err)
		}
		return decodeResponse(resp)
	}
}

// KnackKodenRegisterClass returns an endpoint that makes HTTP requests to the
// challenge service KnackKodenRegisterClass server.
func (c *Client) KnackKodenRegisterClass() goa.Endpoint {
	var (
		encodeRequest  = EncodeKnackKodenRegisterClassRequest(c.encoder)
		decodeResponse = DecodeKnackKodenRegisterClassResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildKnackKodenRegisterClassRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.KnackKodenRegisterClassDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "KnackKodenRegisterClass", err)
		}
		return decodeResponse(resp)
	}
}

// KnackKodenGetClass returns an endpoint that makes HTTP requests to the
// challenge service KnackKodenGetClass server.
func (c *Client) KnackKodenGetClass() goa.Endpoint {
	var (
		encodeRequest  = EncodeKnackKodenGetClassRequest(c.encoder)
		decodeResponse = DecodeKnackKodenGetClassResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildKnackKodenGetClassRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.KnackKodenGetClassDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("challenge", "KnackKodenGetClass", err)
		}
		return decodeResponse(resp)
	}
}
