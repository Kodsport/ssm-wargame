// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP client types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	challenge "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge"
	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// SubmitFlagRequestBody is the type of the "challenge" service "SubmitFlag"
// endpoint HTTP request body.
type SubmitFlagRequestBody struct {
	Flag string `form:"flag" json:"flag" xml:"flag"`
}

// ListChallengesResponseBody is the type of the "challenge" service
// "ListChallenges" endpoint HTTP response body.
type ListChallengesResponseBody []*SsmChallengeResponse

// ListEventsResponseBody is the type of the "challenge" service "ListEvents"
// endpoint HTTP response body.
type ListEventsResponseBody []*CTFEventResponse

// ListMonthlyChallengesResponseBody is the type of the "challenge" service
// "ListMonthlyChallenges" endpoint HTTP response body.
type ListMonthlyChallengesResponseBody []*SsmUsermonthlychallengesResponse

// SchoolScoreboardResponseBody is the type of the "challenge" service
// "SchoolScoreboard" endpoint HTTP response body.
type SchoolScoreboardResponseBody struct {
	Scores []*SchoolScoreboardScoreResponseBody `form:"scores,omitempty" json:"scores,omitempty" xml:"scores,omitempty"`
}

// SubmitFlagAlreadySolvedResponseBody is the type of the "challenge" service
// "SubmitFlag" endpoint HTTP response body for the "already_solved" error.
type SubmitFlagAlreadySolvedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SubmitFlagIncorrectFlagResponseBody is the type of the "challenge" service
// "SubmitFlag" endpoint HTTP response body for the "incorrect_flag" error.
type SubmitFlagIncorrectFlagResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SsmChallengeResponse is used to define fields on response body types.
type SsmChallengeResponse struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The number of points given to the solver
	Score    *int                        `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	Services []*ChallengeServiceResponse `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files    []*ChallengeFilesResponse   `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	// The numer of people who solved the challenge
	Solves *int `form:"solves,omitempty" json:"solves,omitempty" xml:"solves,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID *string `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	// whether the user has solved the challenge or not
	Solved   *bool                `form:"solved,omitempty" json:"solved,omitempty" xml:"solved,omitempty"`
	Category *string              `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	Authors  []*SsmUserResponse   `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
	Solvers  []*SsmSolverResponse `form:"solvers,omitempty" json:"solvers,omitempty" xml:"solvers,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
}

// ChallengeFilesResponse is used to define fields on response body types.
type ChallengeFilesResponse struct {
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// SsmUserResponse is used to define fields on response body types.
type SsmUserResponse struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FullName *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	Role     *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	SchoolID *int    `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// SsmSolverResponse is used to define fields on response body types.
type SsmSolverResponse struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	FullName *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	SolvedAt *int64  `form:"solved_at,omitempty" json:"solved_at,omitempty" xml:"solved_at,omitempty"`
}

// CTFEventResponse is used to define fields on response body types.
type CTFEventResponse struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// SsmUsermonthlychallengesResponse is used to define fields on response body
// types.
type SsmUsermonthlychallengesResponse struct {
	ChallengeID *string `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	// The month(s) that the challenge is assigned for
	DisplayMonth *string `form:"display_month,omitempty" json:"display_month,omitempty" xml:"display_month,omitempty"`
	// Starting date of the monthly challenge
	StartDate *int64 `form:"start_date,omitempty" json:"start_date,omitempty" xml:"start_date,omitempty"`
	// Ending date of the monthly challenge
	EndDate   *int64                `form:"end_date,omitempty" json:"end_date,omitempty" xml:"end_date,omitempty"`
	Challenge *SsmChallengeResponse `form:"challenge,omitempty" json:"challenge,omitempty" xml:"challenge,omitempty"`
}

// SchoolScoreboardScoreResponseBody is used to define fields on response body
// types.
type SchoolScoreboardScoreResponseBody struct {
	Score      *int    `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	SchoolName *string `form:"school_name,omitempty" json:"school_name,omitempty" xml:"school_name,omitempty"`
}

// NewSubmitFlagRequestBody builds the HTTP request body from the payload of
// the "SubmitFlag" endpoint of the "challenge" service.
func NewSubmitFlagRequestBody(p *challenge.SubmitFlagPayload) *SubmitFlagRequestBody {
	body := &SubmitFlagRequestBody{
		Flag: p.Flag,
	}
	return body
}

// NewListChallengesSsmChallengeCollectionOK builds a "challenge" service
// "ListChallenges" endpoint result from a HTTP "OK" response.
func NewListChallengesSsmChallengeCollectionOK(body ListChallengesResponseBody) challengeviews.SsmChallengeCollectionView {
	v := make([]*challengeviews.SsmChallengeView, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmChallengeResponseToChallengeviewsSsmChallengeView(val)
	}

	return v
}

// NewListEventsCTFEventOK builds a "challenge" service "ListEvents" endpoint
// result from a HTTP "OK" response.
func NewListEventsCTFEventOK(body []*CTFEventResponse) []*challenge.CTFEvent {
	v := make([]*challenge.CTFEvent, len(body))
	for i, val := range body {
		v[i] = unmarshalCTFEventResponseToChallengeCTFEvent(val)
	}

	return v
}

// NewListMonthlyChallengesSsmUsermonthlychallengesCollectionOK builds a
// "challenge" service "ListMonthlyChallenges" endpoint result from a HTTP "OK"
// response.
func NewListMonthlyChallengesSsmUsermonthlychallengesCollectionOK(body ListMonthlyChallengesResponseBody) challengeviews.SsmUsermonthlychallengesCollectionView {
	v := make([]*challengeviews.SsmUsermonthlychallengesView, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmUsermonthlychallengesResponseToChallengeviewsSsmUsermonthlychallengesView(val)
	}

	return v
}

// NewSubmitFlagAlreadySolved builds a challenge service SubmitFlag endpoint
// already_solved error.
func NewSubmitFlagAlreadySolved(body *SubmitFlagAlreadySolvedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubmitFlagIncorrectFlag builds a challenge service SubmitFlag endpoint
// incorrect_flag error.
func NewSubmitFlagIncorrectFlag(body *SubmitFlagIncorrectFlagResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSchoolScoreboardSsmShoolscoreboardOK builds a "challenge" service
// "SchoolScoreboard" endpoint result from a HTTP "OK" response.
func NewSchoolScoreboardSsmShoolscoreboardOK(body *SchoolScoreboardResponseBody) *challengeviews.SsmShoolscoreboardView {
	v := &challengeviews.SsmShoolscoreboardView{}
	v.Scores = make([]*challengeviews.SchoolScoreboardScoreView, len(body.Scores))
	for i, val := range body.Scores {
		v.Scores[i] = unmarshalSchoolScoreboardScoreResponseBodyToChallengeviewsSchoolScoreboardScoreView(val)
	}

	return v
}

// ValidateSubmitFlagAlreadySolvedResponseBody runs the validations defined on
// SubmitFlag_already_solved_Response_Body
func ValidateSubmitFlagAlreadySolvedResponseBody(body *SubmitFlagAlreadySolvedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSubmitFlagIncorrectFlagResponseBody runs the validations defined on
// SubmitFlag_incorrect_flag_Response_Body
func ValidateSubmitFlagIncorrectFlagResponseBody(body *SubmitFlagIncorrectFlagResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSsmChallengeResponse runs the validations defined on
// SsmChallengeResponse
func ValidateSsmChallengeResponse(body *SsmChallengeResponse) (err error) {
	if body.Solved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solved", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	for _, e := range body.Files {
		if e != nil {
			if err2 := ValidateChallengeFilesResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	for _, e := range body.Authors {
		if e != nil {
			if err2 := ValidateSsmUserResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Solvers {
		if e != nil {
			if err2 := ValidateSsmSolverResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChallengeFilesResponse runs the validations defined on
// ChallengeFilesResponse
func ValidateChallengeFilesResponse(body *ChallengeFilesResponse) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateSsmUserResponse runs the validations defined on SsmUserResponse
func ValidateSsmUserResponse(body *SsmUserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateSsmSolverResponse runs the validations defined on SsmSolverResponse
func ValidateSsmSolverResponse(body *SsmSolverResponse) (err error) {
	if body.SolvedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solved_at", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	return
}

// ValidateCTFEventResponse runs the validations defined on CTFEventResponse
func ValidateCTFEventResponse(body *CTFEventResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateSsmUsermonthlychallengesResponse runs the validations defined on
// SsmUsermonthlychallengesResponse
func ValidateSsmUsermonthlychallengesResponse(body *SsmUsermonthlychallengesResponse) (err error) {
	if body.Challenge == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_date", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_date", "body"))
	}
	if body.DisplayMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("display_month", "body"))
	}
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.ChallengeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.challenge_id", *body.ChallengeID, goa.FormatUUID))
	}
	if body.Challenge != nil {
		if err2 := ValidateSsmChallengeResponse(body.Challenge); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSchoolScoreboardScoreResponseBody runs the validations defined on
// SchoolScoreboardScoreResponseBody
func ValidateSchoolScoreboardScoreResponseBody(body *SchoolScoreboardScoreResponseBody) (err error) {
	if body.SchoolName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("school_name", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	return
}
