// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	challenge "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge"
	goa "goa.design/goa/v3/pkg"
)

// BuildListChallengesPayload builds the payload for the challenge
// ListChallenges endpoint from CLI flags.
func BuildListChallengesPayload(challengeListChallengesSlug string, challengeListChallengesIds string, challengeListChallengesToken string) (*challenge.ListChallengesPayload, error) {
	var err error
	var slug *string
	{
		if challengeListChallengesSlug != "" {
			slug = &challengeListChallengesSlug
		}
	}
	var ids []string
	{
		if challengeListChallengesIds != "" {
			err = json.Unmarshal([]byte(challengeListChallengesIds), &ids)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for ids, \nerror: %s, \nexample of valid JSON:\n%s", err, "[]")
			}
		}
	}
	var token *string
	{
		if challengeListChallengesToken != "" {
			token = &challengeListChallengesToken
		}
	}
	v := &challenge.ListChallengesPayload{}
	v.Slug = slug
	v.Ids = ids
	v.Token = token

	return v, nil
}

// BuildListEventsPayload builds the payload for the challenge ListEvents
// endpoint from CLI flags.
func BuildListEventsPayload(challengeListEventsToken string) (*challenge.ListEventsPayload, error) {
	var token *string
	{
		if challengeListEventsToken != "" {
			token = &challengeListEventsToken
		}
	}
	v := &challenge.ListEventsPayload{}
	v.Token = token

	return v, nil
}

// BuildGetCurrentMonthlyChallengePayload builds the payload for the challenge
// GetCurrentMonthlyChallenge endpoint from CLI flags.
func BuildGetCurrentMonthlyChallengePayload(challengeGetCurrentMonthlyChallengeToken string) (*challenge.GetCurrentMonthlyChallengePayload, error) {
	var token *string
	{
		if challengeGetCurrentMonthlyChallengeToken != "" {
			token = &challengeGetCurrentMonthlyChallengeToken
		}
	}
	v := &challenge.GetCurrentMonthlyChallengePayload{}
	v.Token = token

	return v, nil
}

// BuildListMonthlyChallengesPayload builds the payload for the challenge
// ListMonthlyChallenges endpoint from CLI flags.
func BuildListMonthlyChallengesPayload(challengeListMonthlyChallengesToken string) (*challenge.ListMonthlyChallengesPayload, error) {
	var token *string
	{
		if challengeListMonthlyChallengesToken != "" {
			token = &challengeListMonthlyChallengesToken
		}
	}
	v := &challenge.ListMonthlyChallengesPayload{}
	v.Token = token

	return v, nil
}

// BuildSubmitFlagPayload builds the payload for the challenge SubmitFlag
// endpoint from CLI flags.
func BuildSubmitFlagPayload(challengeSubmitFlagBody string, challengeSubmitFlagChallengeID string, challengeSubmitFlagToken string) (*challenge.SubmitFlagPayload, error) {
	var err error
	var body SubmitFlagRequestBody
	{
		err = json.Unmarshal([]byte(challengeSubmitFlagBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"flag\": \"SSM{flag}\"\n   }'")
		}
		if utf8.RuneCountInString(body.Flag) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.flag", body.Flag, utf8.RuneCountInString(body.Flag), 200, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var challengeID string
	{
		challengeID = challengeSubmitFlagChallengeID
		err = goa.MergeErrors(err, goa.ValidateFormat("challengeID", challengeID, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = challengeSubmitFlagToken
	}
	v := &challenge.SubmitFlagPayload{
		Flag: body.Flag,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v, nil
}

// BuildSchoolScoreboardPayload builds the payload for the challenge
// SchoolScoreboard endpoint from CLI flags.
func BuildSchoolScoreboardPayload(challengeSchoolScoreboardToken string) (*challenge.SchoolScoreboardPayload, error) {
	var token *string
	{
		if challengeSchoolScoreboardToken != "" {
			token = &challengeSchoolScoreboardToken
		}
	}
	v := &challenge.SchoolScoreboardPayload{}
	v.Token = token

	return v, nil
}

// BuildUserScoreboardPayload builds the payload for the challenge
// UserScoreboard endpoint from CLI flags.
func BuildUserScoreboardPayload(challengeUserScoreboardToken string) (*challenge.UserScoreboardPayload, error) {
	var token *string
	{
		if challengeUserScoreboardToken != "" {
			token = &challengeUserScoreboardToken
		}
	}
	v := &challenge.UserScoreboardPayload{}
	v.Token = token

	return v, nil
}

// BuildListAuthorsPayload builds the payload for the challenge ListAuthors
// endpoint from CLI flags.
func BuildListAuthorsPayload(challengeListAuthorsToken string) (*challenge.ListAuthorsPayload, error) {
	var token *string
	{
		if challengeListAuthorsToken != "" {
			token = &challengeListAuthorsToken
		}
	}
	v := &challenge.ListAuthorsPayload{}
	v.Token = token

	return v, nil
}

// BuildListCoursesPayload builds the payload for the challenge ListCourses
// endpoint from CLI flags.
func BuildListCoursesPayload(challengeListCoursesToken string) (*challenge.ListCoursesPayload, error) {
	var token *string
	{
		if challengeListCoursesToken != "" {
			token = &challengeListCoursesToken
		}
	}
	v := &challenge.ListCoursesPayload{}
	v.Token = token

	return v, nil
}

// BuildEnrollCoursePayload builds the payload for the challenge EnrollCourse
// endpoint from CLI flags.
func BuildEnrollCoursePayload(challengeEnrollCourseID string, challengeEnrollCourseToken string) (*challenge.EnrollCoursePayload, error) {
	var err error
	var id string
	{
		id = challengeEnrollCourseID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if challengeEnrollCourseToken != "" {
			token = &challengeEnrollCourseToken
		}
	}
	v := &challenge.EnrollCoursePayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildCompleteCoursePayload builds the payload for the challenge
// CompleteCourse endpoint from CLI flags.
func BuildCompleteCoursePayload(challengeCompleteCourseID string, challengeCompleteCourseToken string) (*challenge.CompleteCoursePayload, error) {
	var err error
	var id string
	{
		id = challengeCompleteCourseID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if challengeCompleteCourseToken != "" {
			token = &challengeCompleteCourseToken
		}
	}
	v := &challenge.CompleteCoursePayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildKnackKodenSubmitFlagPayload builds the payload for the challenge
// KnackKodenSubmitFlag endpoint from CLI flags.
func BuildKnackKodenSubmitFlagPayload(challengeKnackKodenSubmitFlagBody string, challengeKnackKodenSubmitFlagChallengeID string, challengeKnackKodenSubmitFlagToken string) (*challenge.KnackKodenSubmitFlagPayload, error) {
	var err error
	var body KnackKodenSubmitFlagRequestBody
	{
		err = json.Unmarshal([]byte(challengeKnackKodenSubmitFlagBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"flag\": \"SSM{flag}\",\n      \"password\": \"Quos maxime atque porro.\"\n   }'")
		}
		if utf8.RuneCountInString(body.Flag) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.flag", body.Flag, utf8.RuneCountInString(body.Flag), 200, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var challengeID string
	{
		challengeID = challengeKnackKodenSubmitFlagChallengeID
		err = goa.MergeErrors(err, goa.ValidateFormat("challengeID", challengeID, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if challengeKnackKodenSubmitFlagToken != "" {
			token = &challengeKnackKodenSubmitFlagToken
		}
	}
	v := &challenge.KnackKodenSubmitFlagPayload{
		Flag:     body.Flag,
		Password: body.Password,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v, nil
}

// BuildKnackKodenScoreboardPayload builds the payload for the challenge
// KnackKodenScoreboard endpoint from CLI flags.
func BuildKnackKodenScoreboardPayload(challengeKnackKodenScoreboardToken string) (*challenge.KnackKodenScoreboardPayload, error) {
	var token *string
	{
		if challengeKnackKodenScoreboardToken != "" {
			token = &challengeKnackKodenScoreboardToken
		}
	}
	v := &challenge.KnackKodenScoreboardPayload{}
	v.Token = token

	return v, nil
}

// BuildKnackKodenRegisterClassPayload builds the payload for the challenge
// KnackKodenRegisterClass endpoint from CLI flags.
func BuildKnackKodenRegisterClassPayload(challengeKnackKodenRegisterClassBody string, challengeKnackKodenRegisterClassToken string) (*challenge.KnackKodenRegisterClassPayload, error) {
	var err error
	var body KnackKodenRegisterClassRequestBody
	{
		err = json.Unmarshal([]byte(challengeKnackKodenRegisterClassBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"class_name\": \"Voluptatum et quaerat nihil quia.\",\n      \"postal_code\": \"Quia velit ut a sapiente earum.\",\n      \"school_name\": \"Est corrupti et minima distinctio occaecati amet.\",\n      \"teacher_email\": \"Accusantium architecto ut.\",\n      \"teacher_full_name\": \"Quasi at aliquid cumque aut velit sapiente.\",\n      \"teacher_phonenr\": \"Tempore blanditiis non id.\"\n   }'")
		}
	}
	var token *string
	{
		if challengeKnackKodenRegisterClassToken != "" {
			token = &challengeKnackKodenRegisterClassToken
		}
	}
	v := &challenge.KnackKodenRegisterClassPayload{
		TeacherFullName: body.TeacherFullName,
		TeacherEmail:    body.TeacherEmail,
		TeacherPhonenr:  body.TeacherPhonenr,
		SchoolName:      body.SchoolName,
		ClassName:       body.ClassName,
		PostalCode:      body.PostalCode,
	}
	v.Token = token

	return v, nil
}

// BuildKnackKodenGetClassPayload builds the payload for the challenge
// KnackKodenGetClass endpoint from CLI flags.
func BuildKnackKodenGetClassPayload(challengeKnackKodenGetClassBody string, challengeKnackKodenGetClassToken string) (*challenge.KnackKodenGetClassPayload, error) {
	var err error
	var body KnackKodenGetClassRequestBody
	{
		err = json.Unmarshal([]byte(challengeKnackKodenGetClassBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Dolores et in.\"\n   }'")
		}
	}
	var token *string
	{
		if challengeKnackKodenGetClassToken != "" {
			token = &challengeKnackKodenGetClassToken
		}
	}
	v := &challenge.KnackKodenGetClassPayload{
		Password: body.Password,
	}
	v.Token = token

	return v, nil
}
