// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP server types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package server

import (
	"unicode/utf8"

	challenge "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge"
	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// SubmitFlagRequestBody is the type of the "challenge" service "SubmitFlag"
// endpoint HTTP request body.
type SubmitFlagRequestBody struct {
	Flag *string `form:"flag,omitempty" json:"flag,omitempty" xml:"flag,omitempty"`
}

// SsmChallengeResponseCollection is the type of the "challenge" service
// "ListChallenges" endpoint HTTP response body.
type SsmChallengeResponseCollection []*SsmChallengeResponse

// ListEventsResponseBody is the type of the "challenge" service "ListEvents"
// endpoint HTTP response body.
type ListEventsResponseBody []*CTFEventResponse

// GetCurrentMonthlyChallengeResponseBody is the type of the "challenge"
// service "GetCurrentMonthlyChallenge" endpoint HTTP response body.
type GetCurrentMonthlyChallengeResponseBody struct {
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// The month(s) that the challenge is assigned for
	DisplayMonth string `form:"display_month" json:"display_month" xml:"display_month"`
	// Starting date of the monthly challenge
	StartDate int64 `form:"start_date" json:"start_date" xml:"start_date"`
	// Ending date of the monthly challenge
	EndDate   int64                     `form:"end_date" json:"end_date" xml:"end_date"`
	Challenge *SsmChallengeResponseBody `form:"challenge" json:"challenge" xml:"challenge"`
}

// SsmUserMonthlyChallengeResponseCollection is the type of the "challenge"
// service "ListMonthlyChallenges" endpoint HTTP response body.
type SsmUserMonthlyChallengeResponseCollection []*SsmUserMonthlyChallengeResponse

// SchoolScoreboardResponseBody is the type of the "challenge" service
// "SchoolScoreboard" endpoint HTTP response body.
type SchoolScoreboardResponseBody struct {
	Scores []*SchoolScoreboardScoreResponseBody `form:"scores" json:"scores" xml:"scores"`
}

// UserScoreboardResponseBody is the type of the "challenge" service
// "UserScoreboard" endpoint HTTP response body.
type UserScoreboardResponseBody struct {
	Scores []*UserScoreboardScoreResponseBody `form:"scores" json:"scores" xml:"scores"`
}

// GetCurrentMonthlyChallengeNotFoundResponseBody is the type of the
// "challenge" service "GetCurrentMonthlyChallenge" endpoint HTTP response body
// for the "not_found" error.
type GetCurrentMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SubmitFlagAlreadySolvedResponseBody is the type of the "challenge" service
// "SubmitFlag" endpoint HTTP response body for the "already_solved" error.
type SubmitFlagAlreadySolvedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SubmitFlagIncorrectFlagResponseBody is the type of the "challenge" service
// "SubmitFlag" endpoint HTTP response body for the "incorrect_flag" error.
type SubmitFlagIncorrectFlagResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SsmChallengeResponse is used to define fields on response body types.
type SsmChallengeResponse struct {
	ID string `form:"id" json:"id" xml:"id"`
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score    int                         `form:"score" json:"score" xml:"score"`
	Services []*ChallengeServiceResponse `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files    []*ChallengeFilesResponse   `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	// The numer of people who solved the challenge
	Solves int `form:"solves" json:"solves" xml:"solves"`
	// The ID of the CTF the challenge was taken from
	CtfEventID   *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	OtherAuthors []string `form:"other_authors,omitempty" json:"other_authors,omitempty" xml:"other_authors,omitempty"`
	// whether the user has solved the challenge or not
	Solved   bool                 `form:"solved" json:"solved" xml:"solved"`
	Category string               `form:"category" json:"category" xml:"category"`
	Authors  []*SsmUserResponse   `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
	Solvers  []*SsmSolverResponse `form:"solvers,omitempty" json:"solvers,omitempty" xml:"solvers,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
	UserDisplay string `form:"user_display" json:"user_display" xml:"user_display"`
	Hyperlink   bool   `form:"hyperlink" json:"hyperlink" xml:"hyperlink"`
}

// ChallengeFilesResponse is used to define fields on response body types.
type ChallengeFilesResponse struct {
	Filename string `form:"filename" json:"filename" xml:"filename"`
	URL      string `form:"url" json:"url" xml:"url"`
}

// SsmUserResponse is used to define fields on response body types.
type SsmUserResponse struct {
	ID       string `form:"id" json:"id" xml:"id"`
	Email    string `form:"email" json:"email" xml:"email"`
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
	Role     string `form:"role" json:"role" xml:"role"`
	SchoolID *int   `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// SsmSolverResponse is used to define fields on response body types.
type SsmSolverResponse struct {
	ID       string `form:"id" json:"id" xml:"id"`
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
	SolvedAt int64  `form:"solved_at" json:"solved_at" xml:"solved_at"`
}

// CTFEventResponse is used to define fields on response body types.
type CTFEventResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// SsmChallengeResponseBody is used to define fields on response body types.
type SsmChallengeResponseBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score    int                             `form:"score" json:"score" xml:"score"`
	Services []*ChallengeServiceResponseBody `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files    []*ChallengeFilesResponseBody   `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	// The numer of people who solved the challenge
	Solves int `form:"solves" json:"solves" xml:"solves"`
	// The ID of the CTF the challenge was taken from
	CtfEventID   *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	OtherAuthors []string `form:"other_authors,omitempty" json:"other_authors,omitempty" xml:"other_authors,omitempty"`
	// whether the user has solved the challenge or not
	Solved   bool                     `form:"solved" json:"solved" xml:"solved"`
	Category string                   `form:"category" json:"category" xml:"category"`
	Authors  []*SsmUserResponseBody   `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
	Solvers  []*SsmSolverResponseBody `form:"solvers,omitempty" json:"solvers,omitempty" xml:"solvers,omitempty"`
}

// ChallengeServiceResponseBody is used to define fields on response body types.
type ChallengeServiceResponseBody struct {
	UserDisplay string `form:"user_display" json:"user_display" xml:"user_display"`
	Hyperlink   bool   `form:"hyperlink" json:"hyperlink" xml:"hyperlink"`
}

// ChallengeFilesResponseBody is used to define fields on response body types.
type ChallengeFilesResponseBody struct {
	Filename string `form:"filename" json:"filename" xml:"filename"`
	URL      string `form:"url" json:"url" xml:"url"`
}

// SsmUserResponseBody is used to define fields on response body types.
type SsmUserResponseBody struct {
	ID       string `form:"id" json:"id" xml:"id"`
	Email    string `form:"email" json:"email" xml:"email"`
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
	Role     string `form:"role" json:"role" xml:"role"`
	SchoolID *int   `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// SsmSolverResponseBody is used to define fields on response body types.
type SsmSolverResponseBody struct {
	ID       string `form:"id" json:"id" xml:"id"`
	FullName string `form:"full_name" json:"full_name" xml:"full_name"`
	SolvedAt int64  `form:"solved_at" json:"solved_at" xml:"solved_at"`
}

// SsmUserMonthlyChallengeResponse is used to define fields on response body
// types.
type SsmUserMonthlyChallengeResponse struct {
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// The month(s) that the challenge is assigned for
	DisplayMonth string `form:"display_month" json:"display_month" xml:"display_month"`
	// Starting date of the monthly challenge
	StartDate int64 `form:"start_date" json:"start_date" xml:"start_date"`
	// Ending date of the monthly challenge
	EndDate   int64                 `form:"end_date" json:"end_date" xml:"end_date"`
	Challenge *SsmChallengeResponse `form:"challenge" json:"challenge" xml:"challenge"`
}

// SchoolScoreboardScoreResponseBody is used to define fields on response body
// types.
type SchoolScoreboardScoreResponseBody struct {
	Score      int    `form:"score" json:"score" xml:"score"`
	SchoolName string `form:"school_name" json:"school_name" xml:"school_name"`
}

// UserScoreboardScoreResponseBody is used to define fields on response body
// types.
type UserScoreboardScoreResponseBody struct {
	UserID     string `form:"user_id" json:"user_id" xml:"user_id"`
	Name       string `form:"name" json:"name" xml:"name"`
	SchoolName string `form:"school_name" json:"school_name" xml:"school_name"`
	Score      int    `form:"score" json:"score" xml:"score"`
}

// NewSsmChallengeResponseCollection builds the HTTP response body from the
// result of the "ListChallenges" endpoint of the "challenge" service.
func NewSsmChallengeResponseCollection(res challengeviews.SsmChallengeCollectionView) SsmChallengeResponseCollection {
	body := make([]*SsmChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalChallengeviewsSsmChallengeViewToSsmChallengeResponse(val)
	}
	return body
}

// NewListEventsResponseBody builds the HTTP response body from the result of
// the "ListEvents" endpoint of the "challenge" service.
func NewListEventsResponseBody(res []*challenge.CTFEvent) ListEventsResponseBody {
	body := make([]*CTFEventResponse, len(res))
	for i, val := range res {
		body[i] = marshalChallengeCTFEventToCTFEventResponse(val)
	}
	return body
}

// NewGetCurrentMonthlyChallengeResponseBody builds the HTTP response body from
// the result of the "GetCurrentMonthlyChallenge" endpoint of the "challenge"
// service.
func NewGetCurrentMonthlyChallengeResponseBody(res *challengeviews.SsmUserMonthlyChallengeView) *GetCurrentMonthlyChallengeResponseBody {
	body := &GetCurrentMonthlyChallengeResponseBody{
		ChallengeID:  *res.ChallengeID,
		DisplayMonth: *res.DisplayMonth,
		StartDate:    *res.StartDate,
		EndDate:      *res.EndDate,
	}
	if res.Challenge != nil {
		body.Challenge = marshalChallengeviewsSsmChallengeViewToSsmChallengeResponseBody(res.Challenge)
	}
	return body
}

// NewSsmUserMonthlyChallengeResponseCollection builds the HTTP response body
// from the result of the "ListMonthlyChallenges" endpoint of the "challenge"
// service.
func NewSsmUserMonthlyChallengeResponseCollection(res challengeviews.SsmUserMonthlyChallengeCollectionView) SsmUserMonthlyChallengeResponseCollection {
	body := make([]*SsmUserMonthlyChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalChallengeviewsSsmUserMonthlyChallengeViewToSsmUserMonthlyChallengeResponse(val)
	}
	return body
}

// NewSchoolScoreboardResponseBody builds the HTTP response body from the
// result of the "SchoolScoreboard" endpoint of the "challenge" service.
func NewSchoolScoreboardResponseBody(res *challengeviews.SsmSchoolScoreboardView) *SchoolScoreboardResponseBody {
	body := &SchoolScoreboardResponseBody{}
	if res.Scores != nil {
		body.Scores = make([]*SchoolScoreboardScoreResponseBody, len(res.Scores))
		for i, val := range res.Scores {
			body.Scores[i] = marshalChallengeviewsSchoolScoreboardScoreViewToSchoolScoreboardScoreResponseBody(val)
		}
	}
	return body
}

// NewUserScoreboardResponseBody builds the HTTP response body from the result
// of the "UserScoreboard" endpoint of the "challenge" service.
func NewUserScoreboardResponseBody(res *challengeviews.SsmUserScoreboardView) *UserScoreboardResponseBody {
	body := &UserScoreboardResponseBody{}
	if res.Scores != nil {
		body.Scores = make([]*UserScoreboardScoreResponseBody, len(res.Scores))
		for i, val := range res.Scores {
			body.Scores[i] = marshalChallengeviewsUserScoreboardScoreViewToUserScoreboardScoreResponseBody(val)
		}
	}
	return body
}

// NewGetCurrentMonthlyChallengeNotFoundResponseBody builds the HTTP response
// body from the result of the "GetCurrentMonthlyChallenge" endpoint of the
// "challenge" service.
func NewGetCurrentMonthlyChallengeNotFoundResponseBody(res *goa.ServiceError) *GetCurrentMonthlyChallengeNotFoundResponseBody {
	body := &GetCurrentMonthlyChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubmitFlagAlreadySolvedResponseBody builds the HTTP response body from
// the result of the "SubmitFlag" endpoint of the "challenge" service.
func NewSubmitFlagAlreadySolvedResponseBody(res *goa.ServiceError) *SubmitFlagAlreadySolvedResponseBody {
	body := &SubmitFlagAlreadySolvedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubmitFlagIncorrectFlagResponseBody builds the HTTP response body from
// the result of the "SubmitFlag" endpoint of the "challenge" service.
func NewSubmitFlagIncorrectFlagResponseBody(res *goa.ServiceError) *SubmitFlagIncorrectFlagResponseBody {
	body := &SubmitFlagIncorrectFlagResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesPayload builds a challenge service ListChallenges endpoint
// payload.
func NewListChallengesPayload(token *string) *challenge.ListChallengesPayload {
	v := &challenge.ListChallengesPayload{}
	v.Token = token

	return v
}

// NewListEventsPayload builds a challenge service ListEvents endpoint payload.
func NewListEventsPayload(token *string) *challenge.ListEventsPayload {
	v := &challenge.ListEventsPayload{}
	v.Token = token

	return v
}

// NewGetCurrentMonthlyChallengePayload builds a challenge service
// GetCurrentMonthlyChallenge endpoint payload.
func NewGetCurrentMonthlyChallengePayload(token *string) *challenge.GetCurrentMonthlyChallengePayload {
	v := &challenge.GetCurrentMonthlyChallengePayload{}
	v.Token = token

	return v
}

// NewListMonthlyChallengesPayload builds a challenge service
// ListMonthlyChallenges endpoint payload.
func NewListMonthlyChallengesPayload(token *string) *challenge.ListMonthlyChallengesPayload {
	v := &challenge.ListMonthlyChallengesPayload{}
	v.Token = token

	return v
}

// NewSubmitFlagPayload builds a challenge service SubmitFlag endpoint payload.
func NewSubmitFlagPayload(body *SubmitFlagRequestBody, challengeID string, token string) *challenge.SubmitFlagPayload {
	v := &challenge.SubmitFlagPayload{
		Flag: *body.Flag,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewSchoolScoreboardPayload builds a challenge service SchoolScoreboard
// endpoint payload.
func NewSchoolScoreboardPayload(token *string) *challenge.SchoolScoreboardPayload {
	v := &challenge.SchoolScoreboardPayload{}
	v.Token = token

	return v
}

// NewUserScoreboardPayload builds a challenge service UserScoreboard endpoint
// payload.
func NewUserScoreboardPayload(token *string) *challenge.UserScoreboardPayload {
	v := &challenge.UserScoreboardPayload{}
	v.Token = token

	return v
}

// ValidateSubmitFlagRequestBody runs the validations defined on
// SubmitFlagRequestBody
func ValidateSubmitFlagRequestBody(body *SubmitFlagRequestBody) (err error) {
	if body.Flag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flag", "body"))
	}
	if body.Flag != nil {
		if utf8.RuneCountInString(*body.Flag) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.flag", *body.Flag, utf8.RuneCountInString(*body.Flag), 200, false))
		}
	}
	return
}
