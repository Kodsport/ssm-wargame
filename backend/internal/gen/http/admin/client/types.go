// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin HTTP client types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	admin "github.com/sakerhetsm/ssm-wargame/internal/gen/admin"
	adminviews "github.com/sakerhetsm/ssm-wargame/internal/gen/admin/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateChallengeRequestBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP request body.
type CreateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score int `form:"score" json:"score" xml:"score"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID   *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	OtherAuthors []string `form:"other_authors,omitempty" json:"other_authors,omitempty" xml:"other_authors,omitempty"`
	CategoryID   string   `form:"category_id" json:"category_id" xml:"category_id"`
	Authors      []string `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// UpdateChallengeRequestBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP request body.
type UpdateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score int `form:"score" json:"score" xml:"score"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID   *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	OtherAuthors []string `form:"other_authors,omitempty" json:"other_authors,omitempty" xml:"other_authors,omitempty"`
	CategoryID   string   `form:"category_id" json:"category_id" xml:"category_id"`
	Authors      []string `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// PresignChallFileUploadRequestBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP request body.
type PresignChallFileUploadRequestBody struct {
	// MD5 hash of the file content in base64
	Md5      string `form:"md5" json:"md5" xml:"md5"`
	Filename string `form:"filename" json:"filename" xml:"filename"`
	// the files number of bytes
	Size int64 `form:"size" json:"size" xml:"size"`
}

// CreateMonthlyChallengeRequestBody is the type of the "admin" service
// "CreateMonthlyChallenge" endpoint HTTP request body.
type CreateMonthlyChallengeRequestBody struct {
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// The month(s) that the challenge is assigned for
	DisplayMonth string `form:"display_month" json:"display_month" xml:"display_month"`
	// Starting date of the monthly challenge
	StartDate int64 `form:"start_date" json:"start_date" xml:"start_date"`
	// Ending date of the monthly challenge
	EndDate int64 `form:"end_date" json:"end_date" xml:"end_date"`
}

// AddFlagRequestBody is the type of the "admin" service "AddFlag" endpoint
// HTTP request body.
type AddFlagRequestBody struct {
	Flag string `form:"flag" json:"flag" xml:"flag"`
}

// ChalltoolsImportRequestBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP request body.
type ChalltoolsImportRequestBody struct {
	Title            string                           `form:"title" json:"title" xml:"title"`
	Description      string                           `form:"description" json:"description" xml:"description"`
	Authors          []string                         `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
	Categories       []string                         `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	Score            *int                             `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	ChallengeID      string                           `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	FlagFormatPrefix *string                          `form:"flag_format_prefix,omitempty" json:"flag_format_prefix,omitempty" xml:"flag_format_prefix,omitempty"`
	FlagFormatSuffix *string                          `form:"flag_format_suffix,omitempty" json:"flag_format_suffix,omitempty" xml:"flag_format_suffix,omitempty"`
	FileUrls         []string                         `form:"file_urls,omitempty" json:"file_urls,omitempty" xml:"file_urls,omitempty"`
	Flags            []*ImportChallFlagRequestBody    `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
	Order            *int                             `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	Services         []*ImportChallServiceRequestBody `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
}

// CreateCTFEventRequestBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP request body.
type CreateCTFEventRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCTFEventImportTokenRequestBody is the type of the "admin" service
// "CreateCTFEventImportToken" endpoint HTTP request body.
type CreateCTFEventImportTokenRequestBody struct {
	EventID *string `form:"event_id,omitempty" json:"event_id,omitempty" xml:"event_id,omitempty"`
}

// ListChallengesResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body.
type ListChallengesResponseBody []*SsmAdminChallengeResponse

// GetChallengeMetaResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body.
type GetChallengeMetaResponseBody struct {
	Solvers     []*ChallengeSolverResponseBody     `form:"solvers,omitempty" json:"solvers,omitempty" xml:"solvers,omitempty"`
	Submissions []*ChallengeSubmissionResponseBody `form:"submissions,omitempty" json:"submissions,omitempty" xml:"submissions,omitempty"`
}

// PresignChallFileUploadResponseBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP response body.
type PresignChallFileUploadResponseBody struct {
	// Signed PutObject URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ListMonthlyChallengesResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body.
type ListMonthlyChallengesResponseBody []*MonthlyChallengeResponse

// ListUsersResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*SsmUserResponse

// ListCategoriesResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body.
type ListCategoriesResponseBody []*CategoryResponse

// ListCTFEventsResponseBody is the type of the "admin" service "ListCTFEvents"
// endpoint HTTP response body.
type ListCTFEventsResponseBody []*CTFEventResponse

// CreateCTFEventImportTokenResponseBody is the type of the "admin" service
// "CreateCTFEventImportToken" endpoint HTTP response body.
type CreateCTFEventImportTokenResponseBody struct {
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// ListChallengesUnauthorizedResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "unauthorized" error.
type ListChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListChallengesNotFoundResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "not_found" error.
type ListChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListChallengesBadRequestResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "bad_request" error.
type ListChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetChallengeMetaUnauthorizedResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "unauthorized" error.
type GetChallengeMetaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetChallengeMetaNotFoundResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "not_found" error.
type GetChallengeMetaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetChallengeMetaBadRequestResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "bad_request" error.
type GetChallengeMetaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "unauthorized" error.
type CreateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateChallengeNotFoundResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "not_found" error.
type CreateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateChallengeBadRequestResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "bad_request" error.
type CreateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "unauthorized" error.
type UpdateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateChallengeNotFoundResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "not_found" error.
type UpdateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateChallengeBadRequestResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "bad_request" error.
type UpdateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PresignChallFileUploadUnauthorizedResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "unauthorized" error.
type PresignChallFileUploadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PresignChallFileUploadNotFoundResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "not_found" error.
type PresignChallFileUploadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PresignChallFileUploadBadRequestResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "bad_request" error.
type PresignChallFileUploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListMonthlyChallengesUnauthorizedResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "unauthorized" error.
type ListMonthlyChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListMonthlyChallengesNotFoundResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body for the "not_found"
// error.
type ListMonthlyChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListMonthlyChallengesBadRequestResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "bad_request" error.
type ListMonthlyChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type DeleteMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type DeleteMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFileUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "unauthorized" error.
type DeleteFileUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFileNotFoundResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "not_found" error.
type DeleteFileNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFileBadRequestResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "bad_request" error.
type DeleteFileBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type CreateMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type CreateMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type CreateMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUsersUnauthorizedResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "unauthorized" error.
type ListUsersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUsersNotFoundResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body for the "not_found" error.
type ListUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUsersBadRequestResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "bad_request" error.
type ListUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddFlagUnauthorizedResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "unauthorized" error.
type AddFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddFlagNotFoundResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "not_found" error.
type AddFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AddFlagBadRequestResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "bad_request" error.
type AddFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFlagUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "unauthorized" error.
type DeleteFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFlagNotFoundResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "not_found" error.
type DeleteFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteFlagBadRequestResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "bad_request" error.
type DeleteFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCategoriesUnauthorizedResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "unauthorized" error.
type ListCategoriesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCategoriesNotFoundResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "not_found" error.
type ListCategoriesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCategoriesBadRequestResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "bad_request" error.
type ListCategoriesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ChalltoolsImportUnauthorizedResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "unauthorized" error.
type ChalltoolsImportUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ChalltoolsImportNotFoundResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "not_found" error.
type ChalltoolsImportNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ChalltoolsImportBadRequestResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "bad_request" error.
type ChalltoolsImportBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCTFEventsUnauthorizedResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "unauthorized" error.
type ListCTFEventsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCTFEventsNotFoundResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "not_found" error.
type ListCTFEventsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListCTFEventsBadRequestResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "bad_request" error.
type ListCTFEventsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventUnauthorizedResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "unauthorized" error.
type CreateCTFEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventNotFoundResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "not_found" error.
type CreateCTFEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventBadRequestResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "bad_request" error.
type CreateCTFEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteCTFEventUnauthorizedResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "unauthorized" error.
type DeleteCTFEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteCTFEventNotFoundResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "not_found" error.
type DeleteCTFEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteCTFEventBadRequestResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "bad_request" error.
type DeleteCTFEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventImportTokenUnauthorizedResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "unauthorized" error.
type CreateCTFEventImportTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventImportTokenNotFoundResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "not_found" error.
type CreateCTFEventImportTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCTFEventImportTokenBadRequestResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "bad_request" error.
type CreateCTFEventImportTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SsmAdminChallengeResponse is used to define fields on response body types.
type SsmAdminChallengeResponse struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The number of points given to the solver
	Score    *int                           `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	Services []*ChallengeServiceResponse    `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files    []*AdminChallengeFilesResponse `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The numer of people who solved the challenge
	Solves *int `form:"solves,omitempty" json:"solves,omitempty" xml:"solves,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID   *string                       `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	OtherAuthors []string                      `form:"other_authors,omitempty" json:"other_authors,omitempty" xml:"other_authors,omitempty"`
	Flags        []*AdminChallengeFlagResponse `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
	CategoryID   *string                       `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	Authors      []string                      `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
	UserDisplay *string `form:"user_display,omitempty" json:"user_display,omitempty" xml:"user_display,omitempty"`
	Hyperlink   *bool   `form:"hyperlink,omitempty" json:"hyperlink,omitempty" xml:"hyperlink,omitempty"`
}

// AdminChallengeFilesResponse is used to define fields on response body types.
type AdminChallengeFilesResponse struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	URL      *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// AdminChallengeFlagResponse is used to define fields on response body types.
type AdminChallengeFlagResponse struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Flag *string `form:"flag,omitempty" json:"flag,omitempty" xml:"flag,omitempty"`
}

// ChallengeSolverResponseBody is used to define fields on response body types.
type ChallengeSolverResponseBody struct {
	UserID   *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	SolvedAt *int64  `form:"solved_at,omitempty" json:"solved_at,omitempty" xml:"solved_at,omitempty"`
}

// ChallengeSubmissionResponseBody is used to define fields on response body
// types.
type ChallengeSubmissionResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Input       *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
	Successful  *bool   `form:"successful,omitempty" json:"successful,omitempty" xml:"successful,omitempty"`
	UserID      *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	SubmittedAt *int64  `form:"submitted_at,omitempty" json:"submitted_at,omitempty" xml:"submitted_at,omitempty"`
}

// MonthlyChallengeResponse is used to define fields on response body types.
type MonthlyChallengeResponse struct {
	ChallengeID *string `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	// The month(s) that the challenge is assigned for
	DisplayMonth *string `form:"display_month,omitempty" json:"display_month,omitempty" xml:"display_month,omitempty"`
	// Starting date of the monthly challenge
	StartDate *int64 `form:"start_date,omitempty" json:"start_date,omitempty" xml:"start_date,omitempty"`
	// Ending date of the monthly challenge
	EndDate *int64 `form:"end_date,omitempty" json:"end_date,omitempty" xml:"end_date,omitempty"`
}

// SsmUserResponse is used to define fields on response body types.
type SsmUserResponse struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FullName *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	Role     *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	SchoolID *int    `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// CategoryResponse is used to define fields on response body types.
type CategoryResponse struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ImportChallFlagRequestBody is used to define fields on request body types.
type ImportChallFlagRequestBody struct {
	Type string `form:"type" json:"type" xml:"type"`
	Flag string `form:"flag" json:"flag" xml:"flag"`
}

// ImportChallServiceRequestBody is used to define fields on request body types.
type ImportChallServiceRequestBody struct {
	UserDisplay string `form:"user_display" json:"user_display" xml:"user_display"`
	Hyperlink   bool   `form:"hyperlink" json:"hyperlink" xml:"hyperlink"`
}

// CTFEventResponse is used to define fields on response body types.
type CTFEventResponse struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCreateChallengeRequestBody builds the HTTP request body from the payload
// of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeRequestBody(p *admin.CreateChallengePayload) *CreateChallengeRequestBody {
	body := &CreateChallengeRequestBody{
		Slug:        p.Slug,
		Title:       p.Title,
		Description: p.Description,
		Score:       p.Score,
		PublishAt:   p.PublishAt,
		CtfEventID:  p.CtfEventID,
		CategoryID:  p.CategoryID,
	}
	if p.OtherAuthors != nil {
		body.OtherAuthors = make([]string, len(p.OtherAuthors))
		for i, val := range p.OtherAuthors {
			body.OtherAuthors[i] = val
		}
	}
	if p.Authors != nil {
		body.Authors = make([]string, len(p.Authors))
		for i, val := range p.Authors {
			body.Authors[i] = val
		}
	}
	return body
}

// NewUpdateChallengeRequestBody builds the HTTP request body from the payload
// of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeRequestBody(p *admin.UpdateChallengePayload) *UpdateChallengeRequestBody {
	body := &UpdateChallengeRequestBody{
		Slug:        p.Slug,
		Title:       p.Title,
		Description: p.Description,
		Score:       p.Score,
		PublishAt:   p.PublishAt,
		CtfEventID:  p.CtfEventID,
		CategoryID:  p.CategoryID,
	}
	if p.OtherAuthors != nil {
		body.OtherAuthors = make([]string, len(p.OtherAuthors))
		for i, val := range p.OtherAuthors {
			body.OtherAuthors[i] = val
		}
	}
	if p.Authors != nil {
		body.Authors = make([]string, len(p.Authors))
		for i, val := range p.Authors {
			body.Authors[i] = val
		}
	}
	return body
}

// NewPresignChallFileUploadRequestBody builds the HTTP request body from the
// payload of the "PresignChallFileUpload" endpoint of the "admin" service.
func NewPresignChallFileUploadRequestBody(p *admin.PresignChallFileUploadPayload) *PresignChallFileUploadRequestBody {
	body := &PresignChallFileUploadRequestBody{
		Md5:      p.Md5,
		Filename: p.Filename,
		Size:     p.Size,
	}
	return body
}

// NewCreateMonthlyChallengeRequestBody builds the HTTP request body from the
// payload of the "CreateMonthlyChallenge" endpoint of the "admin" service.
func NewCreateMonthlyChallengeRequestBody(p *admin.CreateMonthlyChallengePayload) *CreateMonthlyChallengeRequestBody {
	body := &CreateMonthlyChallengeRequestBody{
		ChallengeID:  p.ChallengeID,
		DisplayMonth: p.DisplayMonth,
		StartDate:    p.StartDate,
		EndDate:      p.EndDate,
	}
	return body
}

// NewAddFlagRequestBody builds the HTTP request body from the payload of the
// "AddFlag" endpoint of the "admin" service.
func NewAddFlagRequestBody(p *admin.AddFlagPayload) *AddFlagRequestBody {
	body := &AddFlagRequestBody{
		Flag: p.Flag,
	}
	return body
}

// NewChalltoolsImportRequestBody builds the HTTP request body from the payload
// of the "ChalltoolsImport" endpoint of the "admin" service.
func NewChalltoolsImportRequestBody(p *admin.ChalltoolsImportPayload) *ChalltoolsImportRequestBody {
	body := &ChalltoolsImportRequestBody{
		Title:            p.Title,
		Description:      p.Description,
		Score:            p.Score,
		ChallengeID:      p.ChallengeID,
		FlagFormatPrefix: p.FlagFormatPrefix,
		FlagFormatSuffix: p.FlagFormatSuffix,
		Order:            p.Order,
	}
	if p.Authors != nil {
		body.Authors = make([]string, len(p.Authors))
		for i, val := range p.Authors {
			body.Authors[i] = val
		}
	}
	if p.Categories != nil {
		body.Categories = make([]string, len(p.Categories))
		for i, val := range p.Categories {
			body.Categories[i] = val
		}
	}
	if p.FileUrls != nil {
		body.FileUrls = make([]string, len(p.FileUrls))
		for i, val := range p.FileUrls {
			body.FileUrls[i] = val
		}
	}
	if p.Flags != nil {
		body.Flags = make([]*ImportChallFlagRequestBody, len(p.Flags))
		for i, val := range p.Flags {
			body.Flags[i] = marshalAdminImportChallFlagToImportChallFlagRequestBody(val)
		}
	}
	if p.Services != nil {
		body.Services = make([]*ImportChallServiceRequestBody, len(p.Services))
		for i, val := range p.Services {
			body.Services[i] = marshalAdminImportChallServiceToImportChallServiceRequestBody(val)
		}
	}
	return body
}

// NewCreateCTFEventRequestBody builds the HTTP request body from the payload
// of the "CreateCTFEvent" endpoint of the "admin" service.
func NewCreateCTFEventRequestBody(p *admin.CreateCTFEventPayload) *CreateCTFEventRequestBody {
	body := &CreateCTFEventRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateCTFEventImportTokenRequestBody builds the HTTP request body from
// the payload of the "CreateCTFEventImportToken" endpoint of the "admin"
// service.
func NewCreateCTFEventImportTokenRequestBody(p *admin.CreateCTFEventImportTokenPayload) *CreateCTFEventImportTokenRequestBody {
	body := &CreateCTFEventImportTokenRequestBody{
		EventID: p.EventID,
	}
	return body
}

// NewListChallengesSsmAdminChallengeCollectionOK builds a "admin" service
// "ListChallenges" endpoint result from a HTTP "OK" response.
func NewListChallengesSsmAdminChallengeCollectionOK(body ListChallengesResponseBody) adminviews.SsmAdminChallengeCollectionView {
	v := make([]*adminviews.SsmAdminChallengeView, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmAdminChallengeResponseToAdminviewsSsmAdminChallengeView(val)
	}

	return v
}

// NewListChallengesUnauthorized builds a admin service ListChallenges endpoint
// unauthorized error.
func NewListChallengesUnauthorized(body *ListChallengesUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListChallengesNotFound builds a admin service ListChallenges endpoint
// not_found error.
func NewListChallengesNotFound(body *ListChallengesNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListChallengesBadRequest builds a admin service ListChallenges endpoint
// bad_request error.
func NewListChallengesBadRequest(body *ListChallengesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetChallengeMetaChallengeMetaOK builds a "admin" service
// "GetChallengeMeta" endpoint result from a HTTP "OK" response.
func NewGetChallengeMetaChallengeMetaOK(body *GetChallengeMetaResponseBody) *admin.ChallengeMeta {
	v := &admin.ChallengeMeta{}
	v.Solvers = make([]*admin.ChallengeSolver, len(body.Solvers))
	for i, val := range body.Solvers {
		v.Solvers[i] = unmarshalChallengeSolverResponseBodyToAdminChallengeSolver(val)
	}
	v.Submissions = make([]*admin.ChallengeSubmission, len(body.Submissions))
	for i, val := range body.Submissions {
		v.Submissions[i] = unmarshalChallengeSubmissionResponseBodyToAdminChallengeSubmission(val)
	}

	return v
}

// NewGetChallengeMetaUnauthorized builds a admin service GetChallengeMeta
// endpoint unauthorized error.
func NewGetChallengeMetaUnauthorized(body *GetChallengeMetaUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetChallengeMetaNotFound builds a admin service GetChallengeMeta endpoint
// not_found error.
func NewGetChallengeMetaNotFound(body *GetChallengeMetaNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetChallengeMetaBadRequest builds a admin service GetChallengeMeta
// endpoint bad_request error.
func NewGetChallengeMetaBadRequest(body *GetChallengeMetaBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateChallengeUnauthorized builds a admin service CreateChallenge
// endpoint unauthorized error.
func NewCreateChallengeUnauthorized(body *CreateChallengeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateChallengeNotFound builds a admin service CreateChallenge endpoint
// not_found error.
func NewCreateChallengeNotFound(body *CreateChallengeNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateChallengeBadRequest builds a admin service CreateChallenge endpoint
// bad_request error.
func NewCreateChallengeBadRequest(body *CreateChallengeBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateChallengeUnauthorized builds a admin service UpdateChallenge
// endpoint unauthorized error.
func NewUpdateChallengeUnauthorized(body *UpdateChallengeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateChallengeNotFound builds a admin service UpdateChallenge endpoint
// not_found error.
func NewUpdateChallengeNotFound(body *UpdateChallengeNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateChallengeBadRequest builds a admin service UpdateChallenge endpoint
// bad_request error.
func NewUpdateChallengeBadRequest(body *UpdateChallengeBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPresignChallFileUploadResultOK builds a "admin" service
// "PresignChallFileUpload" endpoint result from a HTTP "OK" response.
func NewPresignChallFileUploadResultOK(body *PresignChallFileUploadResponseBody) *admin.PresignChallFileUploadResult {
	v := &admin.PresignChallFileUploadResult{
		URL: *body.URL,
	}

	return v
}

// NewPresignChallFileUploadUnauthorized builds a admin service
// PresignChallFileUpload endpoint unauthorized error.
func NewPresignChallFileUploadUnauthorized(body *PresignChallFileUploadUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPresignChallFileUploadNotFound builds a admin service
// PresignChallFileUpload endpoint not_found error.
func NewPresignChallFileUploadNotFound(body *PresignChallFileUploadNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPresignChallFileUploadBadRequest builds a admin service
// PresignChallFileUpload endpoint bad_request error.
func NewPresignChallFileUploadBadRequest(body *PresignChallFileUploadBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListMonthlyChallengesMonthlyChallengeOK builds a "admin" service
// "ListMonthlyChallenges" endpoint result from a HTTP "OK" response.
func NewListMonthlyChallengesMonthlyChallengeOK(body []*MonthlyChallengeResponse) []*admin.MonthlyChallenge {
	v := make([]*admin.MonthlyChallenge, len(body))
	for i, val := range body {
		v[i] = unmarshalMonthlyChallengeResponseToAdminMonthlyChallenge(val)
	}

	return v
}

// NewListMonthlyChallengesUnauthorized builds a admin service
// ListMonthlyChallenges endpoint unauthorized error.
func NewListMonthlyChallengesUnauthorized(body *ListMonthlyChallengesUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListMonthlyChallengesNotFound builds a admin service
// ListMonthlyChallenges endpoint not_found error.
func NewListMonthlyChallengesNotFound(body *ListMonthlyChallengesNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListMonthlyChallengesBadRequest builds a admin service
// ListMonthlyChallenges endpoint bad_request error.
func NewListMonthlyChallengesBadRequest(body *ListMonthlyChallengesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteMonthlyChallengeUnauthorized builds a admin service
// DeleteMonthlyChallenge endpoint unauthorized error.
func NewDeleteMonthlyChallengeUnauthorized(body *DeleteMonthlyChallengeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteMonthlyChallengeNotFound builds a admin service
// DeleteMonthlyChallenge endpoint not_found error.
func NewDeleteMonthlyChallengeNotFound(body *DeleteMonthlyChallengeNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteMonthlyChallengeBadRequest builds a admin service
// DeleteMonthlyChallenge endpoint bad_request error.
func NewDeleteMonthlyChallengeBadRequest(body *DeleteMonthlyChallengeBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFileUnauthorized builds a admin service DeleteFile endpoint
// unauthorized error.
func NewDeleteFileUnauthorized(body *DeleteFileUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFileNotFound builds a admin service DeleteFile endpoint not_found
// error.
func NewDeleteFileNotFound(body *DeleteFileNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFileBadRequest builds a admin service DeleteFile endpoint
// bad_request error.
func NewDeleteFileBadRequest(body *DeleteFileBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateMonthlyChallengeUnauthorized builds a admin service
// CreateMonthlyChallenge endpoint unauthorized error.
func NewCreateMonthlyChallengeUnauthorized(body *CreateMonthlyChallengeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateMonthlyChallengeNotFound builds a admin service
// CreateMonthlyChallenge endpoint not_found error.
func NewCreateMonthlyChallengeNotFound(body *CreateMonthlyChallengeNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateMonthlyChallengeBadRequest builds a admin service
// CreateMonthlyChallenge endpoint bad_request error.
func NewCreateMonthlyChallengeBadRequest(body *CreateMonthlyChallengeBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListUsersSsmUserOK builds a "admin" service "ListUsers" endpoint result
// from a HTTP "OK" response.
func NewListUsersSsmUserOK(body []*SsmUserResponse) []*admin.SsmUser {
	v := make([]*admin.SsmUser, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmUserResponseToAdminSsmUser(val)
	}

	return v
}

// NewListUsersUnauthorized builds a admin service ListUsers endpoint
// unauthorized error.
func NewListUsersUnauthorized(body *ListUsersUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListUsersNotFound builds a admin service ListUsers endpoint not_found
// error.
func NewListUsersNotFound(body *ListUsersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListUsersBadRequest builds a admin service ListUsers endpoint bad_request
// error.
func NewListUsersBadRequest(body *ListUsersBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAddFlagUnauthorized builds a admin service AddFlag endpoint unauthorized
// error.
func NewAddFlagUnauthorized(body *AddFlagUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAddFlagNotFound builds a admin service AddFlag endpoint not_found error.
func NewAddFlagNotFound(body *AddFlagNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAddFlagBadRequest builds a admin service AddFlag endpoint bad_request
// error.
func NewAddFlagBadRequest(body *AddFlagBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFlagUnauthorized builds a admin service DeleteFlag endpoint
// unauthorized error.
func NewDeleteFlagUnauthorized(body *DeleteFlagUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFlagNotFound builds a admin service DeleteFlag endpoint not_found
// error.
func NewDeleteFlagNotFound(body *DeleteFlagNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteFlagBadRequest builds a admin service DeleteFlag endpoint
// bad_request error.
func NewDeleteFlagBadRequest(body *DeleteFlagBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCategoriesCategoryOK builds a "admin" service "ListCategories"
// endpoint result from a HTTP "OK" response.
func NewListCategoriesCategoryOK(body []*CategoryResponse) []*admin.Category {
	v := make([]*admin.Category, len(body))
	for i, val := range body {
		v[i] = unmarshalCategoryResponseToAdminCategory(val)
	}

	return v
}

// NewListCategoriesUnauthorized builds a admin service ListCategories endpoint
// unauthorized error.
func NewListCategoriesUnauthorized(body *ListCategoriesUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCategoriesNotFound builds a admin service ListCategories endpoint
// not_found error.
func NewListCategoriesNotFound(body *ListCategoriesNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCategoriesBadRequest builds a admin service ListCategories endpoint
// bad_request error.
func NewListCategoriesBadRequest(body *ListCategoriesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewChalltoolsImportUnauthorized builds a admin service ChalltoolsImport
// endpoint unauthorized error.
func NewChalltoolsImportUnauthorized(body *ChalltoolsImportUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewChalltoolsImportNotFound builds a admin service ChalltoolsImport endpoint
// not_found error.
func NewChalltoolsImportNotFound(body *ChalltoolsImportNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewChalltoolsImportBadRequest builds a admin service ChalltoolsImport
// endpoint bad_request error.
func NewChalltoolsImportBadRequest(body *ChalltoolsImportBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCTFEventsCTFEventOK builds a "admin" service "ListCTFEvents" endpoint
// result from a HTTP "OK" response.
func NewListCTFEventsCTFEventOK(body []*CTFEventResponse) []*admin.CTFEvent {
	v := make([]*admin.CTFEvent, len(body))
	for i, val := range body {
		v[i] = unmarshalCTFEventResponseToAdminCTFEvent(val)
	}

	return v
}

// NewListCTFEventsUnauthorized builds a admin service ListCTFEvents endpoint
// unauthorized error.
func NewListCTFEventsUnauthorized(body *ListCTFEventsUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCTFEventsNotFound builds a admin service ListCTFEvents endpoint
// not_found error.
func NewListCTFEventsNotFound(body *ListCTFEventsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCTFEventsBadRequest builds a admin service ListCTFEvents endpoint
// bad_request error.
func NewListCTFEventsBadRequest(body *ListCTFEventsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventUnauthorized builds a admin service CreateCTFEvent endpoint
// unauthorized error.
func NewCreateCTFEventUnauthorized(body *CreateCTFEventUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventNotFound builds a admin service CreateCTFEvent endpoint
// not_found error.
func NewCreateCTFEventNotFound(body *CreateCTFEventNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventBadRequest builds a admin service CreateCTFEvent endpoint
// bad_request error.
func NewCreateCTFEventBadRequest(body *CreateCTFEventBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteCTFEventUnauthorized builds a admin service DeleteCTFEvent endpoint
// unauthorized error.
func NewDeleteCTFEventUnauthorized(body *DeleteCTFEventUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteCTFEventNotFound builds a admin service DeleteCTFEvent endpoint
// not_found error.
func NewDeleteCTFEventNotFound(body *DeleteCTFEventNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteCTFEventBadRequest builds a admin service DeleteCTFEvent endpoint
// bad_request error.
func NewDeleteCTFEventBadRequest(body *DeleteCTFEventBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventImportTokenResultOK builds a "admin" service
// "CreateCTFEventImportToken" endpoint result from a HTTP "OK" response.
func NewCreateCTFEventImportTokenResultOK(body *CreateCTFEventImportTokenResponseBody) *admin.CreateCTFEventImportTokenResult {
	v := &admin.CreateCTFEventImportTokenResult{
		Token: *body.Token,
	}

	return v
}

// NewCreateCTFEventImportTokenUnauthorized builds a admin service
// CreateCTFEventImportToken endpoint unauthorized error.
func NewCreateCTFEventImportTokenUnauthorized(body *CreateCTFEventImportTokenUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventImportTokenNotFound builds a admin service
// CreateCTFEventImportToken endpoint not_found error.
func NewCreateCTFEventImportTokenNotFound(body *CreateCTFEventImportTokenNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCTFEventImportTokenBadRequest builds a admin service
// CreateCTFEventImportToken endpoint bad_request error.
func NewCreateCTFEventImportTokenBadRequest(body *CreateCTFEventImportTokenBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetChallengeMetaResponseBody runs the validations defined on
// GetChallengeMetaResponseBody
func ValidateGetChallengeMetaResponseBody(body *GetChallengeMetaResponseBody) (err error) {
	if body.Solvers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solvers", "body"))
	}
	if body.Submissions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submissions", "body"))
	}
	for _, e := range body.Solvers {
		if e != nil {
			if err2 := ValidateChallengeSolverResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Submissions {
		if e != nil {
			if err2 := ValidateChallengeSubmissionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePresignChallFileUploadResponseBody runs the validations defined on
// PresignChallFileUploadResponseBody
func ValidatePresignChallFileUploadResponseBody(body *PresignChallFileUploadResponseBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateCreateCTFEventImportTokenResponseBody runs the validations defined
// on CreateCTFEventImportTokenResponseBody
func ValidateCreateCTFEventImportTokenResponseBody(body *CreateCTFEventImportTokenResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}

// ValidateListChallengesUnauthorizedResponseBody runs the validations defined
// on ListChallenges_unauthorized_Response_Body
func ValidateListChallengesUnauthorizedResponseBody(body *ListChallengesUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListChallengesNotFoundResponseBody runs the validations defined on
// ListChallenges_not_found_Response_Body
func ValidateListChallengesNotFoundResponseBody(body *ListChallengesNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListChallengesBadRequestResponseBody runs the validations defined on
// ListChallenges_bad_request_Response_Body
func ValidateListChallengesBadRequestResponseBody(body *ListChallengesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetChallengeMetaUnauthorizedResponseBody runs the validations
// defined on GetChallengeMeta_unauthorized_Response_Body
func ValidateGetChallengeMetaUnauthorizedResponseBody(body *GetChallengeMetaUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetChallengeMetaNotFoundResponseBody runs the validations defined on
// GetChallengeMeta_not_found_Response_Body
func ValidateGetChallengeMetaNotFoundResponseBody(body *GetChallengeMetaNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetChallengeMetaBadRequestResponseBody runs the validations defined
// on GetChallengeMeta_bad_request_Response_Body
func ValidateGetChallengeMetaBadRequestResponseBody(body *GetChallengeMetaBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateChallengeUnauthorizedResponseBody runs the validations defined
// on CreateChallenge_unauthorized_Response_Body
func ValidateCreateChallengeUnauthorizedResponseBody(body *CreateChallengeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateChallengeNotFoundResponseBody runs the validations defined on
// CreateChallenge_not_found_Response_Body
func ValidateCreateChallengeNotFoundResponseBody(body *CreateChallengeNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateChallengeBadRequestResponseBody runs the validations defined
// on CreateChallenge_bad_request_Response_Body
func ValidateCreateChallengeBadRequestResponseBody(body *CreateChallengeBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateChallengeUnauthorizedResponseBody runs the validations defined
// on UpdateChallenge_unauthorized_Response_Body
func ValidateUpdateChallengeUnauthorizedResponseBody(body *UpdateChallengeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateChallengeNotFoundResponseBody runs the validations defined on
// UpdateChallenge_not_found_Response_Body
func ValidateUpdateChallengeNotFoundResponseBody(body *UpdateChallengeNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateChallengeBadRequestResponseBody runs the validations defined
// on UpdateChallenge_bad_request_Response_Body
func ValidateUpdateChallengeBadRequestResponseBody(body *UpdateChallengeBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePresignChallFileUploadUnauthorizedResponseBody runs the validations
// defined on PresignChallFileUpload_unauthorized_Response_Body
func ValidatePresignChallFileUploadUnauthorizedResponseBody(body *PresignChallFileUploadUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePresignChallFileUploadNotFoundResponseBody runs the validations
// defined on PresignChallFileUpload_not_found_Response_Body
func ValidatePresignChallFileUploadNotFoundResponseBody(body *PresignChallFileUploadNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePresignChallFileUploadBadRequestResponseBody runs the validations
// defined on PresignChallFileUpload_bad_request_Response_Body
func ValidatePresignChallFileUploadBadRequestResponseBody(body *PresignChallFileUploadBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListMonthlyChallengesUnauthorizedResponseBody runs the validations
// defined on ListMonthlyChallenges_unauthorized_Response_Body
func ValidateListMonthlyChallengesUnauthorizedResponseBody(body *ListMonthlyChallengesUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListMonthlyChallengesNotFoundResponseBody runs the validations
// defined on ListMonthlyChallenges_not_found_Response_Body
func ValidateListMonthlyChallengesNotFoundResponseBody(body *ListMonthlyChallengesNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListMonthlyChallengesBadRequestResponseBody runs the validations
// defined on ListMonthlyChallenges_bad_request_Response_Body
func ValidateListMonthlyChallengesBadRequestResponseBody(body *ListMonthlyChallengesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteMonthlyChallengeUnauthorizedResponseBody runs the validations
// defined on DeleteMonthlyChallenge_unauthorized_Response_Body
func ValidateDeleteMonthlyChallengeUnauthorizedResponseBody(body *DeleteMonthlyChallengeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteMonthlyChallengeNotFoundResponseBody runs the validations
// defined on DeleteMonthlyChallenge_not_found_Response_Body
func ValidateDeleteMonthlyChallengeNotFoundResponseBody(body *DeleteMonthlyChallengeNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteMonthlyChallengeBadRequestResponseBody runs the validations
// defined on DeleteMonthlyChallenge_bad_request_Response_Body
func ValidateDeleteMonthlyChallengeBadRequestResponseBody(body *DeleteMonthlyChallengeBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFileUnauthorizedResponseBody runs the validations defined on
// DeleteFile_unauthorized_Response_Body
func ValidateDeleteFileUnauthorizedResponseBody(body *DeleteFileUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFileNotFoundResponseBody runs the validations defined on
// DeleteFile_not_found_Response_Body
func ValidateDeleteFileNotFoundResponseBody(body *DeleteFileNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFileBadRequestResponseBody runs the validations defined on
// DeleteFile_bad_request_Response_Body
func ValidateDeleteFileBadRequestResponseBody(body *DeleteFileBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateMonthlyChallengeUnauthorizedResponseBody runs the validations
// defined on CreateMonthlyChallenge_unauthorized_Response_Body
func ValidateCreateMonthlyChallengeUnauthorizedResponseBody(body *CreateMonthlyChallengeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateMonthlyChallengeNotFoundResponseBody runs the validations
// defined on CreateMonthlyChallenge_not_found_Response_Body
func ValidateCreateMonthlyChallengeNotFoundResponseBody(body *CreateMonthlyChallengeNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateMonthlyChallengeBadRequestResponseBody runs the validations
// defined on CreateMonthlyChallenge_bad_request_Response_Body
func ValidateCreateMonthlyChallengeBadRequestResponseBody(body *CreateMonthlyChallengeBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUsersUnauthorizedResponseBody runs the validations defined on
// ListUsers_unauthorized_Response_Body
func ValidateListUsersUnauthorizedResponseBody(body *ListUsersUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUsersNotFoundResponseBody runs the validations defined on
// ListUsers_not_found_Response_Body
func ValidateListUsersNotFoundResponseBody(body *ListUsersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUsersBadRequestResponseBody runs the validations defined on
// ListUsers_bad_request_Response_Body
func ValidateListUsersBadRequestResponseBody(body *ListUsersBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddFlagUnauthorizedResponseBody runs the validations defined on
// AddFlag_unauthorized_Response_Body
func ValidateAddFlagUnauthorizedResponseBody(body *AddFlagUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddFlagNotFoundResponseBody runs the validations defined on
// AddFlag_not_found_Response_Body
func ValidateAddFlagNotFoundResponseBody(body *AddFlagNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAddFlagBadRequestResponseBody runs the validations defined on
// AddFlag_bad_request_Response_Body
func ValidateAddFlagBadRequestResponseBody(body *AddFlagBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFlagUnauthorizedResponseBody runs the validations defined on
// DeleteFlag_unauthorized_Response_Body
func ValidateDeleteFlagUnauthorizedResponseBody(body *DeleteFlagUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFlagNotFoundResponseBody runs the validations defined on
// DeleteFlag_not_found_Response_Body
func ValidateDeleteFlagNotFoundResponseBody(body *DeleteFlagNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteFlagBadRequestResponseBody runs the validations defined on
// DeleteFlag_bad_request_Response_Body
func ValidateDeleteFlagBadRequestResponseBody(body *DeleteFlagBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCategoriesUnauthorizedResponseBody runs the validations defined
// on ListCategories_unauthorized_Response_Body
func ValidateListCategoriesUnauthorizedResponseBody(body *ListCategoriesUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCategoriesNotFoundResponseBody runs the validations defined on
// ListCategories_not_found_Response_Body
func ValidateListCategoriesNotFoundResponseBody(body *ListCategoriesNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCategoriesBadRequestResponseBody runs the validations defined on
// ListCategories_bad_request_Response_Body
func ValidateListCategoriesBadRequestResponseBody(body *ListCategoriesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateChalltoolsImportUnauthorizedResponseBody runs the validations
// defined on ChalltoolsImport_unauthorized_Response_Body
func ValidateChalltoolsImportUnauthorizedResponseBody(body *ChalltoolsImportUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateChalltoolsImportNotFoundResponseBody runs the validations defined on
// ChalltoolsImport_not_found_Response_Body
func ValidateChalltoolsImportNotFoundResponseBody(body *ChalltoolsImportNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateChalltoolsImportBadRequestResponseBody runs the validations defined
// on ChalltoolsImport_bad_request_Response_Body
func ValidateChalltoolsImportBadRequestResponseBody(body *ChalltoolsImportBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCTFEventsUnauthorizedResponseBody runs the validations defined
// on ListCTFEvents_unauthorized_Response_Body
func ValidateListCTFEventsUnauthorizedResponseBody(body *ListCTFEventsUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCTFEventsNotFoundResponseBody runs the validations defined on
// ListCTFEvents_not_found_Response_Body
func ValidateListCTFEventsNotFoundResponseBody(body *ListCTFEventsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListCTFEventsBadRequestResponseBody runs the validations defined on
// ListCTFEvents_bad_request_Response_Body
func ValidateListCTFEventsBadRequestResponseBody(body *ListCTFEventsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventUnauthorizedResponseBody runs the validations defined
// on CreateCTFEvent_unauthorized_Response_Body
func ValidateCreateCTFEventUnauthorizedResponseBody(body *CreateCTFEventUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventNotFoundResponseBody runs the validations defined on
// CreateCTFEvent_not_found_Response_Body
func ValidateCreateCTFEventNotFoundResponseBody(body *CreateCTFEventNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventBadRequestResponseBody runs the validations defined on
// CreateCTFEvent_bad_request_Response_Body
func ValidateCreateCTFEventBadRequestResponseBody(body *CreateCTFEventBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteCTFEventUnauthorizedResponseBody runs the validations defined
// on DeleteCTFEvent_unauthorized_Response_Body
func ValidateDeleteCTFEventUnauthorizedResponseBody(body *DeleteCTFEventUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteCTFEventNotFoundResponseBody runs the validations defined on
// DeleteCTFEvent_not_found_Response_Body
func ValidateDeleteCTFEventNotFoundResponseBody(body *DeleteCTFEventNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteCTFEventBadRequestResponseBody runs the validations defined on
// DeleteCTFEvent_bad_request_Response_Body
func ValidateDeleteCTFEventBadRequestResponseBody(body *DeleteCTFEventBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventImportTokenUnauthorizedResponseBody runs the
// validations defined on CreateCTFEventImportToken_unauthorized_Response_Body
func ValidateCreateCTFEventImportTokenUnauthorizedResponseBody(body *CreateCTFEventImportTokenUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventImportTokenNotFoundResponseBody runs the validations
// defined on CreateCTFEventImportToken_not_found_Response_Body
func ValidateCreateCTFEventImportTokenNotFoundResponseBody(body *CreateCTFEventImportTokenNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCTFEventImportTokenBadRequestResponseBody runs the validations
// defined on CreateCTFEventImportToken_bad_request_Response_Body
func ValidateCreateCTFEventImportTokenBadRequestResponseBody(body *CreateCTFEventImportTokenBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSsmAdminChallengeResponse runs the validations defined on
// SsmAdminChallengeResponse
func ValidateSsmAdminChallengeResponse(body *SsmAdminChallengeResponse) (err error) {
	if body.Files == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("files", "body"))
	}
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	for _, e := range body.Services {
		if e != nil {
			if err2 := ValidateChallengeServiceResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Files {
		if e != nil {
			if err2 := ValidateAdminChallengeFilesResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	for _, e := range body.Flags {
		if e != nil {
			if err2 := ValidateAdminChallengeFlagResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CategoryID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.category_id", *body.CategoryID, goa.FormatUUID))
	}
	return
}

// ValidateChallengeServiceResponse runs the validations defined on
// ChallengeServiceResponse
func ValidateChallengeServiceResponse(body *ChallengeServiceResponse) (err error) {
	if body.UserDisplay == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_display", "body"))
	}
	if body.Hyperlink == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hyperlink", "body"))
	}
	return
}

// ValidateAdminChallengeFilesResponse runs the validations defined on
// AdminChallengeFilesResponse
func ValidateAdminChallengeFilesResponse(body *AdminChallengeFilesResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateAdminChallengeFlagResponse runs the validations defined on
// AdminChallengeFlagResponse
func ValidateAdminChallengeFlagResponse(body *AdminChallengeFlagResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Flag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flag", "body"))
	}
	return
}

// ValidateChallengeSolverResponseBody runs the validations defined on
// ChallengeSolverResponseBody
func ValidateChallengeSolverResponseBody(body *ChallengeSolverResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.SolvedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solved_at", "body"))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", *body.UserID, goa.FormatUUID))
	}
	return
}

// ValidateChallengeSubmissionResponseBody runs the validations defined on
// ChallengeSubmissionResponseBody
func ValidateChallengeSubmissionResponseBody(body *ChallengeSubmissionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Input == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("input", "body"))
	}
	if body.Successful == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("successful", "body"))
	}
	if body.SubmittedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submitted_at", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", *body.UserID, goa.FormatUUID))
	}
	return
}

// ValidateMonthlyChallengeResponse runs the validations defined on
// MonthlyChallengeResponse
func ValidateMonthlyChallengeResponse(body *MonthlyChallengeResponse) (err error) {
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_date", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_date", "body"))
	}
	if body.DisplayMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("display_month", "body"))
	}
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.ChallengeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.challenge_id", *body.ChallengeID, goa.FormatUUID))
	}
	return
}

// ValidateSsmUserResponse runs the validations defined on SsmUserResponse
func ValidateSsmUserResponse(body *SsmUserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateCategoryResponse runs the validations defined on CategoryResponse
func ValidateCategoryResponse(body *CategoryResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateCTFEventResponse runs the validations defined on CTFEventResponse
func ValidateCTFEventResponse(body *CTFEventResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
