// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin HTTP server types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package server

import (
	admin "github.com/sakerhetsm/ssm-wargame/internal/gen/admin"
	adminviews "github.com/sakerhetsm/ssm-wargame/internal/gen/admin/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateChallengeRequestBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP request body.
type CreateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID  *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	StaticScore *int     `form:"static_score,omitempty" json:"static_score,omitempty" xml:"static_score,omitempty"`
	CategoryID  *string  `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	Authors     []string `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// UpdateChallengeRequestBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP request body.
type UpdateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID  *string  `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	StaticScore *int     `form:"static_score,omitempty" json:"static_score,omitempty" xml:"static_score,omitempty"`
	CategoryID  *string  `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	Authors     []string `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// PresignChallFileUploadRequestBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP request body.
type PresignChallFileUploadRequestBody struct {
	// MD5 hash of the file content in base64
	Md5      *string `form:"md5,omitempty" json:"md5,omitempty" xml:"md5,omitempty"`
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// the files number of bytes
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// CreateMonthlyChallengeRequestBody is the type of the "admin" service
// "CreateMonthlyChallenge" endpoint HTTP request body.
type CreateMonthlyChallengeRequestBody struct {
	ChallengeID *string `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	// The month(s) that the challenge is assigned for
	DisplayMonth *string `form:"display_month,omitempty" json:"display_month,omitempty" xml:"display_month,omitempty"`
	// Starting date of the monthly challenge
	StartDate *int64 `form:"start_date,omitempty" json:"start_date,omitempty" xml:"start_date,omitempty"`
	// Ending date of the monthly challenge
	EndDate *int64 `form:"end_date,omitempty" json:"end_date,omitempty" xml:"end_date,omitempty"`
}

// UpdateAuthorRequestBody is the type of the "admin" service "UpdateAuthor"
// endpoint HTTP request body.
type UpdateAuthorRequestBody struct {
	FullName    *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Sponsor     *bool   `form:"sponsor,omitempty" json:"sponsor,omitempty" xml:"sponsor,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	ImageURL    *string `form:"image_url,omitempty" json:"image_url,omitempty" xml:"image_url,omitempty"`
	Publish     *bool   `form:"publish,omitempty" json:"publish,omitempty" xml:"publish,omitempty"`
}

// CreateAuthorRequestBody is the type of the "admin" service "CreateAuthor"
// endpoint HTTP request body.
type CreateAuthorRequestBody struct {
	FullName    *string `form:"full_name,omitempty" json:"full_name,omitempty" xml:"full_name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Sponsor     *bool   `form:"sponsor,omitempty" json:"sponsor,omitempty" xml:"sponsor,omitempty"`
	Slug        *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	ImageURL    *string `form:"image_url,omitempty" json:"image_url,omitempty" xml:"image_url,omitempty"`
	Publish     *bool   `form:"publish,omitempty" json:"publish,omitempty" xml:"publish,omitempty"`
}

// AddFlagRequestBody is the type of the "admin" service "AddFlag" endpoint
// HTTP request body.
type AddFlagRequestBody struct {
	Flag *string `form:"flag,omitempty" json:"flag,omitempty" xml:"flag,omitempty"`
}

// ChalltoolsImportRequestBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP request body.
type ChalltoolsImportRequestBody struct {
	Title            *string                          `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description      *string                          `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Authors          []string                         `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
	Categories       []string                         `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
	Score            *int                             `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	ChallengeID      *string                          `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	FlagFormatPrefix *string                          `form:"flag_format_prefix,omitempty" json:"flag_format_prefix,omitempty" xml:"flag_format_prefix,omitempty"`
	FlagFormatSuffix *string                          `form:"flag_format_suffix,omitempty" json:"flag_format_suffix,omitempty" xml:"flag_format_suffix,omitempty"`
	FileUrls         []string                         `form:"file_urls,omitempty" json:"file_urls,omitempty" xml:"file_urls,omitempty"`
	Flags            []*ImportChallFlagRequestBody    `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
	Order            *int                             `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	Services         []*ImportChallServiceRequestBody `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
}

// CreateCTFEventRequestBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP request body.
type CreateCTFEventRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateCTFEventImportTokenRequestBody is the type of the "admin" service
// "CreateCTFEventImportToken" endpoint HTTP request body.
type CreateCTFEventImportTokenRequestBody struct {
	EventID *string `form:"event_id,omitempty" json:"event_id,omitempty" xml:"event_id,omitempty"`
}

// SsmAdminChallengeResponseCollection is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body.
type SsmAdminChallengeResponseCollection []*SsmAdminChallengeResponse

// GetChallengeMetaResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body.
type GetChallengeMetaResponseBody struct {
	Solvers     []*ChallengeSolverResponseBody     `form:"solvers" json:"solvers" xml:"solvers"`
	Submissions []*ChallengeSubmissionResponseBody `form:"submissions" json:"submissions" xml:"submissions"`
}

// PresignChallFileUploadResponseBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP response body.
type PresignChallFileUploadResponseBody struct {
	// Signed PutObject URL
	URL string `form:"url" json:"url" xml:"url"`
}

// ListMonthlyChallengesResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body.
type ListMonthlyChallengesResponseBody []*MonthlyChallengeResponse

// ListUsersResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*SsmUserResponse

// ListAuthorsResponseBody is the type of the "admin" service "ListAuthors"
// endpoint HTTP response body.
type ListAuthorsResponseBody []*AuthorResponse

// ListCategoriesResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body.
type ListCategoriesResponseBody []*CategoryResponse

// ListCTFEventsResponseBody is the type of the "admin" service "ListCTFEvents"
// endpoint HTTP response body.
type ListCTFEventsResponseBody []*CTFEventResponse

// CreateCTFEventImportTokenResponseBody is the type of the "admin" service
// "CreateCTFEventImportToken" endpoint HTTP response body.
type CreateCTFEventImportTokenResponseBody struct {
	Token string `form:"token" json:"token" xml:"token"`
}

// ListChallengesUnauthorizedResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "unauthorized" error.
type ListChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChallengesNotFoundResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "not_found" error.
type ListChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChallengesBadRequestResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "bad_request" error.
type ListChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetChallengeMetaUnauthorizedResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "unauthorized" error.
type GetChallengeMetaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetChallengeMetaNotFoundResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "not_found" error.
type GetChallengeMetaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetChallengeMetaBadRequestResponseBody is the type of the "admin" service
// "GetChallengeMeta" endpoint HTTP response body for the "bad_request" error.
type GetChallengeMetaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "unauthorized" error.
type CreateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeNotFoundResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "not_found" error.
type CreateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeBadRequestResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "bad_request" error.
type CreateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "unauthorized" error.
type UpdateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeNotFoundResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "not_found" error.
type UpdateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeBadRequestResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "bad_request" error.
type UpdateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadUnauthorizedResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "unauthorized" error.
type PresignChallFileUploadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadNotFoundResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "not_found" error.
type PresignChallFileUploadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadBadRequestResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "bad_request" error.
type PresignChallFileUploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesUnauthorizedResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "unauthorized" error.
type ListMonthlyChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesNotFoundResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body for the "not_found"
// error.
type ListMonthlyChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesBadRequestResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "bad_request" error.
type ListMonthlyChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type DeleteMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type DeleteMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "unauthorized" error.
type DeleteFileUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileNotFoundResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "not_found" error.
type DeleteFileNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileBadRequestResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "bad_request" error.
type DeleteFileBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type CreateMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type CreateMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type CreateMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersUnauthorizedResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "unauthorized" error.
type ListUsersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersNotFoundResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body for the "not_found" error.
type ListUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersBadRequestResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "bad_request" error.
type ListUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAuthorsUnauthorizedResponseBody is the type of the "admin" service
// "ListAuthors" endpoint HTTP response body for the "unauthorized" error.
type ListAuthorsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAuthorsNotFoundResponseBody is the type of the "admin" service
// "ListAuthors" endpoint HTTP response body for the "not_found" error.
type ListAuthorsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAuthorsBadRequestResponseBody is the type of the "admin" service
// "ListAuthors" endpoint HTTP response body for the "bad_request" error.
type ListAuthorsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateAuthorUnauthorizedResponseBody is the type of the "admin" service
// "UpdateAuthor" endpoint HTTP response body for the "unauthorized" error.
type UpdateAuthorUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateAuthorNotFoundResponseBody is the type of the "admin" service
// "UpdateAuthor" endpoint HTTP response body for the "not_found" error.
type UpdateAuthorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateAuthorBadRequestResponseBody is the type of the "admin" service
// "UpdateAuthor" endpoint HTTP response body for the "bad_request" error.
type UpdateAuthorBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAuthorUnauthorizedResponseBody is the type of the "admin" service
// "CreateAuthor" endpoint HTTP response body for the "unauthorized" error.
type CreateAuthorUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAuthorNotFoundResponseBody is the type of the "admin" service
// "CreateAuthor" endpoint HTTP response body for the "not_found" error.
type CreateAuthorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAuthorBadRequestResponseBody is the type of the "admin" service
// "CreateAuthor" endpoint HTTP response body for the "bad_request" error.
type CreateAuthorBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAuthorUnauthorizedResponseBody is the type of the "admin" service
// "DeleteAuthor" endpoint HTTP response body for the "unauthorized" error.
type DeleteAuthorUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAuthorNotFoundResponseBody is the type of the "admin" service
// "DeleteAuthor" endpoint HTTP response body for the "not_found" error.
type DeleteAuthorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAuthorBadRequestResponseBody is the type of the "admin" service
// "DeleteAuthor" endpoint HTTP response body for the "bad_request" error.
type DeleteAuthorBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagUnauthorizedResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "unauthorized" error.
type AddFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagNotFoundResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "not_found" error.
type AddFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagBadRequestResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "bad_request" error.
type AddFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "unauthorized" error.
type DeleteFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagNotFoundResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "not_found" error.
type DeleteFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagBadRequestResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "bad_request" error.
type DeleteFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCategoriesUnauthorizedResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "unauthorized" error.
type ListCategoriesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCategoriesNotFoundResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "not_found" error.
type ListCategoriesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCategoriesBadRequestResponseBody is the type of the "admin" service
// "ListCategories" endpoint HTTP response body for the "bad_request" error.
type ListCategoriesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChalltoolsImportUnauthorizedResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "unauthorized" error.
type ChalltoolsImportUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChalltoolsImportNotFoundResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "not_found" error.
type ChalltoolsImportNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChalltoolsImportBadRequestResponseBody is the type of the "admin" service
// "ChalltoolsImport" endpoint HTTP response body for the "bad_request" error.
type ChalltoolsImportBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCTFEventsUnauthorizedResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "unauthorized" error.
type ListCTFEventsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCTFEventsNotFoundResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "not_found" error.
type ListCTFEventsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListCTFEventsBadRequestResponseBody is the type of the "admin" service
// "ListCTFEvents" endpoint HTTP response body for the "bad_request" error.
type ListCTFEventsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventUnauthorizedResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "unauthorized" error.
type CreateCTFEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventNotFoundResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "not_found" error.
type CreateCTFEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventBadRequestResponseBody is the type of the "admin" service
// "CreateCTFEvent" endpoint HTTP response body for the "bad_request" error.
type CreateCTFEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCTFEventUnauthorizedResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "unauthorized" error.
type DeleteCTFEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCTFEventNotFoundResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "not_found" error.
type DeleteCTFEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCTFEventBadRequestResponseBody is the type of the "admin" service
// "DeleteCTFEvent" endpoint HTTP response body for the "bad_request" error.
type DeleteCTFEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventImportTokenUnauthorizedResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "unauthorized" error.
type CreateCTFEventImportTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventImportTokenNotFoundResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "not_found" error.
type CreateCTFEventImportTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCTFEventImportTokenBadRequestResponseBody is the type of the "admin"
// service "CreateCTFEventImportToken" endpoint HTTP response body for the
// "bad_request" error.
type CreateCTFEventImportTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SsmAdminChallengeResponse is used to define fields on response body types.
type SsmAdminChallengeResponse struct {
	ID string `form:"id" json:"id" xml:"id"`
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string                         `form:"description" json:"description" xml:"description"`
	Services    []*ChallengeServiceResponse    `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files       []*AdminChallengeFilesResponse `form:"files" json:"files" xml:"files"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The numer of people who solved the challenge
	Solves int `form:"solves" json:"solves" xml:"solves"`
	// The ID of the CTF the challenge was taken from
	CtfEventID  *string                       `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
	Flags       []*AdminChallengeFlagResponse `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
	StaticScore *int                          `form:"static_score,omitempty" json:"static_score,omitempty" xml:"static_score,omitempty"`
	CategoryID  string                        `form:"category_id" json:"category_id" xml:"category_id"`
	Authors     []string                      `form:"authors,omitempty" json:"authors,omitempty" xml:"authors,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
	UserDisplay string `form:"user_display" json:"user_display" xml:"user_display"`
	Hyperlink   bool   `form:"hyperlink" json:"hyperlink" xml:"hyperlink"`
}

// AdminChallengeFilesResponse is used to define fields on response body types.
type AdminChallengeFilesResponse struct {
	ID       string `form:"id" json:"id" xml:"id"`
	Filename string `form:"filename" json:"filename" xml:"filename"`
	URL      string `form:"url" json:"url" xml:"url"`
}

// AdminChallengeFlagResponse is used to define fields on response body types.
type AdminChallengeFlagResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Flag string `form:"flag" json:"flag" xml:"flag"`
}

// ChallengeSolverResponseBody is used to define fields on response body types.
type ChallengeSolverResponseBody struct {
	UserID   string `form:"user_id" json:"user_id" xml:"user_id"`
	SolvedAt int64  `form:"solved_at" json:"solved_at" xml:"solved_at"`
}

// ChallengeSubmissionResponseBody is used to define fields on response body
// types.
type ChallengeSubmissionResponseBody struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Input       string `form:"input" json:"input" xml:"input"`
	Successful  bool   `form:"successful" json:"successful" xml:"successful"`
	UserID      string `form:"user_id" json:"user_id" xml:"user_id"`
	SubmittedAt int64  `form:"submitted_at" json:"submitted_at" xml:"submitted_at"`
}

// MonthlyChallengeResponse is used to define fields on response body types.
type MonthlyChallengeResponse struct {
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// The month(s) that the challenge is assigned for
	DisplayMonth string `form:"display_month" json:"display_month" xml:"display_month"`
	// Starting date of the monthly challenge
	StartDate int64 `form:"start_date" json:"start_date" xml:"start_date"`
	// Ending date of the monthly challenge
	EndDate int64 `form:"end_date" json:"end_date" xml:"end_date"`
}

// SsmUserResponse is used to define fields on response body types.
type SsmUserResponse struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Email    string  `form:"email" json:"email" xml:"email"`
	FullName string  `form:"full_name" json:"full_name" xml:"full_name"`
	Role     string  `form:"role" json:"role" xml:"role"`
	SchoolID *string `form:"school_id,omitempty" json:"school_id,omitempty" xml:"school_id,omitempty"`
}

// AuthorResponse is used to define fields on response body types.
type AuthorResponse struct {
	ID          string  `form:"id" json:"id" xml:"id"`
	FullName    string  `form:"full_name" json:"full_name" xml:"full_name"`
	Description string  `form:"description" json:"description" xml:"description"`
	Sponsor     bool    `form:"sponsor" json:"sponsor" xml:"sponsor"`
	Slug        string  `form:"slug" json:"slug" xml:"slug"`
	ImageURL    *string `form:"image_url,omitempty" json:"image_url,omitempty" xml:"image_url,omitempty"`
	Publish     bool    `form:"publish" json:"publish" xml:"publish"`
}

// CategoryResponse is used to define fields on response body types.
type CategoryResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// CTFEventResponse is used to define fields on response body types.
type CTFEventResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// ImportChallFlagRequestBody is used to define fields on request body types.
type ImportChallFlagRequestBody struct {
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Flag *string `form:"flag,omitempty" json:"flag,omitempty" xml:"flag,omitempty"`
}

// ImportChallServiceRequestBody is used to define fields on request body types.
type ImportChallServiceRequestBody struct {
	UserDisplay *string `form:"user_display,omitempty" json:"user_display,omitempty" xml:"user_display,omitempty"`
	Hyperlink   *bool   `form:"hyperlink,omitempty" json:"hyperlink,omitempty" xml:"hyperlink,omitempty"`
}

// NewSsmAdminChallengeResponseCollection builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewSsmAdminChallengeResponseCollection(res adminviews.SsmAdminChallengeCollectionView) SsmAdminChallengeResponseCollection {
	body := make([]*SsmAdminChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminviewsSsmAdminChallengeViewToSsmAdminChallengeResponse(val)
	}
	return body
}

// NewGetChallengeMetaResponseBody builds the HTTP response body from the
// result of the "GetChallengeMeta" endpoint of the "admin" service.
func NewGetChallengeMetaResponseBody(res *admin.ChallengeMeta) *GetChallengeMetaResponseBody {
	body := &GetChallengeMetaResponseBody{}
	if res.Solvers != nil {
		body.Solvers = make([]*ChallengeSolverResponseBody, len(res.Solvers))
		for i, val := range res.Solvers {
			body.Solvers[i] = marshalAdminChallengeSolverToChallengeSolverResponseBody(val)
		}
	}
	if res.Submissions != nil {
		body.Submissions = make([]*ChallengeSubmissionResponseBody, len(res.Submissions))
		for i, val := range res.Submissions {
			body.Submissions[i] = marshalAdminChallengeSubmissionToChallengeSubmissionResponseBody(val)
		}
	}
	return body
}

// NewPresignChallFileUploadResponseBody builds the HTTP response body from the
// result of the "PresignChallFileUpload" endpoint of the "admin" service.
func NewPresignChallFileUploadResponseBody(res *admin.PresignChallFileUploadResult) *PresignChallFileUploadResponseBody {
	body := &PresignChallFileUploadResponseBody{
		URL: res.URL,
	}
	return body
}

// NewListMonthlyChallengesResponseBody builds the HTTP response body from the
// result of the "ListMonthlyChallenges" endpoint of the "admin" service.
func NewListMonthlyChallengesResponseBody(res []*admin.MonthlyChallenge) ListMonthlyChallengesResponseBody {
	body := make([]*MonthlyChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminMonthlyChallengeToMonthlyChallengeResponse(val)
	}
	return body
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "ListUsers" endpoint of the "admin" service.
func NewListUsersResponseBody(res []*admin.SsmUser) ListUsersResponseBody {
	body := make([]*SsmUserResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminSsmUserToSsmUserResponse(val)
	}
	return body
}

// NewListAuthorsResponseBody builds the HTTP response body from the result of
// the "ListAuthors" endpoint of the "admin" service.
func NewListAuthorsResponseBody(res []*admin.Author) ListAuthorsResponseBody {
	body := make([]*AuthorResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminAuthorToAuthorResponse(val)
	}
	return body
}

// NewListCategoriesResponseBody builds the HTTP response body from the result
// of the "ListCategories" endpoint of the "admin" service.
func NewListCategoriesResponseBody(res []*admin.Category) ListCategoriesResponseBody {
	body := make([]*CategoryResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminCategoryToCategoryResponse(val)
	}
	return body
}

// NewListCTFEventsResponseBody builds the HTTP response body from the result
// of the "ListCTFEvents" endpoint of the "admin" service.
func NewListCTFEventsResponseBody(res []*admin.CTFEvent) ListCTFEventsResponseBody {
	body := make([]*CTFEventResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminCTFEventToCTFEventResponse(val)
	}
	return body
}

// NewCreateCTFEventImportTokenResponseBody builds the HTTP response body from
// the result of the "CreateCTFEventImportToken" endpoint of the "admin"
// service.
func NewCreateCTFEventImportTokenResponseBody(res *admin.CreateCTFEventImportTokenResult) *CreateCTFEventImportTokenResponseBody {
	body := &CreateCTFEventImportTokenResponseBody{
		Token: res.Token,
	}
	return body
}

// NewListChallengesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesUnauthorizedResponseBody(res *goa.ServiceError) *ListChallengesUnauthorizedResponseBody {
	body := &ListChallengesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesNotFoundResponseBody builds the HTTP response body from the
// result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesNotFoundResponseBody(res *goa.ServiceError) *ListChallengesNotFoundResponseBody {
	body := &ListChallengesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesBadRequestResponseBody builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesBadRequestResponseBody(res *goa.ServiceError) *ListChallengesBadRequestResponseBody {
	body := &ListChallengesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetChallengeMetaUnauthorizedResponseBody builds the HTTP response body
// from the result of the "GetChallengeMeta" endpoint of the "admin" service.
func NewGetChallengeMetaUnauthorizedResponseBody(res *goa.ServiceError) *GetChallengeMetaUnauthorizedResponseBody {
	body := &GetChallengeMetaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetChallengeMetaNotFoundResponseBody builds the HTTP response body from
// the result of the "GetChallengeMeta" endpoint of the "admin" service.
func NewGetChallengeMetaNotFoundResponseBody(res *goa.ServiceError) *GetChallengeMetaNotFoundResponseBody {
	body := &GetChallengeMetaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetChallengeMetaBadRequestResponseBody builds the HTTP response body from
// the result of the "GetChallengeMeta" endpoint of the "admin" service.
func NewGetChallengeMetaBadRequestResponseBody(res *goa.ServiceError) *GetChallengeMetaBadRequestResponseBody {
	body := &GetChallengeMetaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeUnauthorizedResponseBody(res *goa.ServiceError) *CreateChallengeUnauthorizedResponseBody {
	body := &CreateChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeNotFoundResponseBody builds the HTTP response body from
// the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeNotFoundResponseBody(res *goa.ServiceError) *CreateChallengeNotFoundResponseBody {
	body := &CreateChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeBadRequestResponseBody builds the HTTP response body from
// the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeBadRequestResponseBody(res *goa.ServiceError) *CreateChallengeBadRequestResponseBody {
	body := &CreateChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeUnauthorizedResponseBody(res *goa.ServiceError) *UpdateChallengeUnauthorizedResponseBody {
	body := &UpdateChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeNotFoundResponseBody builds the HTTP response body from
// the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeNotFoundResponseBody(res *goa.ServiceError) *UpdateChallengeNotFoundResponseBody {
	body := &UpdateChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeBadRequestResponseBody builds the HTTP response body from
// the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeBadRequestResponseBody(res *goa.ServiceError) *UpdateChallengeBadRequestResponseBody {
	body := &UpdateChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadUnauthorizedResponseBody builds the HTTP response
// body from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadUnauthorizedResponseBody(res *goa.ServiceError) *PresignChallFileUploadUnauthorizedResponseBody {
	body := &PresignChallFileUploadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadNotFoundResponseBody builds the HTTP response body
// from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadNotFoundResponseBody(res *goa.ServiceError) *PresignChallFileUploadNotFoundResponseBody {
	body := &PresignChallFileUploadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadBadRequestResponseBody builds the HTTP response
// body from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadBadRequestResponseBody(res *goa.ServiceError) *PresignChallFileUploadBadRequestResponseBody {
	body := &PresignChallFileUploadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesUnauthorizedResponseBody builds the HTTP response
// body from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesUnauthorizedResponseBody(res *goa.ServiceError) *ListMonthlyChallengesUnauthorizedResponseBody {
	body := &ListMonthlyChallengesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesNotFoundResponseBody builds the HTTP response body
// from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesNotFoundResponseBody(res *goa.ServiceError) *ListMonthlyChallengesNotFoundResponseBody {
	body := &ListMonthlyChallengesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesBadRequestResponseBody builds the HTTP response body
// from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesBadRequestResponseBody(res *goa.ServiceError) *ListMonthlyChallengesBadRequestResponseBody {
	body := &ListMonthlyChallengesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeUnauthorizedResponseBody builds the HTTP response
// body from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeUnauthorizedResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeUnauthorizedResponseBody {
	body := &DeleteMonthlyChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeNotFoundResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeNotFoundResponseBody {
	body := &DeleteMonthlyChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeBadRequestResponseBody builds the HTTP response
// body from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeBadRequestResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeBadRequestResponseBody {
	body := &DeleteMonthlyChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileUnauthorizedResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileUnauthorizedResponseBody(res *goa.ServiceError) *DeleteFileUnauthorizedResponseBody {
	body := &DeleteFileUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileNotFoundResponseBody(res *goa.ServiceError) *DeleteFileNotFoundResponseBody {
	body := &DeleteFileNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileBadRequestResponseBody(res *goa.ServiceError) *DeleteFileBadRequestResponseBody {
	body := &DeleteFileBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeUnauthorizedResponseBody builds the HTTP response
// body from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeUnauthorizedResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeUnauthorizedResponseBody {
	body := &CreateMonthlyChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeNotFoundResponseBody builds the HTTP response body
// from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeNotFoundResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeNotFoundResponseBody {
	body := &CreateMonthlyChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeBadRequestResponseBody builds the HTTP response
// body from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeBadRequestResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeBadRequestResponseBody {
	body := &CreateMonthlyChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersUnauthorizedResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersUnauthorizedResponseBody(res *goa.ServiceError) *ListUsersUnauthorizedResponseBody {
	body := &ListUsersUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersNotFoundResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersNotFoundResponseBody(res *goa.ServiceError) *ListUsersNotFoundResponseBody {
	body := &ListUsersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersBadRequestResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersBadRequestResponseBody(res *goa.ServiceError) *ListUsersBadRequestResponseBody {
	body := &ListUsersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAuthorsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ListAuthors" endpoint of the "admin" service.
func NewListAuthorsUnauthorizedResponseBody(res *goa.ServiceError) *ListAuthorsUnauthorizedResponseBody {
	body := &ListAuthorsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAuthorsNotFoundResponseBody builds the HTTP response body from the
// result of the "ListAuthors" endpoint of the "admin" service.
func NewListAuthorsNotFoundResponseBody(res *goa.ServiceError) *ListAuthorsNotFoundResponseBody {
	body := &ListAuthorsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAuthorsBadRequestResponseBody builds the HTTP response body from the
// result of the "ListAuthors" endpoint of the "admin" service.
func NewListAuthorsBadRequestResponseBody(res *goa.ServiceError) *ListAuthorsBadRequestResponseBody {
	body := &ListAuthorsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateAuthorUnauthorizedResponseBody builds the HTTP response body from
// the result of the "UpdateAuthor" endpoint of the "admin" service.
func NewUpdateAuthorUnauthorizedResponseBody(res *goa.ServiceError) *UpdateAuthorUnauthorizedResponseBody {
	body := &UpdateAuthorUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateAuthorNotFoundResponseBody builds the HTTP response body from the
// result of the "UpdateAuthor" endpoint of the "admin" service.
func NewUpdateAuthorNotFoundResponseBody(res *goa.ServiceError) *UpdateAuthorNotFoundResponseBody {
	body := &UpdateAuthorNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateAuthorBadRequestResponseBody builds the HTTP response body from the
// result of the "UpdateAuthor" endpoint of the "admin" service.
func NewUpdateAuthorBadRequestResponseBody(res *goa.ServiceError) *UpdateAuthorBadRequestResponseBody {
	body := &UpdateAuthorBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAuthorUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateAuthor" endpoint of the "admin" service.
func NewCreateAuthorUnauthorizedResponseBody(res *goa.ServiceError) *CreateAuthorUnauthorizedResponseBody {
	body := &CreateAuthorUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAuthorNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateAuthor" endpoint of the "admin" service.
func NewCreateAuthorNotFoundResponseBody(res *goa.ServiceError) *CreateAuthorNotFoundResponseBody {
	body := &CreateAuthorNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAuthorBadRequestResponseBody builds the HTTP response body from the
// result of the "CreateAuthor" endpoint of the "admin" service.
func NewCreateAuthorBadRequestResponseBody(res *goa.ServiceError) *CreateAuthorBadRequestResponseBody {
	body := &CreateAuthorBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAuthorUnauthorizedResponseBody builds the HTTP response body from
// the result of the "DeleteAuthor" endpoint of the "admin" service.
func NewDeleteAuthorUnauthorizedResponseBody(res *goa.ServiceError) *DeleteAuthorUnauthorizedResponseBody {
	body := &DeleteAuthorUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAuthorNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteAuthor" endpoint of the "admin" service.
func NewDeleteAuthorNotFoundResponseBody(res *goa.ServiceError) *DeleteAuthorNotFoundResponseBody {
	body := &DeleteAuthorNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAuthorBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteAuthor" endpoint of the "admin" service.
func NewDeleteAuthorBadRequestResponseBody(res *goa.ServiceError) *DeleteAuthorBadRequestResponseBody {
	body := &DeleteAuthorBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagUnauthorizedResponseBody builds the HTTP response body from the
// result of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagUnauthorizedResponseBody(res *goa.ServiceError) *AddFlagUnauthorizedResponseBody {
	body := &AddFlagUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagNotFoundResponseBody builds the HTTP response body from the result
// of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagNotFoundResponseBody(res *goa.ServiceError) *AddFlagNotFoundResponseBody {
	body := &AddFlagNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagBadRequestResponseBody builds the HTTP response body from the
// result of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagBadRequestResponseBody(res *goa.ServiceError) *AddFlagBadRequestResponseBody {
	body := &AddFlagBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagUnauthorizedResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagUnauthorizedResponseBody(res *goa.ServiceError) *DeleteFlagUnauthorizedResponseBody {
	body := &DeleteFlagUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagNotFoundResponseBody(res *goa.ServiceError) *DeleteFlagNotFoundResponseBody {
	body := &DeleteFlagNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagBadRequestResponseBody(res *goa.ServiceError) *DeleteFlagBadRequestResponseBody {
	body := &DeleteFlagBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCategoriesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ListCategories" endpoint of the "admin" service.
func NewListCategoriesUnauthorizedResponseBody(res *goa.ServiceError) *ListCategoriesUnauthorizedResponseBody {
	body := &ListCategoriesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCategoriesNotFoundResponseBody builds the HTTP response body from the
// result of the "ListCategories" endpoint of the "admin" service.
func NewListCategoriesNotFoundResponseBody(res *goa.ServiceError) *ListCategoriesNotFoundResponseBody {
	body := &ListCategoriesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCategoriesBadRequestResponseBody builds the HTTP response body from
// the result of the "ListCategories" endpoint of the "admin" service.
func NewListCategoriesBadRequestResponseBody(res *goa.ServiceError) *ListCategoriesBadRequestResponseBody {
	body := &ListCategoriesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChalltoolsImportUnauthorizedResponseBody builds the HTTP response body
// from the result of the "ChalltoolsImport" endpoint of the "admin" service.
func NewChalltoolsImportUnauthorizedResponseBody(res *goa.ServiceError) *ChalltoolsImportUnauthorizedResponseBody {
	body := &ChalltoolsImportUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChalltoolsImportNotFoundResponseBody builds the HTTP response body from
// the result of the "ChalltoolsImport" endpoint of the "admin" service.
func NewChalltoolsImportNotFoundResponseBody(res *goa.ServiceError) *ChalltoolsImportNotFoundResponseBody {
	body := &ChalltoolsImportNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChalltoolsImportBadRequestResponseBody builds the HTTP response body from
// the result of the "ChalltoolsImport" endpoint of the "admin" service.
func NewChalltoolsImportBadRequestResponseBody(res *goa.ServiceError) *ChalltoolsImportBadRequestResponseBody {
	body := &ChalltoolsImportBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCTFEventsUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ListCTFEvents" endpoint of the "admin" service.
func NewListCTFEventsUnauthorizedResponseBody(res *goa.ServiceError) *ListCTFEventsUnauthorizedResponseBody {
	body := &ListCTFEventsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCTFEventsNotFoundResponseBody builds the HTTP response body from the
// result of the "ListCTFEvents" endpoint of the "admin" service.
func NewListCTFEventsNotFoundResponseBody(res *goa.ServiceError) *ListCTFEventsNotFoundResponseBody {
	body := &ListCTFEventsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListCTFEventsBadRequestResponseBody builds the HTTP response body from
// the result of the "ListCTFEvents" endpoint of the "admin" service.
func NewListCTFEventsBadRequestResponseBody(res *goa.ServiceError) *ListCTFEventsBadRequestResponseBody {
	body := &ListCTFEventsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateCTFEvent" endpoint of the "admin" service.
func NewCreateCTFEventUnauthorizedResponseBody(res *goa.ServiceError) *CreateCTFEventUnauthorizedResponseBody {
	body := &CreateCTFEventUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateCTFEvent" endpoint of the "admin" service.
func NewCreateCTFEventNotFoundResponseBody(res *goa.ServiceError) *CreateCTFEventNotFoundResponseBody {
	body := &CreateCTFEventNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventBadRequestResponseBody builds the HTTP response body from
// the result of the "CreateCTFEvent" endpoint of the "admin" service.
func NewCreateCTFEventBadRequestResponseBody(res *goa.ServiceError) *CreateCTFEventBadRequestResponseBody {
	body := &CreateCTFEventBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCTFEventUnauthorizedResponseBody builds the HTTP response body from
// the result of the "DeleteCTFEvent" endpoint of the "admin" service.
func NewDeleteCTFEventUnauthorizedResponseBody(res *goa.ServiceError) *DeleteCTFEventUnauthorizedResponseBody {
	body := &DeleteCTFEventUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCTFEventNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteCTFEvent" endpoint of the "admin" service.
func NewDeleteCTFEventNotFoundResponseBody(res *goa.ServiceError) *DeleteCTFEventNotFoundResponseBody {
	body := &DeleteCTFEventNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCTFEventBadRequestResponseBody builds the HTTP response body from
// the result of the "DeleteCTFEvent" endpoint of the "admin" service.
func NewDeleteCTFEventBadRequestResponseBody(res *goa.ServiceError) *DeleteCTFEventBadRequestResponseBody {
	body := &DeleteCTFEventBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventImportTokenUnauthorizedResponseBody builds the HTTP
// response body from the result of the "CreateCTFEventImportToken" endpoint of
// the "admin" service.
func NewCreateCTFEventImportTokenUnauthorizedResponseBody(res *goa.ServiceError) *CreateCTFEventImportTokenUnauthorizedResponseBody {
	body := &CreateCTFEventImportTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventImportTokenNotFoundResponseBody builds the HTTP response
// body from the result of the "CreateCTFEventImportToken" endpoint of the
// "admin" service.
func NewCreateCTFEventImportTokenNotFoundResponseBody(res *goa.ServiceError) *CreateCTFEventImportTokenNotFoundResponseBody {
	body := &CreateCTFEventImportTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCTFEventImportTokenBadRequestResponseBody builds the HTTP response
// body from the result of the "CreateCTFEventImportToken" endpoint of the
// "admin" service.
func NewCreateCTFEventImportTokenBadRequestResponseBody(res *goa.ServiceError) *CreateCTFEventImportTokenBadRequestResponseBody {
	body := &CreateCTFEventImportTokenBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesPayload builds a admin service ListChallenges endpoint
// payload.
func NewListChallengesPayload(token string) *admin.ListChallengesPayload {
	v := &admin.ListChallengesPayload{}
	v.Token = token

	return v
}

// NewGetChallengeMetaPayload builds a admin service GetChallengeMeta endpoint
// payload.
func NewGetChallengeMetaPayload(challengeID string, token string) *admin.GetChallengeMetaPayload {
	v := &admin.GetChallengeMetaPayload{}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewCreateChallengePayload builds a admin service CreateChallenge endpoint
// payload.
func NewCreateChallengePayload(body *CreateChallengeRequestBody, token string) *admin.CreateChallengePayload {
	v := &admin.CreateChallengePayload{
		Slug:        *body.Slug,
		Title:       *body.Title,
		Description: *body.Description,
		PublishAt:   body.PublishAt,
		CtfEventID:  body.CtfEventID,
		StaticScore: body.StaticScore,
		CategoryID:  *body.CategoryID,
	}
	if body.Authors != nil {
		v.Authors = make([]string, len(body.Authors))
		for i, val := range body.Authors {
			v.Authors[i] = val
		}
	}
	v.Token = token

	return v
}

// NewUpdateChallengePayload builds a admin service UpdateChallenge endpoint
// payload.
func NewUpdateChallengePayload(body *UpdateChallengeRequestBody, challengeID string, token string) *admin.UpdateChallengePayload {
	v := &admin.UpdateChallengePayload{
		Slug:        *body.Slug,
		Title:       *body.Title,
		Description: *body.Description,
		PublishAt:   body.PublishAt,
		CtfEventID:  body.CtfEventID,
		StaticScore: body.StaticScore,
		CategoryID:  *body.CategoryID,
	}
	if body.Authors != nil {
		v.Authors = make([]string, len(body.Authors))
		for i, val := range body.Authors {
			v.Authors[i] = val
		}
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewPresignChallFileUploadPayload builds a admin service
// PresignChallFileUpload endpoint payload.
func NewPresignChallFileUploadPayload(body *PresignChallFileUploadRequestBody, challengeID string, token string) *admin.PresignChallFileUploadPayload {
	v := &admin.PresignChallFileUploadPayload{
		Md5:      *body.Md5,
		Filename: *body.Filename,
		Size:     *body.Size,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewListMonthlyChallengesPayload builds a admin service ListMonthlyChallenges
// endpoint payload.
func NewListMonthlyChallengesPayload(token string) *admin.ListMonthlyChallengesPayload {
	v := &admin.ListMonthlyChallengesPayload{}
	v.Token = token

	return v
}

// NewDeleteMonthlyChallengePayload builds a admin service
// DeleteMonthlyChallenge endpoint payload.
func NewDeleteMonthlyChallengePayload(challengeID string, token string) *admin.DeleteMonthlyChallengePayload {
	v := &admin.DeleteMonthlyChallengePayload{}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewDeleteFilePayload builds a admin service DeleteFile endpoint payload.
func NewDeleteFilePayload(fileID string, token string) *admin.DeleteFilePayload {
	v := &admin.DeleteFilePayload{}
	v.FileID = fileID
	v.Token = token

	return v
}

// NewCreateMonthlyChallengePayload builds a admin service
// CreateMonthlyChallenge endpoint payload.
func NewCreateMonthlyChallengePayload(body *CreateMonthlyChallengeRequestBody, token string) *admin.CreateMonthlyChallengePayload {
	v := &admin.CreateMonthlyChallengePayload{
		ChallengeID:  *body.ChallengeID,
		DisplayMonth: *body.DisplayMonth,
		StartDate:    *body.StartDate,
		EndDate:      *body.EndDate,
	}
	v.Token = token

	return v
}

// NewListUsersPayload builds a admin service ListUsers endpoint payload.
func NewListUsersPayload(token string) *admin.ListUsersPayload {
	v := &admin.ListUsersPayload{}
	v.Token = token

	return v
}

// NewListAuthorsPayload builds a admin service ListAuthors endpoint payload.
func NewListAuthorsPayload(token string) *admin.ListAuthorsPayload {
	v := &admin.ListAuthorsPayload{}
	v.Token = token

	return v
}

// NewUpdateAuthorPayload builds a admin service UpdateAuthor endpoint payload.
func NewUpdateAuthorPayload(body *UpdateAuthorRequestBody, id string, token string) *admin.UpdateAuthorPayload {
	v := &admin.UpdateAuthorPayload{
		FullName:    *body.FullName,
		Description: *body.Description,
		Sponsor:     *body.Sponsor,
		Slug:        *body.Slug,
		ImageURL:    body.ImageURL,
		Publish:     *body.Publish,
	}
	v.ID = id
	v.Token = token

	return v
}

// NewCreateAuthorPayload builds a admin service CreateAuthor endpoint payload.
func NewCreateAuthorPayload(body *CreateAuthorRequestBody, token string) *admin.CreateAuthorPayload {
	v := &admin.CreateAuthorPayload{
		FullName:    *body.FullName,
		Description: *body.Description,
		Sponsor:     *body.Sponsor,
		Slug:        *body.Slug,
		ImageURL:    body.ImageURL,
		Publish:     *body.Publish,
	}
	v.Token = token

	return v
}

// NewDeleteAuthorPayload builds a admin service DeleteAuthor endpoint payload.
func NewDeleteAuthorPayload(id string, token string) *admin.DeleteAuthorPayload {
	v := &admin.DeleteAuthorPayload{}
	v.ID = id
	v.Token = token

	return v
}

// NewAddFlagPayload builds a admin service AddFlag endpoint payload.
func NewAddFlagPayload(body *AddFlagRequestBody, challengeID string, token string) *admin.AddFlagPayload {
	v := &admin.AddFlagPayload{
		Flag: *body.Flag,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewDeleteFlagPayload builds a admin service DeleteFlag endpoint payload.
func NewDeleteFlagPayload(challengeID string, flagID string, token string) *admin.DeleteFlagPayload {
	v := &admin.DeleteFlagPayload{}
	v.ChallengeID = challengeID
	v.FlagID = flagID
	v.Token = token

	return v
}

// NewListCategoriesPayload builds a admin service ListCategories endpoint
// payload.
func NewListCategoriesPayload(token string) *admin.ListCategoriesPayload {
	v := &admin.ListCategoriesPayload{}
	v.Token = token

	return v
}

// NewChalltoolsImportPayload builds a admin service ChalltoolsImport endpoint
// payload.
func NewChalltoolsImportPayload(body *ChalltoolsImportRequestBody, importToken string) *admin.ChalltoolsImportPayload {
	v := &admin.ChalltoolsImportPayload{
		Title:            *body.Title,
		Description:      *body.Description,
		Score:            body.Score,
		ChallengeID:      *body.ChallengeID,
		FlagFormatPrefix: body.FlagFormatPrefix,
		FlagFormatSuffix: body.FlagFormatSuffix,
		Order:            body.Order,
	}
	if body.Authors != nil {
		v.Authors = make([]string, len(body.Authors))
		for i, val := range body.Authors {
			v.Authors[i] = val
		}
	}
	if body.Categories != nil {
		v.Categories = make([]string, len(body.Categories))
		for i, val := range body.Categories {
			v.Categories[i] = val
		}
	}
	if body.FileUrls != nil {
		v.FileUrls = make([]string, len(body.FileUrls))
		for i, val := range body.FileUrls {
			v.FileUrls[i] = val
		}
	}
	if body.Flags != nil {
		v.Flags = make([]*admin.ImportChallFlag, len(body.Flags))
		for i, val := range body.Flags {
			v.Flags[i] = unmarshalImportChallFlagRequestBodyToAdminImportChallFlag(val)
		}
	}
	if body.Services != nil {
		v.Services = make([]*admin.ImportChallService, len(body.Services))
		for i, val := range body.Services {
			v.Services[i] = unmarshalImportChallServiceRequestBodyToAdminImportChallService(val)
		}
	}
	v.ImportToken = importToken

	return v
}

// NewListCTFEventsPayload builds a admin service ListCTFEvents endpoint
// payload.
func NewListCTFEventsPayload(token string) *admin.ListCTFEventsPayload {
	v := &admin.ListCTFEventsPayload{}
	v.Token = token

	return v
}

// NewCreateCTFEventPayload builds a admin service CreateCTFEvent endpoint
// payload.
func NewCreateCTFEventPayload(body *CreateCTFEventRequestBody, token string) *admin.CreateCTFEventPayload {
	v := &admin.CreateCTFEventPayload{
		Name: *body.Name,
	}
	v.Token = token

	return v
}

// NewDeleteCTFEventPayload builds a admin service DeleteCTFEvent endpoint
// payload.
func NewDeleteCTFEventPayload(id string, token string) *admin.DeleteCTFEventPayload {
	v := &admin.DeleteCTFEventPayload{}
	v.ID = id
	v.Token = token

	return v
}

// NewCreateCTFEventImportTokenPayload builds a admin service
// CreateCTFEventImportToken endpoint payload.
func NewCreateCTFEventImportTokenPayload(body *CreateCTFEventImportTokenRequestBody, token string) *admin.CreateCTFEventImportTokenPayload {
	v := &admin.CreateCTFEventImportTokenPayload{
		EventID: body.EventID,
	}
	v.Token = token

	return v
}

// ValidateCreateChallengeRequestBody runs the validations defined on
// CreateChallengeRequestBody
func ValidateCreateChallengeRequestBody(body *CreateChallengeRequestBody) (err error) {
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	if body.CategoryID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.category_id", *body.CategoryID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateChallengeRequestBody runs the validations defined on
// UpdateChallengeRequestBody
func ValidateUpdateChallengeRequestBody(body *UpdateChallengeRequestBody) (err error) {
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	if body.CategoryID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.category_id", *body.CategoryID, goa.FormatUUID))
	}
	return
}

// ValidatePresignChallFileUploadRequestBody runs the validations defined on
// PresignChallFileUploadRequestBody
func ValidatePresignChallFileUploadRequestBody(body *PresignChallFileUploadRequestBody) (err error) {
	if body.Md5 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("md5", "body"))
	}
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	return
}

// ValidateCreateMonthlyChallengeRequestBody runs the validations defined on
// CreateMonthlyChallengeRequestBody
func ValidateCreateMonthlyChallengeRequestBody(body *CreateMonthlyChallengeRequestBody) (err error) {
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_date", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_date", "body"))
	}
	if body.DisplayMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("display_month", "body"))
	}
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.ChallengeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.challenge_id", *body.ChallengeID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateAuthorRequestBody runs the validations defined on
// UpdateAuthorRequestBody
func ValidateUpdateAuthorRequestBody(body *UpdateAuthorRequestBody) (err error) {
	if body.Sponsor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sponsor", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Publish == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publish", "body"))
	}
	return
}

// ValidateCreateAuthorRequestBody runs the validations defined on
// CreateAuthorRequestBody
func ValidateCreateAuthorRequestBody(body *CreateAuthorRequestBody) (err error) {
	if body.Sponsor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sponsor", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("full_name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Publish == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publish", "body"))
	}
	return
}

// ValidateAddFlagRequestBody runs the validations defined on AddFlagRequestBody
func ValidateAddFlagRequestBody(body *AddFlagRequestBody) (err error) {
	if body.Flag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flag", "body"))
	}
	return
}

// ValidateChalltoolsImportRequestBody runs the validations defined on
// ChalltoolsImportRequestBody
func ValidateChalltoolsImportRequestBody(body *ChalltoolsImportRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.ChallengeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.challenge_id", *body.ChallengeID, goa.FormatUUID))
	}
	for _, e := range body.Flags {
		if e != nil {
			if err2 := ValidateImportChallFlagRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Services {
		if e != nil {
			if err2 := ValidateImportChallServiceRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateCTFEventRequestBody runs the validations defined on
// CreateCTFEventRequestBody
func ValidateCreateCTFEventRequestBody(body *CreateCTFEventRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCTFEventImportTokenRequestBody runs the validations defined on
// CreateCTFEventImportTokenRequestBody
func ValidateCreateCTFEventImportTokenRequestBody(body *CreateCTFEventImportTokenRequestBody) (err error) {
	if body.EventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.event_id", *body.EventID, goa.FormatUUID))
	}
	return
}

// ValidateImportChallFlagRequestBody runs the validations defined on
// ImportChallFlagRequestBody
func ValidateImportChallFlagRequestBody(body *ImportChallFlagRequestBody) (err error) {
	if body.Flag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flag", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}

// ValidateImportChallServiceRequestBody runs the validations defined on
// ImportChallServiceRequestBody
func ValidateImportChallServiceRequestBody(body *ImportChallServiceRequestBody) (err error) {
	if body.UserDisplay == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_display", "body"))
	}
	if body.Hyperlink == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hyperlink", "body"))
	}
	return
}
