// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin HTTP server types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package server

import (
	admin "github.com/sakerhetsm/ssm-wargame/internal/gen/admin"
	adminviews "github.com/sakerhetsm/ssm-wargame/internal/gen/admin/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateChallengeRequestBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP request body.
type CreateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The number of points given to the solver
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID *string `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
}

// UpdateChallengeRequestBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP request body.
type UpdateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The number of points given to the solver
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The ID of the CTF the challenge was taken from
	CtfEventID *string `form:"ctf_event_id,omitempty" json:"ctf_event_id,omitempty" xml:"ctf_event_id,omitempty"`
}

// PresignChallFileUploadRequestBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP request body.
type PresignChallFileUploadRequestBody struct {
	// MD5 hash of the file content in base64
	Md5      *string `form:"md5,omitempty" json:"md5,omitempty" xml:"md5,omitempty"`
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// the files number of bytes
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// CreateMonthlyChallengeRequestBody is the type of the "admin" service
// "CreateMonthlyChallenge" endpoint HTTP request body.
type CreateMonthlyChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	ChallengeID *string `form:"challenge_id,omitempty" json:"challenge_id,omitempty" xml:"challenge_id,omitempty"`
	// The month(s) that the challenge is assigned for
	DisplayMonth *string `form:"display_month,omitempty" json:"display_month,omitempty" xml:"display_month,omitempty"`
	// Starting date of the monthly challenge
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty" xml:"start_date,omitempty"`
	// Ending date of the monthly challenge
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty" xml:"end_date,omitempty"`
}

// AddFlagRequestBody is the type of the "admin" service "AddFlag" endpoint
// HTTP request body.
type AddFlagRequestBody struct {
	Flag *string `form:"flag,omitempty" json:"flag,omitempty" xml:"flag,omitempty"`
}

// SsmAdminChallengeResponseCollection is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body.
type SsmAdminChallengeResponseCollection []*SsmAdminChallengeResponse

// PresignChallFileUploadResponseBody is the type of the "admin" service
// "PresignChallFileUpload" endpoint HTTP response body.
type PresignChallFileUploadResponseBody struct {
	// Signed PutObject URL
	URL string `form:"url" json:"url" xml:"url"`
}

// ListMonthlyChallengesResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body.
type ListMonthlyChallengesResponseBody []*MonthlyChallengeResponse

// ListUsersResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*SsmUserResponse

// ListChallengesUnauthorizedResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "unauthorized" error.
type ListChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChallengesNotFoundResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "not_found" error.
type ListChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListChallengesBadRequestResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body for the "bad_request" error.
type ListChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "unauthorized" error.
type CreateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeNotFoundResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "not_found" error.
type CreateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateChallengeBadRequestResponseBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP response body for the "bad_request" error.
type CreateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeUnauthorizedResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "unauthorized" error.
type UpdateChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeNotFoundResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "not_found" error.
type UpdateChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateChallengeBadRequestResponseBody is the type of the "admin" service
// "UpdateChallenge" endpoint HTTP response body for the "bad_request" error.
type UpdateChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadUnauthorizedResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "unauthorized" error.
type PresignChallFileUploadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadNotFoundResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "not_found" error.
type PresignChallFileUploadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PresignChallFileUploadBadRequestResponseBody is the type of the "admin"
// service "PresignChallFileUpload" endpoint HTTP response body for the
// "bad_request" error.
type PresignChallFileUploadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesUnauthorizedResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "unauthorized" error.
type ListMonthlyChallengesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesNotFoundResponseBody is the type of the "admin" service
// "ListMonthlyChallenges" endpoint HTTP response body for the "not_found"
// error.
type ListMonthlyChallengesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMonthlyChallengesBadRequestResponseBody is the type of the "admin"
// service "ListMonthlyChallenges" endpoint HTTP response body for the
// "bad_request" error.
type ListMonthlyChallengesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type DeleteMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "DeleteMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type DeleteMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "unauthorized" error.
type DeleteFileUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileNotFoundResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "not_found" error.
type DeleteFileNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFileBadRequestResponseBody is the type of the "admin" service
// "DeleteFile" endpoint HTTP response body for the "bad_request" error.
type DeleteFileBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeUnauthorizedResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "unauthorized" error.
type CreateMonthlyChallengeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeNotFoundResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "not_found" error.
type CreateMonthlyChallengeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateMonthlyChallengeBadRequestResponseBody is the type of the "admin"
// service "CreateMonthlyChallenge" endpoint HTTP response body for the
// "bad_request" error.
type CreateMonthlyChallengeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersUnauthorizedResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "unauthorized" error.
type ListUsersUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersNotFoundResponseBody is the type of the "admin" service "ListUsers"
// endpoint HTTP response body for the "not_found" error.
type ListUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUsersBadRequestResponseBody is the type of the "admin" service
// "ListUsers" endpoint HTTP response body for the "bad_request" error.
type ListUsersBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagUnauthorizedResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "unauthorized" error.
type AddFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagNotFoundResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "not_found" error.
type AddFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddFlagBadRequestResponseBody is the type of the "admin" service "AddFlag"
// endpoint HTTP response body for the "bad_request" error.
type AddFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagUnauthorizedResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "unauthorized" error.
type DeleteFlagUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagNotFoundResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "not_found" error.
type DeleteFlagNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteFlagBadRequestResponseBody is the type of the "admin" service
// "DeleteFlag" endpoint HTTP response body for the "bad_request" error.
type DeleteFlagBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SsmAdminChallengeResponse is used to define fields on response body types.
type SsmAdminChallengeResponse struct {
	ID string `form:"id" json:"id" xml:"id"`
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score    int                            `form:"score" json:"score" xml:"score"`
	Services []*ChallengeServiceResponse    `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files    []*AdminChallengeFilesResponse `form:"files" json:"files" xml:"files"`
	// unix timestamp
	PublishAt *int64 `form:"publish_at,omitempty" json:"publish_at,omitempty" xml:"publish_at,omitempty"`
	// The numer of people who solved the challenge
	Solves int                           `form:"solves" json:"solves" xml:"solves"`
	Flags  []*AdminChallengeFlagResponse `form:"flags,omitempty" json:"flags,omitempty" xml:"flags,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
}

// AdminChallengeFilesResponse is used to define fields on response body types.
type AdminChallengeFilesResponse struct {
	ID       string `form:"id" json:"id" xml:"id"`
	Filename string `form:"filename" json:"filename" xml:"filename"`
	URL      string `form:"url" json:"url" xml:"url"`
	Bucket   string `form:"bucket" json:"bucket" xml:"bucket"`
	Key      string `form:"key" json:"key" xml:"key"`
	Size     int64  `form:"size" json:"size" xml:"size"`
	// MD5 hash of the file content in base64
	Md5 string `form:"md5" json:"md5" xml:"md5"`
}

// AdminChallengeFlagResponse is used to define fields on response body types.
type AdminChallengeFlagResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Flag string `form:"flag" json:"flag" xml:"flag"`
}

// MonthlyChallengeResponse is used to define fields on response body types.
type MonthlyChallengeResponse struct {
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	ChallengeID string `form:"challenge_id" json:"challenge_id" xml:"challenge_id"`
	// The month(s) that the challenge is assigned for
	DisplayMonth string `form:"display_month" json:"display_month" xml:"display_month"`
	// Starting date of the monthly challenge
	StartDate string `form:"start_date" json:"start_date" xml:"start_date"`
	// Ending date of the monthly challenge
	EndDate string `form:"end_date" json:"end_date" xml:"end_date"`
}

// SsmUserResponse is used to define fields on response body types.
type SsmUserResponse struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Email     string `form:"email" json:"email" xml:"email"`
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	LastName  string `form:"last_name" json:"last_name" xml:"last_name"`
	Role      string `form:"role" json:"role" xml:"role"`
}

// NewSsmAdminChallengeResponseCollection builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewSsmAdminChallengeResponseCollection(res adminviews.SsmAdminChallengeCollectionView) SsmAdminChallengeResponseCollection {
	body := make([]*SsmAdminChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminviewsSsmAdminChallengeViewToSsmAdminChallengeResponse(val)
	}
	return body
}

// NewPresignChallFileUploadResponseBody builds the HTTP response body from the
// result of the "PresignChallFileUpload" endpoint of the "admin" service.
func NewPresignChallFileUploadResponseBody(res *admin.PresignChallFileUploadResult) *PresignChallFileUploadResponseBody {
	body := &PresignChallFileUploadResponseBody{
		URL: res.URL,
	}
	return body
}

// NewListMonthlyChallengesResponseBody builds the HTTP response body from the
// result of the "ListMonthlyChallenges" endpoint of the "admin" service.
func NewListMonthlyChallengesResponseBody(res []*admin.MonthlyChallenge) ListMonthlyChallengesResponseBody {
	body := make([]*MonthlyChallengeResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminMonthlyChallengeToMonthlyChallengeResponse(val)
	}
	return body
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "ListUsers" endpoint of the "admin" service.
func NewListUsersResponseBody(res []*admin.SsmUser) ListUsersResponseBody {
	body := make([]*SsmUserResponse, len(res))
	for i, val := range res {
		body[i] = marshalAdminSsmUserToSsmUserResponse(val)
	}
	return body
}

// NewListChallengesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesUnauthorizedResponseBody(res *goa.ServiceError) *ListChallengesUnauthorizedResponseBody {
	body := &ListChallengesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesNotFoundResponseBody builds the HTTP response body from the
// result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesNotFoundResponseBody(res *goa.ServiceError) *ListChallengesNotFoundResponseBody {
	body := &ListChallengesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesBadRequestResponseBody builds the HTTP response body from
// the result of the "ListChallenges" endpoint of the "admin" service.
func NewListChallengesBadRequestResponseBody(res *goa.ServiceError) *ListChallengesBadRequestResponseBody {
	body := &ListChallengesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeUnauthorizedResponseBody(res *goa.ServiceError) *CreateChallengeUnauthorizedResponseBody {
	body := &CreateChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeNotFoundResponseBody builds the HTTP response body from
// the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeNotFoundResponseBody(res *goa.ServiceError) *CreateChallengeNotFoundResponseBody {
	body := &CreateChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateChallengeBadRequestResponseBody builds the HTTP response body from
// the result of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeBadRequestResponseBody(res *goa.ServiceError) *CreateChallengeBadRequestResponseBody {
	body := &CreateChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeUnauthorizedResponseBody builds the HTTP response body
// from the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeUnauthorizedResponseBody(res *goa.ServiceError) *UpdateChallengeUnauthorizedResponseBody {
	body := &UpdateChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeNotFoundResponseBody builds the HTTP response body from
// the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeNotFoundResponseBody(res *goa.ServiceError) *UpdateChallengeNotFoundResponseBody {
	body := &UpdateChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateChallengeBadRequestResponseBody builds the HTTP response body from
// the result of the "UpdateChallenge" endpoint of the "admin" service.
func NewUpdateChallengeBadRequestResponseBody(res *goa.ServiceError) *UpdateChallengeBadRequestResponseBody {
	body := &UpdateChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadUnauthorizedResponseBody builds the HTTP response
// body from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadUnauthorizedResponseBody(res *goa.ServiceError) *PresignChallFileUploadUnauthorizedResponseBody {
	body := &PresignChallFileUploadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadNotFoundResponseBody builds the HTTP response body
// from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadNotFoundResponseBody(res *goa.ServiceError) *PresignChallFileUploadNotFoundResponseBody {
	body := &PresignChallFileUploadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPresignChallFileUploadBadRequestResponseBody builds the HTTP response
// body from the result of the "PresignChallFileUpload" endpoint of the "admin"
// service.
func NewPresignChallFileUploadBadRequestResponseBody(res *goa.ServiceError) *PresignChallFileUploadBadRequestResponseBody {
	body := &PresignChallFileUploadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesUnauthorizedResponseBody builds the HTTP response
// body from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesUnauthorizedResponseBody(res *goa.ServiceError) *ListMonthlyChallengesUnauthorizedResponseBody {
	body := &ListMonthlyChallengesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesNotFoundResponseBody builds the HTTP response body
// from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesNotFoundResponseBody(res *goa.ServiceError) *ListMonthlyChallengesNotFoundResponseBody {
	body := &ListMonthlyChallengesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMonthlyChallengesBadRequestResponseBody builds the HTTP response body
// from the result of the "ListMonthlyChallenges" endpoint of the "admin"
// service.
func NewListMonthlyChallengesBadRequestResponseBody(res *goa.ServiceError) *ListMonthlyChallengesBadRequestResponseBody {
	body := &ListMonthlyChallengesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeUnauthorizedResponseBody builds the HTTP response
// body from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeUnauthorizedResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeUnauthorizedResponseBody {
	body := &DeleteMonthlyChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeNotFoundResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeNotFoundResponseBody {
	body := &DeleteMonthlyChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMonthlyChallengeBadRequestResponseBody builds the HTTP response
// body from the result of the "DeleteMonthlyChallenge" endpoint of the "admin"
// service.
func NewDeleteMonthlyChallengeBadRequestResponseBody(res *goa.ServiceError) *DeleteMonthlyChallengeBadRequestResponseBody {
	body := &DeleteMonthlyChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileUnauthorizedResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileUnauthorizedResponseBody(res *goa.ServiceError) *DeleteFileUnauthorizedResponseBody {
	body := &DeleteFileUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileNotFoundResponseBody(res *goa.ServiceError) *DeleteFileNotFoundResponseBody {
	body := &DeleteFileNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFileBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteFile" endpoint of the "admin" service.
func NewDeleteFileBadRequestResponseBody(res *goa.ServiceError) *DeleteFileBadRequestResponseBody {
	body := &DeleteFileBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeUnauthorizedResponseBody builds the HTTP response
// body from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeUnauthorizedResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeUnauthorizedResponseBody {
	body := &CreateMonthlyChallengeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeNotFoundResponseBody builds the HTTP response body
// from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeNotFoundResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeNotFoundResponseBody {
	body := &CreateMonthlyChallengeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateMonthlyChallengeBadRequestResponseBody builds the HTTP response
// body from the result of the "CreateMonthlyChallenge" endpoint of the "admin"
// service.
func NewCreateMonthlyChallengeBadRequestResponseBody(res *goa.ServiceError) *CreateMonthlyChallengeBadRequestResponseBody {
	body := &CreateMonthlyChallengeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersUnauthorizedResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersUnauthorizedResponseBody(res *goa.ServiceError) *ListUsersUnauthorizedResponseBody {
	body := &ListUsersUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersNotFoundResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersNotFoundResponseBody(res *goa.ServiceError) *ListUsersNotFoundResponseBody {
	body := &ListUsersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUsersBadRequestResponseBody builds the HTTP response body from the
// result of the "ListUsers" endpoint of the "admin" service.
func NewListUsersBadRequestResponseBody(res *goa.ServiceError) *ListUsersBadRequestResponseBody {
	body := &ListUsersBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagUnauthorizedResponseBody builds the HTTP response body from the
// result of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagUnauthorizedResponseBody(res *goa.ServiceError) *AddFlagUnauthorizedResponseBody {
	body := &AddFlagUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagNotFoundResponseBody builds the HTTP response body from the result
// of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagNotFoundResponseBody(res *goa.ServiceError) *AddFlagNotFoundResponseBody {
	body := &AddFlagNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddFlagBadRequestResponseBody builds the HTTP response body from the
// result of the "AddFlag" endpoint of the "admin" service.
func NewAddFlagBadRequestResponseBody(res *goa.ServiceError) *AddFlagBadRequestResponseBody {
	body := &AddFlagBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagUnauthorizedResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagUnauthorizedResponseBody(res *goa.ServiceError) *DeleteFlagUnauthorizedResponseBody {
	body := &DeleteFlagUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagNotFoundResponseBody(res *goa.ServiceError) *DeleteFlagNotFoundResponseBody {
	body := &DeleteFlagNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteFlagBadRequestResponseBody builds the HTTP response body from the
// result of the "DeleteFlag" endpoint of the "admin" service.
func NewDeleteFlagBadRequestResponseBody(res *goa.ServiceError) *DeleteFlagBadRequestResponseBody {
	body := &DeleteFlagBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListChallengesPayload builds a admin service ListChallenges endpoint
// payload.
func NewListChallengesPayload(token string) *admin.ListChallengesPayload {
	v := &admin.ListChallengesPayload{}
	v.Token = token

	return v
}

// NewCreateChallengePayload builds a admin service CreateChallenge endpoint
// payload.
func NewCreateChallengePayload(body *CreateChallengeRequestBody, token string) *admin.CreateChallengePayload {
	v := &admin.CreateChallengePayload{
		Slug:        *body.Slug,
		Title:       *body.Title,
		Description: *body.Description,
		Score:       *body.Score,
		PublishAt:   body.PublishAt,
		CtfEventID:  body.CtfEventID,
	}
	v.Token = token

	return v
}

// NewUpdateChallengePayload builds a admin service UpdateChallenge endpoint
// payload.
func NewUpdateChallengePayload(body *UpdateChallengeRequestBody, challengeID string, token string) *admin.UpdateChallengePayload {
	v := &admin.UpdateChallengePayload{
		Slug:        *body.Slug,
		Title:       *body.Title,
		Description: *body.Description,
		Score:       *body.Score,
		PublishAt:   body.PublishAt,
		CtfEventID:  body.CtfEventID,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewPresignChallFileUploadPayload builds a admin service
// PresignChallFileUpload endpoint payload.
func NewPresignChallFileUploadPayload(body *PresignChallFileUploadRequestBody, challengeID string, token string) *admin.PresignChallFileUploadPayload {
	v := &admin.PresignChallFileUploadPayload{
		Md5:      *body.Md5,
		Filename: *body.Filename,
		Size:     *body.Size,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewListMonthlyChallengesPayload builds a admin service ListMonthlyChallenges
// endpoint payload.
func NewListMonthlyChallengesPayload(token string) *admin.ListMonthlyChallengesPayload {
	v := &admin.ListMonthlyChallengesPayload{}
	v.Token = token

	return v
}

// NewDeleteMonthlyChallengePayload builds a admin service
// DeleteMonthlyChallenge endpoint payload.
func NewDeleteMonthlyChallengePayload(challengeID string, token string) *admin.DeleteMonthlyChallengePayload {
	v := &admin.DeleteMonthlyChallengePayload{}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewDeleteFilePayload builds a admin service DeleteFile endpoint payload.
func NewDeleteFilePayload(fileID string, token string) *admin.DeleteFilePayload {
	v := &admin.DeleteFilePayload{}
	v.FileID = fileID
	v.Token = token

	return v
}

// NewCreateMonthlyChallengePayload builds a admin service
// CreateMonthlyChallenge endpoint payload.
func NewCreateMonthlyChallengePayload(body *CreateMonthlyChallengeRequestBody, token string) *admin.CreateMonthlyChallengePayload {
	v := &admin.CreateMonthlyChallengePayload{
		Slug:         *body.Slug,
		Title:        *body.Title,
		Description:  *body.Description,
		ChallengeID:  *body.ChallengeID,
		DisplayMonth: *body.DisplayMonth,
		StartDate:    *body.StartDate,
		EndDate:      *body.EndDate,
	}
	v.Token = token

	return v
}

// NewListUsersPayload builds a admin service ListUsers endpoint payload.
func NewListUsersPayload(token string) *admin.ListUsersPayload {
	v := &admin.ListUsersPayload{}
	v.Token = token

	return v
}

// NewAddFlagPayload builds a admin service AddFlag endpoint payload.
func NewAddFlagPayload(body *AddFlagRequestBody, challengeID string, token string) *admin.AddFlagPayload {
	v := &admin.AddFlagPayload{
		Flag: *body.Flag,
	}
	v.ChallengeID = challengeID
	v.Token = token

	return v
}

// NewDeleteFlagPayload builds a admin service DeleteFlag endpoint payload.
func NewDeleteFlagPayload(challengeID string, flagID string, token string) *admin.DeleteFlagPayload {
	v := &admin.DeleteFlagPayload{}
	v.ChallengeID = challengeID
	v.FlagID = flagID
	v.Token = token

	return v
}

// ValidateCreateChallengeRequestBody runs the validations defined on
// CreateChallengeRequestBody
func ValidateCreateChallengeRequestBody(body *CreateChallengeRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateChallengeRequestBody runs the validations defined on
// UpdateChallengeRequestBody
func ValidateUpdateChallengeRequestBody(body *UpdateChallengeRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.CtfEventID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.ctf_event_id", *body.CtfEventID, goa.FormatUUID))
	}
	return
}

// ValidatePresignChallFileUploadRequestBody runs the validations defined on
// PresignChallFileUploadRequestBody
func ValidatePresignChallFileUploadRequestBody(body *PresignChallFileUploadRequestBody) (err error) {
	if body.Md5 == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("md5", "body"))
	}
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	return
}

// ValidateCreateMonthlyChallengeRequestBody runs the validations defined on
// CreateMonthlyChallengeRequestBody
func ValidateCreateMonthlyChallengeRequestBody(body *CreateMonthlyChallengeRequestBody) (err error) {
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_date", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_date", "body"))
	}
	if body.DisplayMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("display_month", "body"))
	}
	if body.ChallengeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("challenge_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.ChallengeID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.challenge_id", *body.ChallengeID, goa.FormatUUID))
	}
	return
}

// ValidateAddFlagRequestBody runs the validations defined on AddFlagRequestBody
func ValidateAddFlagRequestBody(body *AddFlagRequestBody) (err error) {
	if body.Flag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("flag", "body"))
	}
	return
}
