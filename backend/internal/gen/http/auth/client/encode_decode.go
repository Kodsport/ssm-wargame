// Code generated by goa v3.5.2, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	auth "github.com/sakerhetsm/ssm-wargame/internal/gen/auth"
	goahttp "goa.design/goa/v3/http"
)

// BuildGenerateDiscordAuthURLRequest instantiates a HTTP request object with
// method and path set to call the "auth" service "GenerateDiscordAuthURL"
// endpoint
func (c *Client) BuildGenerateDiscordAuthURLRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenerateDiscordAuthURLAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "GenerateDiscordAuthURL", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGenerateDiscordAuthURLResponse returns a decoder for responses
// returned by the auth GenerateDiscordAuthURL endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeGenerateDiscordAuthURLResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GenerateDiscordAuthURLResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GenerateDiscordAuthURL", err)
			}
			err = ValidateGenerateDiscordAuthURLResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GenerateDiscordAuthURL", err)
			}
			res := NewGenerateDiscordAuthURLResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "GenerateDiscordAuthURL", resp.StatusCode, string(body))
		}
	}
}

// BuildExchangeDiscordRequest instantiates a HTTP request object with method
// and path set to call the "auth" service "ExchangeDiscord" endpoint
func (c *Client) BuildExchangeDiscordRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ExchangeDiscordAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "ExchangeDiscord", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeExchangeDiscordRequest returns an encoder for requests sent to the
// auth ExchangeDiscord server.
func EncodeExchangeDiscordRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.ExchangeDiscordPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "ExchangeDiscord", "*auth.ExchangeDiscordPayload", v)
		}
		body := NewExchangeDiscordRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "ExchangeDiscord", err)
		}
		return nil
	}
}

// DecodeExchangeDiscordResponse returns a decoder for responses returned by
// the auth ExchangeDiscord endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeExchangeDiscordResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ExchangeDiscordResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "ExchangeDiscord", err)
			}
			err = ValidateExchangeDiscordResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "ExchangeDiscord", err)
			}
			res := NewExchangeDiscordResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "ExchangeDiscord", resp.StatusCode, string(body))
		}
	}
}
