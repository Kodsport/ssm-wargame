// Code generated by goa v3.12.3, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// GenerateDiscordAuthURL Doer is the HTTP client used to make requests to the
	// GenerateDiscordAuthURL endpoint.
	GenerateDiscordAuthURLDoer goahttp.Doer

	// ExchangeDiscord Doer is the HTTP client used to make requests to the
	// ExchangeDiscord endpoint.
	ExchangeDiscordDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GenerateDiscordAuthURLDoer: doer,
		ExchangeDiscordDoer:        doer,
		RestoreResponseBody:        restoreBody,
		scheme:                     scheme,
		host:                       host,
		decoder:                    dec,
		encoder:                    enc,
	}
}

// GenerateDiscordAuthURL returns an endpoint that makes HTTP requests to the
// auth service GenerateDiscordAuthURL server.
func (c *Client) GenerateDiscordAuthURL() goa.Endpoint {
	var (
		decodeResponse = DecodeGenerateDiscordAuthURLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGenerateDiscordAuthURLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenerateDiscordAuthURLDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "GenerateDiscordAuthURL", err)
		}
		return decodeResponse(resp)
	}
}

// ExchangeDiscord returns an endpoint that makes HTTP requests to the auth
// service ExchangeDiscord server.
func (c *Client) ExchangeDiscord() goa.Endpoint {
	var (
		encodeRequest  = EncodeExchangeDiscordRequest(c.encoder)
		decodeResponse = DecodeExchangeDiscordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildExchangeDiscordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ExchangeDiscordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "ExchangeDiscord", err)
		}
		return decodeResponse(resp)
	}
}
