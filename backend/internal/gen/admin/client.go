// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin client
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package admin

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "admin" service client.
type Client struct {
	ListChallengesEndpoint            goa.Endpoint
	GetChallengeMetaEndpoint          goa.Endpoint
	CreateChallengeEndpoint           goa.Endpoint
	UpdateChallengeEndpoint           goa.Endpoint
	PresignChallFileUploadEndpoint    goa.Endpoint
	ListMonthlyChallengesEndpoint     goa.Endpoint
	DeleteMonthlyChallengeEndpoint    goa.Endpoint
	DeleteFileEndpoint                goa.Endpoint
	CreateMonthlyChallengeEndpoint    goa.Endpoint
	ListUsersEndpoint                 goa.Endpoint
	ListAuthorsEndpoint               goa.Endpoint
	UpdateAuthorEndpoint              goa.Endpoint
	CreateAuthorEndpoint              goa.Endpoint
	DeleteAuthorEndpoint              goa.Endpoint
	AddFlagEndpoint                   goa.Endpoint
	DeleteFlagEndpoint                goa.Endpoint
	ListCategoriesEndpoint            goa.Endpoint
	ChalltoolsImportEndpoint          goa.Endpoint
	ListCTFEventsEndpoint             goa.Endpoint
	CreateCTFEventEndpoint            goa.Endpoint
	DeleteCTFEventEndpoint            goa.Endpoint
	CreateCTFEventImportTokenEndpoint goa.Endpoint
	ListCoursesEndpoint               goa.Endpoint
	CreateCourseEndpoint              goa.Endpoint
	UpdateCourseEndpoint              goa.Endpoint
}

// NewClient initializes a "admin" service client given the endpoints.
func NewClient(listChallenges, getChallengeMeta, createChallenge, updateChallenge, presignChallFileUpload, listMonthlyChallenges, deleteMonthlyChallenge, deleteFile, createMonthlyChallenge, listUsers, listAuthors, updateAuthor, createAuthor, deleteAuthor, addFlag, deleteFlag, listCategories, challtoolsImport, listCTFEvents, createCTFEvent, deleteCTFEvent, createCTFEventImportToken, listCourses, createCourse, updateCourse goa.Endpoint) *Client {
	return &Client{
		ListChallengesEndpoint:            listChallenges,
		GetChallengeMetaEndpoint:          getChallengeMeta,
		CreateChallengeEndpoint:           createChallenge,
		UpdateChallengeEndpoint:           updateChallenge,
		PresignChallFileUploadEndpoint:    presignChallFileUpload,
		ListMonthlyChallengesEndpoint:     listMonthlyChallenges,
		DeleteMonthlyChallengeEndpoint:    deleteMonthlyChallenge,
		DeleteFileEndpoint:                deleteFile,
		CreateMonthlyChallengeEndpoint:    createMonthlyChallenge,
		ListUsersEndpoint:                 listUsers,
		ListAuthorsEndpoint:               listAuthors,
		UpdateAuthorEndpoint:              updateAuthor,
		CreateAuthorEndpoint:              createAuthor,
		DeleteAuthorEndpoint:              deleteAuthor,
		AddFlagEndpoint:                   addFlag,
		DeleteFlagEndpoint:                deleteFlag,
		ListCategoriesEndpoint:            listCategories,
		ChalltoolsImportEndpoint:          challtoolsImport,
		ListCTFEventsEndpoint:             listCTFEvents,
		CreateCTFEventEndpoint:            createCTFEvent,
		DeleteCTFEventEndpoint:            deleteCTFEvent,
		CreateCTFEventImportTokenEndpoint: createCTFEventImportToken,
		ListCoursesEndpoint:               listCourses,
		CreateCourseEndpoint:              createCourse,
		UpdateCourseEndpoint:              updateCourse,
	}
}

// ListChallenges calls the "ListChallenges" endpoint of the "admin" service.
func (c *Client) ListChallenges(ctx context.Context, p *ListChallengesPayload) (res SsmAdminChallengeCollection, err error) {
	var ires interface{}
	ires, err = c.ListChallengesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SsmAdminChallengeCollection), nil
}

// GetChallengeMeta calls the "GetChallengeMeta" endpoint of the "admin"
// service.
func (c *Client) GetChallengeMeta(ctx context.Context, p *GetChallengeMetaPayload) (res *ChallengeMeta, err error) {
	var ires interface{}
	ires, err = c.GetChallengeMetaEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ChallengeMeta), nil
}

// CreateChallenge calls the "CreateChallenge" endpoint of the "admin" service.
func (c *Client) CreateChallenge(ctx context.Context, p *CreateChallengePayload) (err error) {
	_, err = c.CreateChallengeEndpoint(ctx, p)
	return
}

// UpdateChallenge calls the "UpdateChallenge" endpoint of the "admin" service.
func (c *Client) UpdateChallenge(ctx context.Context, p *UpdateChallengePayload) (err error) {
	_, err = c.UpdateChallengeEndpoint(ctx, p)
	return
}

// PresignChallFileUpload calls the "PresignChallFileUpload" endpoint of the
// "admin" service.
func (c *Client) PresignChallFileUpload(ctx context.Context, p *PresignChallFileUploadPayload) (res *PresignChallFileUploadResult, err error) {
	var ires interface{}
	ires, err = c.PresignChallFileUploadEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PresignChallFileUploadResult), nil
}

// ListMonthlyChallenges calls the "ListMonthlyChallenges" endpoint of the
// "admin" service.
func (c *Client) ListMonthlyChallenges(ctx context.Context, p *ListMonthlyChallengesPayload) (res []*MonthlyChallenge, err error) {
	var ires interface{}
	ires, err = c.ListMonthlyChallengesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*MonthlyChallenge), nil
}

// DeleteMonthlyChallenge calls the "DeleteMonthlyChallenge" endpoint of the
// "admin" service.
func (c *Client) DeleteMonthlyChallenge(ctx context.Context, p *DeleteMonthlyChallengePayload) (err error) {
	_, err = c.DeleteMonthlyChallengeEndpoint(ctx, p)
	return
}

// DeleteFile calls the "DeleteFile" endpoint of the "admin" service.
func (c *Client) DeleteFile(ctx context.Context, p *DeleteFilePayload) (err error) {
	_, err = c.DeleteFileEndpoint(ctx, p)
	return
}

// CreateMonthlyChallenge calls the "CreateMonthlyChallenge" endpoint of the
// "admin" service.
func (c *Client) CreateMonthlyChallenge(ctx context.Context, p *CreateMonthlyChallengePayload) (err error) {
	_, err = c.CreateMonthlyChallengeEndpoint(ctx, p)
	return
}

// ListUsers calls the "ListUsers" endpoint of the "admin" service.
func (c *Client) ListUsers(ctx context.Context, p *ListUsersPayload) (res []*SsmUser, err error) {
	var ires interface{}
	ires, err = c.ListUsersEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*SsmUser), nil
}

// ListAuthors calls the "ListAuthors" endpoint of the "admin" service.
func (c *Client) ListAuthors(ctx context.Context, p *ListAuthorsPayload) (res []*Author, err error) {
	var ires interface{}
	ires, err = c.ListAuthorsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Author), nil
}

// UpdateAuthor calls the "UpdateAuthor" endpoint of the "admin" service.
func (c *Client) UpdateAuthor(ctx context.Context, p *UpdateAuthorPayload) (err error) {
	_, err = c.UpdateAuthorEndpoint(ctx, p)
	return
}

// CreateAuthor calls the "CreateAuthor" endpoint of the "admin" service.
func (c *Client) CreateAuthor(ctx context.Context, p *CreateAuthorPayload) (err error) {
	_, err = c.CreateAuthorEndpoint(ctx, p)
	return
}

// DeleteAuthor calls the "DeleteAuthor" endpoint of the "admin" service.
func (c *Client) DeleteAuthor(ctx context.Context, p *DeleteAuthorPayload) (err error) {
	_, err = c.DeleteAuthorEndpoint(ctx, p)
	return
}

// AddFlag calls the "AddFlag" endpoint of the "admin" service.
func (c *Client) AddFlag(ctx context.Context, p *AddFlagPayload) (err error) {
	_, err = c.AddFlagEndpoint(ctx, p)
	return
}

// DeleteFlag calls the "DeleteFlag" endpoint of the "admin" service.
func (c *Client) DeleteFlag(ctx context.Context, p *DeleteFlagPayload) (err error) {
	_, err = c.DeleteFlagEndpoint(ctx, p)
	return
}

// ListCategories calls the "ListCategories" endpoint of the "admin" service.
func (c *Client) ListCategories(ctx context.Context, p *ListCategoriesPayload) (res []*Category, err error) {
	var ires interface{}
	ires, err = c.ListCategoriesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Category), nil
}

// ChalltoolsImport calls the "ChalltoolsImport" endpoint of the "admin"
// service.
func (c *Client) ChalltoolsImport(ctx context.Context, p *ChalltoolsImportPayload) (err error) {
	_, err = c.ChalltoolsImportEndpoint(ctx, p)
	return
}

// ListCTFEvents calls the "ListCTFEvents" endpoint of the "admin" service.
func (c *Client) ListCTFEvents(ctx context.Context, p *ListCTFEventsPayload) (res []*CTFEvent, err error) {
	var ires interface{}
	ires, err = c.ListCTFEventsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*CTFEvent), nil
}

// CreateCTFEvent calls the "CreateCTFEvent" endpoint of the "admin" service.
func (c *Client) CreateCTFEvent(ctx context.Context, p *CreateCTFEventPayload) (err error) {
	_, err = c.CreateCTFEventEndpoint(ctx, p)
	return
}

// DeleteCTFEvent calls the "DeleteCTFEvent" endpoint of the "admin" service.
func (c *Client) DeleteCTFEvent(ctx context.Context, p *DeleteCTFEventPayload) (err error) {
	_, err = c.DeleteCTFEventEndpoint(ctx, p)
	return
}

// CreateCTFEventImportToken calls the "CreateCTFEventImportToken" endpoint of
// the "admin" service.
func (c *Client) CreateCTFEventImportToken(ctx context.Context, p *CreateCTFEventImportTokenPayload) (res *CreateCTFEventImportTokenResult, err error) {
	var ires interface{}
	ires, err = c.CreateCTFEventImportTokenEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateCTFEventImportTokenResult), nil
}

// ListCourses calls the "ListCourses" endpoint of the "admin" service.
func (c *Client) ListCourses(ctx context.Context, p *ListCoursesPayload) (res SsmAdminCourseCollection, err error) {
	var ires interface{}
	ires, err = c.ListCoursesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SsmAdminCourseCollection), nil
}

// CreateCourse calls the "CreateCourse" endpoint of the "admin" service.
func (c *Client) CreateCourse(ctx context.Context, p *CreateCoursePayload) (err error) {
	_, err = c.CreateCourseEndpoint(ctx, p)
	return
}

// UpdateCourse calls the "UpdateCourse" endpoint of the "admin" service.
func (c *Client) UpdateCourse(ctx context.Context, p *UpdateCoursePayload) (err error) {
	_, err = c.UpdateCourseEndpoint(ctx, p)
	return
}
