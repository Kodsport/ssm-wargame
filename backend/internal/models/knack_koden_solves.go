// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KnackKodenSolf is an object representing the database table.
type KnackKodenSolf struct {
	ChallengeID      string    `boil:"challenge_id" json:"challenge_id" toml:"challenge_id" yaml:"challenge_id"`
	KnackKodenTeamID string    `boil:"knack_koden_team_id" json:"knack_koden_team_id" toml:"knack_koden_team_id" yaml:"knack_koden_team_id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *knackKodenSolfR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L knackKodenSolfL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KnackKodenSolfColumns = struct {
	ChallengeID      string
	KnackKodenTeamID string
	CreatedAt        string
}{
	ChallengeID:      "challenge_id",
	KnackKodenTeamID: "knack_koden_team_id",
	CreatedAt:        "created_at",
}

var KnackKodenSolfTableColumns = struct {
	ChallengeID      string
	KnackKodenTeamID string
	CreatedAt        string
}{
	ChallengeID:      "knack_koden_solves.challenge_id",
	KnackKodenTeamID: "knack_koden_solves.knack_koden_team_id",
	CreatedAt:        "knack_koden_solves.created_at",
}

// Generated where

var KnackKodenSolfWhere = struct {
	ChallengeID      whereHelperstring
	KnackKodenTeamID whereHelperstring
	CreatedAt        whereHelpertime_Time
}{
	ChallengeID:      whereHelperstring{field: "\"knack_koden_solves\".\"challenge_id\""},
	KnackKodenTeamID: whereHelperstring{field: "\"knack_koden_solves\".\"knack_koden_team_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"knack_koden_solves\".\"created_at\""},
}

// KnackKodenSolfRels is where relationship names are stored.
var KnackKodenSolfRels = struct {
	Challenge      string
	KnackKodenTeam string
}{
	Challenge:      "Challenge",
	KnackKodenTeam: "KnackKodenTeam",
}

// knackKodenSolfR is where relationships are stored.
type knackKodenSolfR struct {
	Challenge      *Challenge      `boil:"Challenge" json:"Challenge" toml:"Challenge" yaml:"Challenge"`
	KnackKodenTeam *KnackKodenTeam `boil:"KnackKodenTeam" json:"KnackKodenTeam" toml:"KnackKodenTeam" yaml:"KnackKodenTeam"`
}

// NewStruct creates a new relationship struct
func (*knackKodenSolfR) NewStruct() *knackKodenSolfR {
	return &knackKodenSolfR{}
}

func (r *knackKodenSolfR) GetChallenge() *Challenge {
	if r == nil {
		return nil
	}
	return r.Challenge
}

func (r *knackKodenSolfR) GetKnackKodenTeam() *KnackKodenTeam {
	if r == nil {
		return nil
	}
	return r.KnackKodenTeam
}

// knackKodenSolfL is where Load methods for each relationship are stored.
type knackKodenSolfL struct{}

var (
	knackKodenSolfAllColumns            = []string{"challenge_id", "knack_koden_team_id", "created_at"}
	knackKodenSolfColumnsWithoutDefault = []string{"challenge_id", "knack_koden_team_id", "created_at"}
	knackKodenSolfColumnsWithDefault    = []string{}
	knackKodenSolfPrimaryKeyColumns     = []string{"challenge_id", "knack_koden_team_id"}
	knackKodenSolfGeneratedColumns      = []string{}
)

type (
	// KnackKodenSolfSlice is an alias for a slice of pointers to KnackKodenSolf.
	// This should almost always be used instead of []KnackKodenSolf.
	KnackKodenSolfSlice []*KnackKodenSolf
	// KnackKodenSolfHook is the signature for custom KnackKodenSolf hook methods
	KnackKodenSolfHook func(context.Context, boil.ContextExecutor, *KnackKodenSolf) error

	knackKodenSolfQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	knackKodenSolfType                 = reflect.TypeOf(&KnackKodenSolf{})
	knackKodenSolfMapping              = queries.MakeStructMapping(knackKodenSolfType)
	knackKodenSolfPrimaryKeyMapping, _ = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, knackKodenSolfPrimaryKeyColumns)
	knackKodenSolfInsertCacheMut       sync.RWMutex
	knackKodenSolfInsertCache          = make(map[string]insertCache)
	knackKodenSolfUpdateCacheMut       sync.RWMutex
	knackKodenSolfUpdateCache          = make(map[string]updateCache)
	knackKodenSolfUpsertCacheMut       sync.RWMutex
	knackKodenSolfUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var knackKodenSolfAfterSelectMu sync.Mutex
var knackKodenSolfAfterSelectHooks []KnackKodenSolfHook

var knackKodenSolfBeforeInsertMu sync.Mutex
var knackKodenSolfBeforeInsertHooks []KnackKodenSolfHook
var knackKodenSolfAfterInsertMu sync.Mutex
var knackKodenSolfAfterInsertHooks []KnackKodenSolfHook

var knackKodenSolfBeforeUpdateMu sync.Mutex
var knackKodenSolfBeforeUpdateHooks []KnackKodenSolfHook
var knackKodenSolfAfterUpdateMu sync.Mutex
var knackKodenSolfAfterUpdateHooks []KnackKodenSolfHook

var knackKodenSolfBeforeDeleteMu sync.Mutex
var knackKodenSolfBeforeDeleteHooks []KnackKodenSolfHook
var knackKodenSolfAfterDeleteMu sync.Mutex
var knackKodenSolfAfterDeleteHooks []KnackKodenSolfHook

var knackKodenSolfBeforeUpsertMu sync.Mutex
var knackKodenSolfBeforeUpsertHooks []KnackKodenSolfHook
var knackKodenSolfAfterUpsertMu sync.Mutex
var knackKodenSolfAfterUpsertHooks []KnackKodenSolfHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KnackKodenSolf) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KnackKodenSolf) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KnackKodenSolf) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KnackKodenSolf) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KnackKodenSolf) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KnackKodenSolf) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KnackKodenSolf) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KnackKodenSolf) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KnackKodenSolf) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenSolfAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKnackKodenSolfHook registers your hook function for all future operations.
func AddKnackKodenSolfHook(hookPoint boil.HookPoint, knackKodenSolfHook KnackKodenSolfHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		knackKodenSolfAfterSelectMu.Lock()
		knackKodenSolfAfterSelectHooks = append(knackKodenSolfAfterSelectHooks, knackKodenSolfHook)
		knackKodenSolfAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		knackKodenSolfBeforeInsertMu.Lock()
		knackKodenSolfBeforeInsertHooks = append(knackKodenSolfBeforeInsertHooks, knackKodenSolfHook)
		knackKodenSolfBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		knackKodenSolfAfterInsertMu.Lock()
		knackKodenSolfAfterInsertHooks = append(knackKodenSolfAfterInsertHooks, knackKodenSolfHook)
		knackKodenSolfAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		knackKodenSolfBeforeUpdateMu.Lock()
		knackKodenSolfBeforeUpdateHooks = append(knackKodenSolfBeforeUpdateHooks, knackKodenSolfHook)
		knackKodenSolfBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		knackKodenSolfAfterUpdateMu.Lock()
		knackKodenSolfAfterUpdateHooks = append(knackKodenSolfAfterUpdateHooks, knackKodenSolfHook)
		knackKodenSolfAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		knackKodenSolfBeforeDeleteMu.Lock()
		knackKodenSolfBeforeDeleteHooks = append(knackKodenSolfBeforeDeleteHooks, knackKodenSolfHook)
		knackKodenSolfBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		knackKodenSolfAfterDeleteMu.Lock()
		knackKodenSolfAfterDeleteHooks = append(knackKodenSolfAfterDeleteHooks, knackKodenSolfHook)
		knackKodenSolfAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		knackKodenSolfBeforeUpsertMu.Lock()
		knackKodenSolfBeforeUpsertHooks = append(knackKodenSolfBeforeUpsertHooks, knackKodenSolfHook)
		knackKodenSolfBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		knackKodenSolfAfterUpsertMu.Lock()
		knackKodenSolfAfterUpsertHooks = append(knackKodenSolfAfterUpsertHooks, knackKodenSolfHook)
		knackKodenSolfAfterUpsertMu.Unlock()
	}
}

// One returns a single knackKodenSolf record from the query.
func (q knackKodenSolfQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KnackKodenSolf, error) {
	o := &KnackKodenSolf{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for knack_koden_solves")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KnackKodenSolf records from the query.
func (q knackKodenSolfQuery) All(ctx context.Context, exec boil.ContextExecutor) (KnackKodenSolfSlice, error) {
	var o []*KnackKodenSolf

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KnackKodenSolf slice")
	}

	if len(knackKodenSolfAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KnackKodenSolf records in the query.
func (q knackKodenSolfQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count knack_koden_solves rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q knackKodenSolfQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if knack_koden_solves exists")
	}

	return count > 0, nil
}

// Challenge pointed to by the foreign key.
func (o *KnackKodenSolf) Challenge(mods ...qm.QueryMod) challengeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChallengeID),
	}

	queryMods = append(queryMods, mods...)

	return Challenges(queryMods...)
}

// KnackKodenTeam pointed to by the foreign key.
func (o *KnackKodenSolf) KnackKodenTeam(mods ...qm.QueryMod) knackKodenTeamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.KnackKodenTeamID),
	}

	queryMods = append(queryMods, mods...)

	return KnackKodenTeams(queryMods...)
}

// LoadChallenge allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (knackKodenSolfL) LoadChallenge(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKnackKodenSolf interface{}, mods queries.Applicator) error {
	var slice []*KnackKodenSolf
	var object *KnackKodenSolf

	if singular {
		var ok bool
		object, ok = maybeKnackKodenSolf.(*KnackKodenSolf)
		if !ok {
			object = new(KnackKodenSolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeKnackKodenSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeKnackKodenSolf))
			}
		}
	} else {
		s, ok := maybeKnackKodenSolf.(*[]*KnackKodenSolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeKnackKodenSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeKnackKodenSolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &knackKodenSolfR{}
		}
		args[object.ChallengeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &knackKodenSolfR{}
			}

			args[obj.ChallengeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenges`),
		qm.WhereIn(`challenges.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Challenge")
	}

	var resultSlice []*Challenge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Challenge")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for challenges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenges")
	}

	if len(challengeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Challenge = foreign
		if foreign.R == nil {
			foreign.R = &challengeR{}
		}
		foreign.R.KnackKodenSolves = append(foreign.R.KnackKodenSolves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChallengeID == foreign.ID {
				local.R.Challenge = foreign
				if foreign.R == nil {
					foreign.R = &challengeR{}
				}
				foreign.R.KnackKodenSolves = append(foreign.R.KnackKodenSolves, local)
				break
			}
		}
	}

	return nil
}

// LoadKnackKodenTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (knackKodenSolfL) LoadKnackKodenTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKnackKodenSolf interface{}, mods queries.Applicator) error {
	var slice []*KnackKodenSolf
	var object *KnackKodenSolf

	if singular {
		var ok bool
		object, ok = maybeKnackKodenSolf.(*KnackKodenSolf)
		if !ok {
			object = new(KnackKodenSolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeKnackKodenSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeKnackKodenSolf))
			}
		}
	} else {
		s, ok := maybeKnackKodenSolf.(*[]*KnackKodenSolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeKnackKodenSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeKnackKodenSolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &knackKodenSolfR{}
		}
		args[object.KnackKodenTeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &knackKodenSolfR{}
			}

			args[obj.KnackKodenTeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`knack_koden_teams`),
		qm.WhereIn(`knack_koden_teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load KnackKodenTeam")
	}

	var resultSlice []*KnackKodenTeam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice KnackKodenTeam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for knack_koden_teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for knack_koden_teams")
	}

	if len(knackKodenTeamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.KnackKodenTeam = foreign
		if foreign.R == nil {
			foreign.R = &knackKodenTeamR{}
		}
		foreign.R.KnackKodenSolves = append(foreign.R.KnackKodenSolves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.KnackKodenTeamID == foreign.ID {
				local.R.KnackKodenTeam = foreign
				if foreign.R == nil {
					foreign.R = &knackKodenTeamR{}
				}
				foreign.R.KnackKodenSolves = append(foreign.R.KnackKodenSolves, local)
				break
			}
		}
	}

	return nil
}

// SetChallenge of the knackKodenSolf to the related item.
// Sets o.R.Challenge to related.
// Adds o to related.R.KnackKodenSolves.
func (o *KnackKodenSolf) SetChallenge(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Challenge) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"knack_koden_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
		strmangle.WhereClause("\"", "\"", 2, knackKodenSolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChallengeID, o.KnackKodenTeamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChallengeID = related.ID
	if o.R == nil {
		o.R = &knackKodenSolfR{
			Challenge: related,
		}
	} else {
		o.R.Challenge = related
	}

	if related.R == nil {
		related.R = &challengeR{
			KnackKodenSolves: KnackKodenSolfSlice{o},
		}
	} else {
		related.R.KnackKodenSolves = append(related.R.KnackKodenSolves, o)
	}

	return nil
}

// SetKnackKodenTeam of the knackKodenSolf to the related item.
// Sets o.R.KnackKodenTeam to related.
// Adds o to related.R.KnackKodenSolves.
func (o *KnackKodenSolf) SetKnackKodenTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *KnackKodenTeam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"knack_koden_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"knack_koden_team_id"}),
		strmangle.WhereClause("\"", "\"", 2, knackKodenSolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChallengeID, o.KnackKodenTeamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.KnackKodenTeamID = related.ID
	if o.R == nil {
		o.R = &knackKodenSolfR{
			KnackKodenTeam: related,
		}
	} else {
		o.R.KnackKodenTeam = related
	}

	if related.R == nil {
		related.R = &knackKodenTeamR{
			KnackKodenSolves: KnackKodenSolfSlice{o},
		}
	} else {
		related.R.KnackKodenSolves = append(related.R.KnackKodenSolves, o)
	}

	return nil
}

// KnackKodenSolves retrieves all the records using an executor.
func KnackKodenSolves(mods ...qm.QueryMod) knackKodenSolfQuery {
	mods = append(mods, qm.From("\"knack_koden_solves\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"knack_koden_solves\".*"})
	}

	return knackKodenSolfQuery{q}
}

// FindKnackKodenSolf retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKnackKodenSolf(ctx context.Context, exec boil.ContextExecutor, challengeID string, knackKodenTeamID string, selectCols ...string) (*KnackKodenSolf, error) {
	knackKodenSolfObj := &KnackKodenSolf{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"knack_koden_solves\" where \"challenge_id\"=$1 AND \"knack_koden_team_id\"=$2", sel,
	)

	q := queries.Raw(query, challengeID, knackKodenTeamID)

	err := q.Bind(ctx, exec, knackKodenSolfObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from knack_koden_solves")
	}

	if err = knackKodenSolfObj.doAfterSelectHooks(ctx, exec); err != nil {
		return knackKodenSolfObj, err
	}

	return knackKodenSolfObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KnackKodenSolf) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no knack_koden_solves provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(knackKodenSolfColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	knackKodenSolfInsertCacheMut.RLock()
	cache, cached := knackKodenSolfInsertCache[key]
	knackKodenSolfInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			knackKodenSolfAllColumns,
			knackKodenSolfColumnsWithDefault,
			knackKodenSolfColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"knack_koden_solves\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"knack_koden_solves\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into knack_koden_solves")
	}

	if !cached {
		knackKodenSolfInsertCacheMut.Lock()
		knackKodenSolfInsertCache[key] = cache
		knackKodenSolfInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KnackKodenSolf.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KnackKodenSolf) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	knackKodenSolfUpdateCacheMut.RLock()
	cache, cached := knackKodenSolfUpdateCache[key]
	knackKodenSolfUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			knackKodenSolfAllColumns,
			knackKodenSolfPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update knack_koden_solves, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"knack_koden_solves\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, knackKodenSolfPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, append(wl, knackKodenSolfPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update knack_koden_solves row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for knack_koden_solves")
	}

	if !cached {
		knackKodenSolfUpdateCacheMut.Lock()
		knackKodenSolfUpdateCache[key] = cache
		knackKodenSolfUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q knackKodenSolfQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for knack_koden_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for knack_koden_solves")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KnackKodenSolfSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"knack_koden_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, knackKodenSolfPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in knackKodenSolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all knackKodenSolf")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KnackKodenSolf) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no knack_koden_solves provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(knackKodenSolfColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	knackKodenSolfUpsertCacheMut.RLock()
	cache, cached := knackKodenSolfUpsertCache[key]
	knackKodenSolfUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			knackKodenSolfAllColumns,
			knackKodenSolfColumnsWithDefault,
			knackKodenSolfColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			knackKodenSolfAllColumns,
			knackKodenSolfPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert knack_koden_solves, could not build update column list")
		}

		ret := strmangle.SetComplement(knackKodenSolfAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(knackKodenSolfPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert knack_koden_solves, could not build conflict column list")
			}

			conflict = make([]string, len(knackKodenSolfPrimaryKeyColumns))
			copy(conflict, knackKodenSolfPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"knack_koden_solves\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(knackKodenSolfType, knackKodenSolfMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert knack_koden_solves")
	}

	if !cached {
		knackKodenSolfUpsertCacheMut.Lock()
		knackKodenSolfUpsertCache[key] = cache
		knackKodenSolfUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KnackKodenSolf record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KnackKodenSolf) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KnackKodenSolf provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), knackKodenSolfPrimaryKeyMapping)
	sql := "DELETE FROM \"knack_koden_solves\" WHERE \"challenge_id\"=$1 AND \"knack_koden_team_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from knack_koden_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for knack_koden_solves")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q knackKodenSolfQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no knackKodenSolfQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from knack_koden_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for knack_koden_solves")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KnackKodenSolfSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(knackKodenSolfBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"knack_koden_solves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, knackKodenSolfPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from knackKodenSolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for knack_koden_solves")
	}

	if len(knackKodenSolfAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KnackKodenSolf) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKnackKodenSolf(ctx, exec, o.ChallengeID, o.KnackKodenTeamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KnackKodenSolfSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KnackKodenSolfSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"knack_koden_solves\".* FROM \"knack_koden_solves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, knackKodenSolfPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KnackKodenSolfSlice")
	}

	*o = slice

	return nil
}

// KnackKodenSolfExists checks if the KnackKodenSolf row exists.
func KnackKodenSolfExists(ctx context.Context, exec boil.ContextExecutor, challengeID string, knackKodenTeamID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"knack_koden_solves\" where \"challenge_id\"=$1 AND \"knack_koden_team_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, challengeID, knackKodenTeamID)
	}
	row := exec.QueryRowContext(ctx, sql, challengeID, knackKodenTeamID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if knack_koden_solves exists")
	}

	return exists, nil
}

// Exists checks if the KnackKodenSolf row exists.
func (o *KnackKodenSolf) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KnackKodenSolfExists(ctx, exec, o.ChallengeID, o.KnackKodenTeamID)
}
