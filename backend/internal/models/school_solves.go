// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SchoolSolf is an object representing the database table.
type SchoolSolf struct {
	SchoolID    string    `boil:"school_id" json:"school_id" toml:"school_id" yaml:"school_id"`
	UserID      string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ChallengeID string    `boil:"challenge_id" json:"challenge_id" toml:"challenge_id" yaml:"challenge_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *schoolSolfR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schoolSolfL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchoolSolfColumns = struct {
	SchoolID    string
	UserID      string
	ChallengeID string
	CreatedAt   string
}{
	SchoolID:    "school_id",
	UserID:      "user_id",
	ChallengeID: "challenge_id",
	CreatedAt:   "created_at",
}

var SchoolSolfTableColumns = struct {
	SchoolID    string
	UserID      string
	ChallengeID string
	CreatedAt   string
}{
	SchoolID:    "school_solves.school_id",
	UserID:      "school_solves.user_id",
	ChallengeID: "school_solves.challenge_id",
	CreatedAt:   "school_solves.created_at",
}

// Generated where

var SchoolSolfWhere = struct {
	SchoolID    whereHelperstring
	UserID      whereHelperstring
	ChallengeID whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	SchoolID:    whereHelperstring{field: "\"school_solves\".\"school_id\""},
	UserID:      whereHelperstring{field: "\"school_solves\".\"user_id\""},
	ChallengeID: whereHelperstring{field: "\"school_solves\".\"challenge_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"school_solves\".\"created_at\""},
}

// SchoolSolfRels is where relationship names are stored.
var SchoolSolfRels = struct {
	Challenge string
	School    string
	User      string
}{
	Challenge: "Challenge",
	School:    "School",
	User:      "User",
}

// schoolSolfR is where relationships are stored.
type schoolSolfR struct {
	Challenge *Challenge `boil:"Challenge" json:"Challenge" toml:"Challenge" yaml:"Challenge"`
	School    *School    `boil:"School" json:"School" toml:"School" yaml:"School"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*schoolSolfR) NewStruct() *schoolSolfR {
	return &schoolSolfR{}
}

func (r *schoolSolfR) GetChallenge() *Challenge {
	if r == nil {
		return nil
	}
	return r.Challenge
}

func (r *schoolSolfR) GetSchool() *School {
	if r == nil {
		return nil
	}
	return r.School
}

func (r *schoolSolfR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// schoolSolfL is where Load methods for each relationship are stored.
type schoolSolfL struct{}

var (
	schoolSolfAllColumns            = []string{"school_id", "user_id", "challenge_id", "created_at"}
	schoolSolfColumnsWithoutDefault = []string{"school_id", "user_id", "challenge_id"}
	schoolSolfColumnsWithDefault    = []string{"created_at"}
	schoolSolfPrimaryKeyColumns     = []string{"school_id", "challenge_id", "user_id"}
	schoolSolfGeneratedColumns      = []string{}
)

type (
	// SchoolSolfSlice is an alias for a slice of pointers to SchoolSolf.
	// This should almost always be used instead of []SchoolSolf.
	SchoolSolfSlice []*SchoolSolf
	// SchoolSolfHook is the signature for custom SchoolSolf hook methods
	SchoolSolfHook func(context.Context, boil.ContextExecutor, *SchoolSolf) error

	schoolSolfQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schoolSolfType                 = reflect.TypeOf(&SchoolSolf{})
	schoolSolfMapping              = queries.MakeStructMapping(schoolSolfType)
	schoolSolfPrimaryKeyMapping, _ = queries.BindMapping(schoolSolfType, schoolSolfMapping, schoolSolfPrimaryKeyColumns)
	schoolSolfInsertCacheMut       sync.RWMutex
	schoolSolfInsertCache          = make(map[string]insertCache)
	schoolSolfUpdateCacheMut       sync.RWMutex
	schoolSolfUpdateCache          = make(map[string]updateCache)
	schoolSolfUpsertCacheMut       sync.RWMutex
	schoolSolfUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schoolSolfAfterSelectMu sync.Mutex
var schoolSolfAfterSelectHooks []SchoolSolfHook

var schoolSolfBeforeInsertMu sync.Mutex
var schoolSolfBeforeInsertHooks []SchoolSolfHook
var schoolSolfAfterInsertMu sync.Mutex
var schoolSolfAfterInsertHooks []SchoolSolfHook

var schoolSolfBeforeUpdateMu sync.Mutex
var schoolSolfBeforeUpdateHooks []SchoolSolfHook
var schoolSolfAfterUpdateMu sync.Mutex
var schoolSolfAfterUpdateHooks []SchoolSolfHook

var schoolSolfBeforeDeleteMu sync.Mutex
var schoolSolfBeforeDeleteHooks []SchoolSolfHook
var schoolSolfAfterDeleteMu sync.Mutex
var schoolSolfAfterDeleteHooks []SchoolSolfHook

var schoolSolfBeforeUpsertMu sync.Mutex
var schoolSolfBeforeUpsertHooks []SchoolSolfHook
var schoolSolfAfterUpsertMu sync.Mutex
var schoolSolfAfterUpsertHooks []SchoolSolfHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SchoolSolf) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SchoolSolf) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SchoolSolf) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SchoolSolf) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SchoolSolf) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SchoolSolf) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SchoolSolf) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SchoolSolf) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SchoolSolf) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolSolfAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchoolSolfHook registers your hook function for all future operations.
func AddSchoolSolfHook(hookPoint boil.HookPoint, schoolSolfHook SchoolSolfHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		schoolSolfAfterSelectMu.Lock()
		schoolSolfAfterSelectHooks = append(schoolSolfAfterSelectHooks, schoolSolfHook)
		schoolSolfAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		schoolSolfBeforeInsertMu.Lock()
		schoolSolfBeforeInsertHooks = append(schoolSolfBeforeInsertHooks, schoolSolfHook)
		schoolSolfBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		schoolSolfAfterInsertMu.Lock()
		schoolSolfAfterInsertHooks = append(schoolSolfAfterInsertHooks, schoolSolfHook)
		schoolSolfAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		schoolSolfBeforeUpdateMu.Lock()
		schoolSolfBeforeUpdateHooks = append(schoolSolfBeforeUpdateHooks, schoolSolfHook)
		schoolSolfBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		schoolSolfAfterUpdateMu.Lock()
		schoolSolfAfterUpdateHooks = append(schoolSolfAfterUpdateHooks, schoolSolfHook)
		schoolSolfAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		schoolSolfBeforeDeleteMu.Lock()
		schoolSolfBeforeDeleteHooks = append(schoolSolfBeforeDeleteHooks, schoolSolfHook)
		schoolSolfBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		schoolSolfAfterDeleteMu.Lock()
		schoolSolfAfterDeleteHooks = append(schoolSolfAfterDeleteHooks, schoolSolfHook)
		schoolSolfAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		schoolSolfBeforeUpsertMu.Lock()
		schoolSolfBeforeUpsertHooks = append(schoolSolfBeforeUpsertHooks, schoolSolfHook)
		schoolSolfBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		schoolSolfAfterUpsertMu.Lock()
		schoolSolfAfterUpsertHooks = append(schoolSolfAfterUpsertHooks, schoolSolfHook)
		schoolSolfAfterUpsertMu.Unlock()
	}
}

// One returns a single schoolSolf record from the query.
func (q schoolSolfQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SchoolSolf, error) {
	o := &SchoolSolf{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for school_solves")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SchoolSolf records from the query.
func (q schoolSolfQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchoolSolfSlice, error) {
	var o []*SchoolSolf

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SchoolSolf slice")
	}

	if len(schoolSolfAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SchoolSolf records in the query.
func (q schoolSolfQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count school_solves rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schoolSolfQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if school_solves exists")
	}

	return count > 0, nil
}

// Challenge pointed to by the foreign key.
func (o *SchoolSolf) Challenge(mods ...qm.QueryMod) challengeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChallengeID),
	}

	queryMods = append(queryMods, mods...)

	return Challenges(queryMods...)
}

// School pointed to by the foreign key.
func (o *SchoolSolf) School(mods ...qm.QueryMod) schoolQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SchoolID),
	}

	queryMods = append(queryMods, mods...)

	return Schools(queryMods...)
}

// User pointed to by the foreign key.
func (o *SchoolSolf) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadChallenge allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (schoolSolfL) LoadChallenge(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchoolSolf interface{}, mods queries.Applicator) error {
	var slice []*SchoolSolf
	var object *SchoolSolf

	if singular {
		var ok bool
		object, ok = maybeSchoolSolf.(*SchoolSolf)
		if !ok {
			object = new(SchoolSolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSchoolSolf))
			}
		}
	} else {
		s, ok := maybeSchoolSolf.(*[]*SchoolSolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSchoolSolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &schoolSolfR{}
		}
		args[object.ChallengeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schoolSolfR{}
			}

			args[obj.ChallengeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenges`),
		qm.WhereIn(`challenges.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Challenge")
	}

	var resultSlice []*Challenge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Challenge")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for challenges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenges")
	}

	if len(challengeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Challenge = foreign
		if foreign.R == nil {
			foreign.R = &challengeR{}
		}
		foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChallengeID == foreign.ID {
				local.R.Challenge = foreign
				if foreign.R == nil {
					foreign.R = &challengeR{}
				}
				foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, local)
				break
			}
		}
	}

	return nil
}

// LoadSchool allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (schoolSolfL) LoadSchool(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchoolSolf interface{}, mods queries.Applicator) error {
	var slice []*SchoolSolf
	var object *SchoolSolf

	if singular {
		var ok bool
		object, ok = maybeSchoolSolf.(*SchoolSolf)
		if !ok {
			object = new(SchoolSolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSchoolSolf))
			}
		}
	} else {
		s, ok := maybeSchoolSolf.(*[]*SchoolSolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSchoolSolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &schoolSolfR{}
		}
		args[object.SchoolID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schoolSolfR{}
			}

			args[obj.SchoolID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`schools`),
		qm.WhereIn(`schools.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load School")
	}

	var resultSlice []*School
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice School")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for schools")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schools")
	}

	if len(schoolAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.School = foreign
		if foreign.R == nil {
			foreign.R = &schoolR{}
		}
		foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SchoolID == foreign.ID {
				local.R.School = foreign
				if foreign.R == nil {
					foreign.R = &schoolR{}
				}
				foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (schoolSolfL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchoolSolf interface{}, mods queries.Applicator) error {
	var slice []*SchoolSolf
	var object *SchoolSolf

	if singular {
		var ok bool
		object, ok = maybeSchoolSolf.(*SchoolSolf)
		if !ok {
			object = new(SchoolSolf)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSchoolSolf))
			}
		}
	} else {
		s, ok := maybeSchoolSolf.(*[]*SchoolSolf)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSchoolSolf)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSchoolSolf))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &schoolSolfR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schoolSolfR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SchoolSolves = append(foreign.R.SchoolSolves, local)
				break
			}
		}
	}

	return nil
}

// SetChallenge of the schoolSolf to the related item.
// Sets o.R.Challenge to related.
// Adds o to related.R.SchoolSolves.
func (o *SchoolSolf) SetChallenge(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Challenge) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"school_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
		strmangle.WhereClause("\"", "\"", 2, schoolSolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SchoolID, o.ChallengeID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChallengeID = related.ID
	if o.R == nil {
		o.R = &schoolSolfR{
			Challenge: related,
		}
	} else {
		o.R.Challenge = related
	}

	if related.R == nil {
		related.R = &challengeR{
			SchoolSolves: SchoolSolfSlice{o},
		}
	} else {
		related.R.SchoolSolves = append(related.R.SchoolSolves, o)
	}

	return nil
}

// SetSchool of the schoolSolf to the related item.
// Sets o.R.School to related.
// Adds o to related.R.SchoolSolves.
func (o *SchoolSolf) SetSchool(ctx context.Context, exec boil.ContextExecutor, insert bool, related *School) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"school_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"school_id"}),
		strmangle.WhereClause("\"", "\"", 2, schoolSolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SchoolID, o.ChallengeID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SchoolID = related.ID
	if o.R == nil {
		o.R = &schoolSolfR{
			School: related,
		}
	} else {
		o.R.School = related
	}

	if related.R == nil {
		related.R = &schoolR{
			SchoolSolves: SchoolSolfSlice{o},
		}
	} else {
		related.R.SchoolSolves = append(related.R.SchoolSolves, o)
	}

	return nil
}

// SetUser of the schoolSolf to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SchoolSolves.
func (o *SchoolSolf) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"school_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, schoolSolfPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SchoolID, o.ChallengeID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &schoolSolfR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SchoolSolves: SchoolSolfSlice{o},
		}
	} else {
		related.R.SchoolSolves = append(related.R.SchoolSolves, o)
	}

	return nil
}

// SchoolSolves retrieves all the records using an executor.
func SchoolSolves(mods ...qm.QueryMod) schoolSolfQuery {
	mods = append(mods, qm.From("\"school_solves\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"school_solves\".*"})
	}

	return schoolSolfQuery{q}
}

// FindSchoolSolf retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchoolSolf(ctx context.Context, exec boil.ContextExecutor, schoolID string, challengeID string, userID string, selectCols ...string) (*SchoolSolf, error) {
	schoolSolfObj := &SchoolSolf{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"school_solves\" where \"school_id\"=$1 AND \"challenge_id\"=$2 AND \"user_id\"=$3", sel,
	)

	q := queries.Raw(query, schoolID, challengeID, userID)

	err := q.Bind(ctx, exec, schoolSolfObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from school_solves")
	}

	if err = schoolSolfObj.doAfterSelectHooks(ctx, exec); err != nil {
		return schoolSolfObj, err
	}

	return schoolSolfObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SchoolSolf) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no school_solves provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schoolSolfColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schoolSolfInsertCacheMut.RLock()
	cache, cached := schoolSolfInsertCache[key]
	schoolSolfInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schoolSolfAllColumns,
			schoolSolfColumnsWithDefault,
			schoolSolfColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schoolSolfType, schoolSolfMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schoolSolfType, schoolSolfMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"school_solves\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"school_solves\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into school_solves")
	}

	if !cached {
		schoolSolfInsertCacheMut.Lock()
		schoolSolfInsertCache[key] = cache
		schoolSolfInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SchoolSolf.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SchoolSolf) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schoolSolfUpdateCacheMut.RLock()
	cache, cached := schoolSolfUpdateCache[key]
	schoolSolfUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schoolSolfAllColumns,
			schoolSolfPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update school_solves, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"school_solves\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, schoolSolfPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schoolSolfType, schoolSolfMapping, append(wl, schoolSolfPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update school_solves row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for school_solves")
	}

	if !cached {
		schoolSolfUpdateCacheMut.Lock()
		schoolSolfUpdateCache[key] = cache
		schoolSolfUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schoolSolfQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for school_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for school_solves")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchoolSolfSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"school_solves\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, schoolSolfPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in schoolSolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all schoolSolf")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SchoolSolf) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no school_solves provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schoolSolfColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schoolSolfUpsertCacheMut.RLock()
	cache, cached := schoolSolfUpsertCache[key]
	schoolSolfUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			schoolSolfAllColumns,
			schoolSolfColumnsWithDefault,
			schoolSolfColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			schoolSolfAllColumns,
			schoolSolfPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert school_solves, could not build update column list")
		}

		ret := strmangle.SetComplement(schoolSolfAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(schoolSolfPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert school_solves, could not build conflict column list")
			}

			conflict = make([]string, len(schoolSolfPrimaryKeyColumns))
			copy(conflict, schoolSolfPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"school_solves\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(schoolSolfType, schoolSolfMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schoolSolfType, schoolSolfMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert school_solves")
	}

	if !cached {
		schoolSolfUpsertCacheMut.Lock()
		schoolSolfUpsertCache[key] = cache
		schoolSolfUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SchoolSolf record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SchoolSolf) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SchoolSolf provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schoolSolfPrimaryKeyMapping)
	sql := "DELETE FROM \"school_solves\" WHERE \"school_id\"=$1 AND \"challenge_id\"=$2 AND \"user_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from school_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for school_solves")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schoolSolfQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no schoolSolfQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from school_solves")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for school_solves")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchoolSolfSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schoolSolfBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"school_solves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schoolSolfPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schoolSolf slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for school_solves")
	}

	if len(schoolSolfAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SchoolSolf) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchoolSolf(ctx, exec, o.SchoolID, o.ChallengeID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchoolSolfSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchoolSolfSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolSolfPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"school_solves\".* FROM \"school_solves\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schoolSolfPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SchoolSolfSlice")
	}

	*o = slice

	return nil
}

// SchoolSolfExists checks if the SchoolSolf row exists.
func SchoolSolfExists(ctx context.Context, exec boil.ContextExecutor, schoolID string, challengeID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"school_solves\" where \"school_id\"=$1 AND \"challenge_id\"=$2 AND \"user_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, schoolID, challengeID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, schoolID, challengeID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if school_solves exists")
	}

	return exists, nil
}

// Exists checks if the SchoolSolf row exists.
func (o *SchoolSolf) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SchoolSolfExists(ctx, exec, o.SchoolID, o.ChallengeID, o.UserID)
}
