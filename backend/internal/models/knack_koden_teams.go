// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KnackKodenTeam is an object representing the database table.
type KnackKodenTeam struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeacherFullName string    `boil:"teacher_full_name" json:"teacher_full_name" toml:"teacher_full_name" yaml:"teacher_full_name"`
	TeacherEmail    string    `boil:"teacher_email" json:"teacher_email" toml:"teacher_email" yaml:"teacher_email"`
	TeacherPhonenr  string    `boil:"teacher_phonenr" json:"teacher_phonenr" toml:"teacher_phonenr" yaml:"teacher_phonenr"`
	SchoolName      string    `boil:"school_name" json:"school_name" toml:"school_name" yaml:"school_name"`
	ClassName       string    `boil:"class_name" json:"class_name" toml:"class_name" yaml:"class_name"`
	PostalCode      string    `boil:"postal_code" json:"postal_code" toml:"postal_code" yaml:"postal_code"`
	Password        string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	IPAddr          string    `boil:"ip_addr" json:"ip_addr" toml:"ip_addr" yaml:"ip_addr"`
	UserAgent       string    `boil:"user_agent" json:"user_agent" toml:"user_agent" yaml:"user_agent"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *knackKodenTeamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L knackKodenTeamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KnackKodenTeamColumns = struct {
	ID              string
	TeacherFullName string
	TeacherEmail    string
	TeacherPhonenr  string
	SchoolName      string
	ClassName       string
	PostalCode      string
	Password        string
	IPAddr          string
	UserAgent       string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	TeacherFullName: "teacher_full_name",
	TeacherEmail:    "teacher_email",
	TeacherPhonenr:  "teacher_phonenr",
	SchoolName:      "school_name",
	ClassName:       "class_name",
	PostalCode:      "postal_code",
	Password:        "password",
	IPAddr:          "ip_addr",
	UserAgent:       "user_agent",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var KnackKodenTeamTableColumns = struct {
	ID              string
	TeacherFullName string
	TeacherEmail    string
	TeacherPhonenr  string
	SchoolName      string
	ClassName       string
	PostalCode      string
	Password        string
	IPAddr          string
	UserAgent       string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "knack_koden_teams.id",
	TeacherFullName: "knack_koden_teams.teacher_full_name",
	TeacherEmail:    "knack_koden_teams.teacher_email",
	TeacherPhonenr:  "knack_koden_teams.teacher_phonenr",
	SchoolName:      "knack_koden_teams.school_name",
	ClassName:       "knack_koden_teams.class_name",
	PostalCode:      "knack_koden_teams.postal_code",
	Password:        "knack_koden_teams.password",
	IPAddr:          "knack_koden_teams.ip_addr",
	UserAgent:       "knack_koden_teams.user_agent",
	CreatedAt:       "knack_koden_teams.created_at",
	UpdatedAt:       "knack_koden_teams.updated_at",
}

// Generated where

var KnackKodenTeamWhere = struct {
	ID              whereHelperstring
	TeacherFullName whereHelperstring
	TeacherEmail    whereHelperstring
	TeacherPhonenr  whereHelperstring
	SchoolName      whereHelperstring
	ClassName       whereHelperstring
	PostalCode      whereHelperstring
	Password        whereHelperstring
	IPAddr          whereHelperstring
	UserAgent       whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "\"knack_koden_teams\".\"id\""},
	TeacherFullName: whereHelperstring{field: "\"knack_koden_teams\".\"teacher_full_name\""},
	TeacherEmail:    whereHelperstring{field: "\"knack_koden_teams\".\"teacher_email\""},
	TeacherPhonenr:  whereHelperstring{field: "\"knack_koden_teams\".\"teacher_phonenr\""},
	SchoolName:      whereHelperstring{field: "\"knack_koden_teams\".\"school_name\""},
	ClassName:       whereHelperstring{field: "\"knack_koden_teams\".\"class_name\""},
	PostalCode:      whereHelperstring{field: "\"knack_koden_teams\".\"postal_code\""},
	Password:        whereHelperstring{field: "\"knack_koden_teams\".\"password\""},
	IPAddr:          whereHelperstring{field: "\"knack_koden_teams\".\"ip_addr\""},
	UserAgent:       whereHelperstring{field: "\"knack_koden_teams\".\"user_agent\""},
	CreatedAt:       whereHelpertime_Time{field: "\"knack_koden_teams\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"knack_koden_teams\".\"updated_at\""},
}

// KnackKodenTeamRels is where relationship names are stored.
var KnackKodenTeamRels = struct {
	KnackKodenSolves string
}{
	KnackKodenSolves: "KnackKodenSolves",
}

// knackKodenTeamR is where relationships are stored.
type knackKodenTeamR struct {
	KnackKodenSolves KnackKodenSolfSlice `boil:"KnackKodenSolves" json:"KnackKodenSolves" toml:"KnackKodenSolves" yaml:"KnackKodenSolves"`
}

// NewStruct creates a new relationship struct
func (*knackKodenTeamR) NewStruct() *knackKodenTeamR {
	return &knackKodenTeamR{}
}

func (r *knackKodenTeamR) GetKnackKodenSolves() KnackKodenSolfSlice {
	if r == nil {
		return nil
	}
	return r.KnackKodenSolves
}

// knackKodenTeamL is where Load methods for each relationship are stored.
type knackKodenTeamL struct{}

var (
	knackKodenTeamAllColumns            = []string{"id", "teacher_full_name", "teacher_email", "teacher_phonenr", "school_name", "class_name", "postal_code", "password", "ip_addr", "user_agent", "created_at", "updated_at"}
	knackKodenTeamColumnsWithoutDefault = []string{"id", "teacher_full_name", "teacher_email", "teacher_phonenr", "school_name", "class_name", "postal_code", "password", "ip_addr", "user_agent", "created_at"}
	knackKodenTeamColumnsWithDefault    = []string{"updated_at"}
	knackKodenTeamPrimaryKeyColumns     = []string{"id"}
	knackKodenTeamGeneratedColumns      = []string{}
)

type (
	// KnackKodenTeamSlice is an alias for a slice of pointers to KnackKodenTeam.
	// This should almost always be used instead of []KnackKodenTeam.
	KnackKodenTeamSlice []*KnackKodenTeam
	// KnackKodenTeamHook is the signature for custom KnackKodenTeam hook methods
	KnackKodenTeamHook func(context.Context, boil.ContextExecutor, *KnackKodenTeam) error

	knackKodenTeamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	knackKodenTeamType                 = reflect.TypeOf(&KnackKodenTeam{})
	knackKodenTeamMapping              = queries.MakeStructMapping(knackKodenTeamType)
	knackKodenTeamPrimaryKeyMapping, _ = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, knackKodenTeamPrimaryKeyColumns)
	knackKodenTeamInsertCacheMut       sync.RWMutex
	knackKodenTeamInsertCache          = make(map[string]insertCache)
	knackKodenTeamUpdateCacheMut       sync.RWMutex
	knackKodenTeamUpdateCache          = make(map[string]updateCache)
	knackKodenTeamUpsertCacheMut       sync.RWMutex
	knackKodenTeamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var knackKodenTeamAfterSelectMu sync.Mutex
var knackKodenTeamAfterSelectHooks []KnackKodenTeamHook

var knackKodenTeamBeforeInsertMu sync.Mutex
var knackKodenTeamBeforeInsertHooks []KnackKodenTeamHook
var knackKodenTeamAfterInsertMu sync.Mutex
var knackKodenTeamAfterInsertHooks []KnackKodenTeamHook

var knackKodenTeamBeforeUpdateMu sync.Mutex
var knackKodenTeamBeforeUpdateHooks []KnackKodenTeamHook
var knackKodenTeamAfterUpdateMu sync.Mutex
var knackKodenTeamAfterUpdateHooks []KnackKodenTeamHook

var knackKodenTeamBeforeDeleteMu sync.Mutex
var knackKodenTeamBeforeDeleteHooks []KnackKodenTeamHook
var knackKodenTeamAfterDeleteMu sync.Mutex
var knackKodenTeamAfterDeleteHooks []KnackKodenTeamHook

var knackKodenTeamBeforeUpsertMu sync.Mutex
var knackKodenTeamBeforeUpsertHooks []KnackKodenTeamHook
var knackKodenTeamAfterUpsertMu sync.Mutex
var knackKodenTeamAfterUpsertHooks []KnackKodenTeamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KnackKodenTeam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KnackKodenTeam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KnackKodenTeam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KnackKodenTeam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KnackKodenTeam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KnackKodenTeam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KnackKodenTeam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KnackKodenTeam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KnackKodenTeam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range knackKodenTeamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKnackKodenTeamHook registers your hook function for all future operations.
func AddKnackKodenTeamHook(hookPoint boil.HookPoint, knackKodenTeamHook KnackKodenTeamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		knackKodenTeamAfterSelectMu.Lock()
		knackKodenTeamAfterSelectHooks = append(knackKodenTeamAfterSelectHooks, knackKodenTeamHook)
		knackKodenTeamAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		knackKodenTeamBeforeInsertMu.Lock()
		knackKodenTeamBeforeInsertHooks = append(knackKodenTeamBeforeInsertHooks, knackKodenTeamHook)
		knackKodenTeamBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		knackKodenTeamAfterInsertMu.Lock()
		knackKodenTeamAfterInsertHooks = append(knackKodenTeamAfterInsertHooks, knackKodenTeamHook)
		knackKodenTeamAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		knackKodenTeamBeforeUpdateMu.Lock()
		knackKodenTeamBeforeUpdateHooks = append(knackKodenTeamBeforeUpdateHooks, knackKodenTeamHook)
		knackKodenTeamBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		knackKodenTeamAfterUpdateMu.Lock()
		knackKodenTeamAfterUpdateHooks = append(knackKodenTeamAfterUpdateHooks, knackKodenTeamHook)
		knackKodenTeamAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		knackKodenTeamBeforeDeleteMu.Lock()
		knackKodenTeamBeforeDeleteHooks = append(knackKodenTeamBeforeDeleteHooks, knackKodenTeamHook)
		knackKodenTeamBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		knackKodenTeamAfterDeleteMu.Lock()
		knackKodenTeamAfterDeleteHooks = append(knackKodenTeamAfterDeleteHooks, knackKodenTeamHook)
		knackKodenTeamAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		knackKodenTeamBeforeUpsertMu.Lock()
		knackKodenTeamBeforeUpsertHooks = append(knackKodenTeamBeforeUpsertHooks, knackKodenTeamHook)
		knackKodenTeamBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		knackKodenTeamAfterUpsertMu.Lock()
		knackKodenTeamAfterUpsertHooks = append(knackKodenTeamAfterUpsertHooks, knackKodenTeamHook)
		knackKodenTeamAfterUpsertMu.Unlock()
	}
}

// One returns a single knackKodenTeam record from the query.
func (q knackKodenTeamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KnackKodenTeam, error) {
	o := &KnackKodenTeam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for knack_koden_teams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KnackKodenTeam records from the query.
func (q knackKodenTeamQuery) All(ctx context.Context, exec boil.ContextExecutor) (KnackKodenTeamSlice, error) {
	var o []*KnackKodenTeam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KnackKodenTeam slice")
	}

	if len(knackKodenTeamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KnackKodenTeam records in the query.
func (q knackKodenTeamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count knack_koden_teams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q knackKodenTeamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if knack_koden_teams exists")
	}

	return count > 0, nil
}

// KnackKodenSolves retrieves all the knack_koden_solf's KnackKodenSolves with an executor.
func (o *KnackKodenTeam) KnackKodenSolves(mods ...qm.QueryMod) knackKodenSolfQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"knack_koden_solves\".\"knack_koden_team_id\"=?", o.ID),
	)

	return KnackKodenSolves(queryMods...)
}

// LoadKnackKodenSolves allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (knackKodenTeamL) LoadKnackKodenSolves(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKnackKodenTeam interface{}, mods queries.Applicator) error {
	var slice []*KnackKodenTeam
	var object *KnackKodenTeam

	if singular {
		var ok bool
		object, ok = maybeKnackKodenTeam.(*KnackKodenTeam)
		if !ok {
			object = new(KnackKodenTeam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeKnackKodenTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeKnackKodenTeam))
			}
		}
	} else {
		s, ok := maybeKnackKodenTeam.(*[]*KnackKodenTeam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeKnackKodenTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeKnackKodenTeam))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &knackKodenTeamR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &knackKodenTeamR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`knack_koden_solves`),
		qm.WhereIn(`knack_koden_solves.knack_koden_team_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load knack_koden_solves")
	}

	var resultSlice []*KnackKodenSolf
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice knack_koden_solves")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on knack_koden_solves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for knack_koden_solves")
	}

	if len(knackKodenSolfAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KnackKodenSolves = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &knackKodenSolfR{}
			}
			foreign.R.KnackKodenTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KnackKodenTeamID {
				local.R.KnackKodenSolves = append(local.R.KnackKodenSolves, foreign)
				if foreign.R == nil {
					foreign.R = &knackKodenSolfR{}
				}
				foreign.R.KnackKodenTeam = local
				break
			}
		}
	}

	return nil
}

// AddKnackKodenSolves adds the given related objects to the existing relationships
// of the knack_koden_team, optionally inserting them as new records.
// Appends related to o.R.KnackKodenSolves.
// Sets related.R.KnackKodenTeam appropriately.
func (o *KnackKodenTeam) AddKnackKodenSolves(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KnackKodenSolf) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KnackKodenTeamID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"knack_koden_solves\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"knack_koden_team_id"}),
				strmangle.WhereClause("\"", "\"", 2, knackKodenSolfPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ChallengeID, rel.KnackKodenTeamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KnackKodenTeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &knackKodenTeamR{
			KnackKodenSolves: related,
		}
	} else {
		o.R.KnackKodenSolves = append(o.R.KnackKodenSolves, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &knackKodenSolfR{
				KnackKodenTeam: o,
			}
		} else {
			rel.R.KnackKodenTeam = o
		}
	}
	return nil
}

// KnackKodenTeams retrieves all the records using an executor.
func KnackKodenTeams(mods ...qm.QueryMod) knackKodenTeamQuery {
	mods = append(mods, qm.From("\"knack_koden_teams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"knack_koden_teams\".*"})
	}

	return knackKodenTeamQuery{q}
}

// FindKnackKodenTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKnackKodenTeam(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*KnackKodenTeam, error) {
	knackKodenTeamObj := &KnackKodenTeam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"knack_koden_teams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, knackKodenTeamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from knack_koden_teams")
	}

	if err = knackKodenTeamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return knackKodenTeamObj, err
	}

	return knackKodenTeamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KnackKodenTeam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no knack_koden_teams provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(knackKodenTeamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	knackKodenTeamInsertCacheMut.RLock()
	cache, cached := knackKodenTeamInsertCache[key]
	knackKodenTeamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			knackKodenTeamAllColumns,
			knackKodenTeamColumnsWithDefault,
			knackKodenTeamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"knack_koden_teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"knack_koden_teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into knack_koden_teams")
	}

	if !cached {
		knackKodenTeamInsertCacheMut.Lock()
		knackKodenTeamInsertCache[key] = cache
		knackKodenTeamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KnackKodenTeam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KnackKodenTeam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	knackKodenTeamUpdateCacheMut.RLock()
	cache, cached := knackKodenTeamUpdateCache[key]
	knackKodenTeamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			knackKodenTeamAllColumns,
			knackKodenTeamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update knack_koden_teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"knack_koden_teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, knackKodenTeamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, append(wl, knackKodenTeamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update knack_koden_teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for knack_koden_teams")
	}

	if !cached {
		knackKodenTeamUpdateCacheMut.Lock()
		knackKodenTeamUpdateCache[key] = cache
		knackKodenTeamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q knackKodenTeamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for knack_koden_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for knack_koden_teams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KnackKodenTeamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"knack_koden_teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, knackKodenTeamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in knackKodenTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all knackKodenTeam")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KnackKodenTeam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no knack_koden_teams provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(knackKodenTeamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	knackKodenTeamUpsertCacheMut.RLock()
	cache, cached := knackKodenTeamUpsertCache[key]
	knackKodenTeamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			knackKodenTeamAllColumns,
			knackKodenTeamColumnsWithDefault,
			knackKodenTeamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			knackKodenTeamAllColumns,
			knackKodenTeamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert knack_koden_teams, could not build update column list")
		}

		ret := strmangle.SetComplement(knackKodenTeamAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(knackKodenTeamPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert knack_koden_teams, could not build conflict column list")
			}

			conflict = make([]string, len(knackKodenTeamPrimaryKeyColumns))
			copy(conflict, knackKodenTeamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"knack_koden_teams\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(knackKodenTeamType, knackKodenTeamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert knack_koden_teams")
	}

	if !cached {
		knackKodenTeamUpsertCacheMut.Lock()
		knackKodenTeamUpsertCache[key] = cache
		knackKodenTeamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KnackKodenTeam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KnackKodenTeam) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KnackKodenTeam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), knackKodenTeamPrimaryKeyMapping)
	sql := "DELETE FROM \"knack_koden_teams\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from knack_koden_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for knack_koden_teams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q knackKodenTeamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no knackKodenTeamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from knack_koden_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for knack_koden_teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KnackKodenTeamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(knackKodenTeamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"knack_koden_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, knackKodenTeamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from knackKodenTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for knack_koden_teams")
	}

	if len(knackKodenTeamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KnackKodenTeam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKnackKodenTeam(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KnackKodenTeamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KnackKodenTeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), knackKodenTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"knack_koden_teams\".* FROM \"knack_koden_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, knackKodenTeamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KnackKodenTeamSlice")
	}

	*o = slice

	return nil
}

// KnackKodenTeamExists checks if the KnackKodenTeam row exists.
func KnackKodenTeamExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"knack_koden_teams\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if knack_koden_teams exists")
	}

	return exists, nil
}

// Exists checks if the KnackKodenTeam row exists.
func (o *KnackKodenTeam) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KnackKodenTeamExists(ctx, exec, o.ID)
}
