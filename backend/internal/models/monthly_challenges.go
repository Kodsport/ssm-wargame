// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonthlyChallenge is an object representing the database table.
type MonthlyChallenge struct {
	ChallengeID  string    `boil:"challenge_id" json:"challenge_id" toml:"challenge_id" yaml:"challenge_id"`
	StartDate    time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate      time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	DisplayMonth string    `boil:"display_month" json:"display_month" toml:"display_month" yaml:"display_month"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *monthlyChallengeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monthlyChallengeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonthlyChallengeColumns = struct {
	ChallengeID  string
	StartDate    string
	EndDate      string
	DisplayMonth string
	CreatedAt    string
	UpdatedAt    string
}{
	ChallengeID:  "challenge_id",
	StartDate:    "start_date",
	EndDate:      "end_date",
	DisplayMonth: "display_month",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var MonthlyChallengeTableColumns = struct {
	ChallengeID  string
	StartDate    string
	EndDate      string
	DisplayMonth string
	CreatedAt    string
	UpdatedAt    string
}{
	ChallengeID:  "monthly_challenges.challenge_id",
	StartDate:    "monthly_challenges.start_date",
	EndDate:      "monthly_challenges.end_date",
	DisplayMonth: "monthly_challenges.display_month",
	CreatedAt:    "monthly_challenges.created_at",
	UpdatedAt:    "monthly_challenges.updated_at",
}

// Generated where

var MonthlyChallengeWhere = struct {
	ChallengeID  whereHelperstring
	StartDate    whereHelpertime_Time
	EndDate      whereHelpertime_Time
	DisplayMonth whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpernull_Time
}{
	ChallengeID:  whereHelperstring{field: "\"monthly_challenges\".\"challenge_id\""},
	StartDate:    whereHelpertime_Time{field: "\"monthly_challenges\".\"start_date\""},
	EndDate:      whereHelpertime_Time{field: "\"monthly_challenges\".\"end_date\""},
	DisplayMonth: whereHelperstring{field: "\"monthly_challenges\".\"display_month\""},
	CreatedAt:    whereHelpertime_Time{field: "\"monthly_challenges\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"monthly_challenges\".\"updated_at\""},
}

// MonthlyChallengeRels is where relationship names are stored.
var MonthlyChallengeRels = struct {
	Challenge string
}{
	Challenge: "Challenge",
}

// monthlyChallengeR is where relationships are stored.
type monthlyChallengeR struct {
	Challenge *Challenge `boil:"Challenge" json:"Challenge" toml:"Challenge" yaml:"Challenge"`
}

// NewStruct creates a new relationship struct
func (*monthlyChallengeR) NewStruct() *monthlyChallengeR {
	return &monthlyChallengeR{}
}

func (r *monthlyChallengeR) GetChallenge() *Challenge {
	if r == nil {
		return nil
	}
	return r.Challenge
}

// monthlyChallengeL is where Load methods for each relationship are stored.
type monthlyChallengeL struct{}

var (
	monthlyChallengeAllColumns            = []string{"challenge_id", "start_date", "end_date", "display_month", "created_at", "updated_at"}
	monthlyChallengeColumnsWithoutDefault = []string{"challenge_id", "start_date", "end_date", "display_month"}
	monthlyChallengeColumnsWithDefault    = []string{"created_at", "updated_at"}
	monthlyChallengePrimaryKeyColumns     = []string{"challenge_id"}
	monthlyChallengeGeneratedColumns      = []string{}
)

type (
	// MonthlyChallengeSlice is an alias for a slice of pointers to MonthlyChallenge.
	// This should almost always be used instead of []MonthlyChallenge.
	MonthlyChallengeSlice []*MonthlyChallenge
	// MonthlyChallengeHook is the signature for custom MonthlyChallenge hook methods
	MonthlyChallengeHook func(context.Context, boil.ContextExecutor, *MonthlyChallenge) error

	monthlyChallengeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monthlyChallengeType                 = reflect.TypeOf(&MonthlyChallenge{})
	monthlyChallengeMapping              = queries.MakeStructMapping(monthlyChallengeType)
	monthlyChallengePrimaryKeyMapping, _ = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, monthlyChallengePrimaryKeyColumns)
	monthlyChallengeInsertCacheMut       sync.RWMutex
	monthlyChallengeInsertCache          = make(map[string]insertCache)
	monthlyChallengeUpdateCacheMut       sync.RWMutex
	monthlyChallengeUpdateCache          = make(map[string]updateCache)
	monthlyChallengeUpsertCacheMut       sync.RWMutex
	monthlyChallengeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monthlyChallengeAfterSelectMu sync.Mutex
var monthlyChallengeAfterSelectHooks []MonthlyChallengeHook

var monthlyChallengeBeforeInsertMu sync.Mutex
var monthlyChallengeBeforeInsertHooks []MonthlyChallengeHook
var monthlyChallengeAfterInsertMu sync.Mutex
var monthlyChallengeAfterInsertHooks []MonthlyChallengeHook

var monthlyChallengeBeforeUpdateMu sync.Mutex
var monthlyChallengeBeforeUpdateHooks []MonthlyChallengeHook
var monthlyChallengeAfterUpdateMu sync.Mutex
var monthlyChallengeAfterUpdateHooks []MonthlyChallengeHook

var monthlyChallengeBeforeDeleteMu sync.Mutex
var monthlyChallengeBeforeDeleteHooks []MonthlyChallengeHook
var monthlyChallengeAfterDeleteMu sync.Mutex
var monthlyChallengeAfterDeleteHooks []MonthlyChallengeHook

var monthlyChallengeBeforeUpsertMu sync.Mutex
var monthlyChallengeBeforeUpsertHooks []MonthlyChallengeHook
var monthlyChallengeAfterUpsertMu sync.Mutex
var monthlyChallengeAfterUpsertHooks []MonthlyChallengeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonthlyChallenge) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonthlyChallenge) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonthlyChallenge) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonthlyChallenge) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonthlyChallenge) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonthlyChallenge) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonthlyChallenge) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonthlyChallenge) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonthlyChallenge) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyChallengeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonthlyChallengeHook registers your hook function for all future operations.
func AddMonthlyChallengeHook(hookPoint boil.HookPoint, monthlyChallengeHook MonthlyChallengeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monthlyChallengeAfterSelectMu.Lock()
		monthlyChallengeAfterSelectHooks = append(monthlyChallengeAfterSelectHooks, monthlyChallengeHook)
		monthlyChallengeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		monthlyChallengeBeforeInsertMu.Lock()
		monthlyChallengeBeforeInsertHooks = append(monthlyChallengeBeforeInsertHooks, monthlyChallengeHook)
		monthlyChallengeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		monthlyChallengeAfterInsertMu.Lock()
		monthlyChallengeAfterInsertHooks = append(monthlyChallengeAfterInsertHooks, monthlyChallengeHook)
		monthlyChallengeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		monthlyChallengeBeforeUpdateMu.Lock()
		monthlyChallengeBeforeUpdateHooks = append(monthlyChallengeBeforeUpdateHooks, monthlyChallengeHook)
		monthlyChallengeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		monthlyChallengeAfterUpdateMu.Lock()
		monthlyChallengeAfterUpdateHooks = append(monthlyChallengeAfterUpdateHooks, monthlyChallengeHook)
		monthlyChallengeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		monthlyChallengeBeforeDeleteMu.Lock()
		monthlyChallengeBeforeDeleteHooks = append(monthlyChallengeBeforeDeleteHooks, monthlyChallengeHook)
		monthlyChallengeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		monthlyChallengeAfterDeleteMu.Lock()
		monthlyChallengeAfterDeleteHooks = append(monthlyChallengeAfterDeleteHooks, monthlyChallengeHook)
		monthlyChallengeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		monthlyChallengeBeforeUpsertMu.Lock()
		monthlyChallengeBeforeUpsertHooks = append(monthlyChallengeBeforeUpsertHooks, monthlyChallengeHook)
		monthlyChallengeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		monthlyChallengeAfterUpsertMu.Lock()
		monthlyChallengeAfterUpsertHooks = append(monthlyChallengeAfterUpsertHooks, monthlyChallengeHook)
		monthlyChallengeAfterUpsertMu.Unlock()
	}
}

// One returns a single monthlyChallenge record from the query.
func (q monthlyChallengeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonthlyChallenge, error) {
	o := &MonthlyChallenge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monthly_challenges")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonthlyChallenge records from the query.
func (q monthlyChallengeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonthlyChallengeSlice, error) {
	var o []*MonthlyChallenge

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonthlyChallenge slice")
	}

	if len(monthlyChallengeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonthlyChallenge records in the query.
func (q monthlyChallengeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monthly_challenges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monthlyChallengeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monthly_challenges exists")
	}

	return count > 0, nil
}

// Challenge pointed to by the foreign key.
func (o *MonthlyChallenge) Challenge(mods ...qm.QueryMod) challengeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChallengeID),
	}

	queryMods = append(queryMods, mods...)

	return Challenges(queryMods...)
}

// LoadChallenge allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monthlyChallengeL) LoadChallenge(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyChallenge interface{}, mods queries.Applicator) error {
	var slice []*MonthlyChallenge
	var object *MonthlyChallenge

	if singular {
		var ok bool
		object, ok = maybeMonthlyChallenge.(*MonthlyChallenge)
		if !ok {
			object = new(MonthlyChallenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyChallenge))
			}
		}
	} else {
		s, ok := maybeMonthlyChallenge.(*[]*MonthlyChallenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &monthlyChallengeR{}
		}
		args[object.ChallengeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyChallengeR{}
			}

			args[obj.ChallengeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenges`),
		qm.WhereIn(`challenges.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Challenge")
	}

	var resultSlice []*Challenge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Challenge")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for challenges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenges")
	}

	if len(challengeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Challenge = foreign
		if foreign.R == nil {
			foreign.R = &challengeR{}
		}
		foreign.R.MonthlyChallenge = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChallengeID == foreign.ID {
				local.R.Challenge = foreign
				if foreign.R == nil {
					foreign.R = &challengeR{}
				}
				foreign.R.MonthlyChallenge = local
				break
			}
		}
	}

	return nil
}

// SetChallenge of the monthlyChallenge to the related item.
// Sets o.R.Challenge to related.
// Adds o to related.R.MonthlyChallenge.
func (o *MonthlyChallenge) SetChallenge(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Challenge) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monthly_challenges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
		strmangle.WhereClause("\"", "\"", 2, monthlyChallengePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChallengeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChallengeID = related.ID
	if o.R == nil {
		o.R = &monthlyChallengeR{
			Challenge: related,
		}
	} else {
		o.R.Challenge = related
	}

	if related.R == nil {
		related.R = &challengeR{
			MonthlyChallenge: o,
		}
	} else {
		related.R.MonthlyChallenge = o
	}

	return nil
}

// MonthlyChallenges retrieves all the records using an executor.
func MonthlyChallenges(mods ...qm.QueryMod) monthlyChallengeQuery {
	mods = append(mods, qm.From("\"monthly_challenges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monthly_challenges\".*"})
	}

	return monthlyChallengeQuery{q}
}

// FindMonthlyChallenge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonthlyChallenge(ctx context.Context, exec boil.ContextExecutor, challengeID string, selectCols ...string) (*MonthlyChallenge, error) {
	monthlyChallengeObj := &MonthlyChallenge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monthly_challenges\" where \"challenge_id\"=$1", sel,
	)

	q := queries.Raw(query, challengeID)

	err := q.Bind(ctx, exec, monthlyChallengeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monthly_challenges")
	}

	if err = monthlyChallengeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monthlyChallengeObj, err
	}

	return monthlyChallengeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonthlyChallenge) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_challenges provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyChallengeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monthlyChallengeInsertCacheMut.RLock()
	cache, cached := monthlyChallengeInsertCache[key]
	monthlyChallengeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monthlyChallengeAllColumns,
			monthlyChallengeColumnsWithDefault,
			monthlyChallengeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monthly_challenges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monthly_challenges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monthly_challenges")
	}

	if !cached {
		monthlyChallengeInsertCacheMut.Lock()
		monthlyChallengeInsertCache[key] = cache
		monthlyChallengeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonthlyChallenge.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonthlyChallenge) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monthlyChallengeUpdateCacheMut.RLock()
	cache, cached := monthlyChallengeUpdateCache[key]
	monthlyChallengeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monthlyChallengeAllColumns,
			monthlyChallengePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monthly_challenges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monthly_challenges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monthlyChallengePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, append(wl, monthlyChallengePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monthly_challenges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monthly_challenges")
	}

	if !cached {
		monthlyChallengeUpdateCacheMut.Lock()
		monthlyChallengeUpdateCache[key] = cache
		monthlyChallengeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monthlyChallengeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monthly_challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monthly_challenges")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonthlyChallengeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyChallengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monthly_challenges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monthlyChallengePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monthlyChallenge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monthlyChallenge")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonthlyChallenge) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no monthly_challenges provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyChallengeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monthlyChallengeUpsertCacheMut.RLock()
	cache, cached := monthlyChallengeUpsertCache[key]
	monthlyChallengeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			monthlyChallengeAllColumns,
			monthlyChallengeColumnsWithDefault,
			monthlyChallengeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monthlyChallengeAllColumns,
			monthlyChallengePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monthly_challenges, could not build update column list")
		}

		ret := strmangle.SetComplement(monthlyChallengeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(monthlyChallengePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert monthly_challenges, could not build conflict column list")
			}

			conflict = make([]string, len(monthlyChallengePrimaryKeyColumns))
			copy(conflict, monthlyChallengePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monthly_challenges\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monthlyChallengeType, monthlyChallengeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monthly_challenges")
	}

	if !cached {
		monthlyChallengeUpsertCacheMut.Lock()
		monthlyChallengeUpsertCache[key] = cache
		monthlyChallengeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonthlyChallenge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonthlyChallenge) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonthlyChallenge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monthlyChallengePrimaryKeyMapping)
	sql := "DELETE FROM \"monthly_challenges\" WHERE \"challenge_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monthly_challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monthly_challenges")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monthlyChallengeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monthlyChallengeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthly_challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_challenges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonthlyChallengeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monthlyChallengeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyChallengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monthly_challenges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyChallengePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthlyChallenge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_challenges")
	}

	if len(monthlyChallengeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonthlyChallenge) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonthlyChallenge(ctx, exec, o.ChallengeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyChallengeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonthlyChallengeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyChallengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monthly_challenges\".* FROM \"monthly_challenges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyChallengePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonthlyChallengeSlice")
	}

	*o = slice

	return nil
}

// MonthlyChallengeExists checks if the MonthlyChallenge row exists.
func MonthlyChallengeExists(ctx context.Context, exec boil.ContextExecutor, challengeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monthly_challenges\" where \"challenge_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, challengeID)
	}
	row := exec.QueryRowContext(ctx, sql, challengeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monthly_challenges exists")
	}

	return exists, nil
}

// Exists checks if the MonthlyChallenge row exists.
func (o *MonthlyChallenge) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonthlyChallengeExists(ctx, exec, o.ChallengeID)
}
