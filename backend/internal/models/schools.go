// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// School is an object representing the database table.
type School struct {
	ID                   int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	GeographicalAreaCode string     `boil:"geographical_area_code" json:"geographical_area_code" toml:"geographical_area_code" yaml:"geographical_area_code"`
	RawSkolverketData    types.JSON `boil:"raw_skolverket_data" json:"raw_skolverket_data" toml:"raw_skolverket_data" yaml:"raw_skolverket_data"`
	IsHighSchool         bool       `boil:"is_high_school" json:"is_high_school" toml:"is_high_school" yaml:"is_high_school"`
	IsElementarySchool   bool       `boil:"is_elementary_school" json:"is_elementary_school" toml:"is_elementary_school" yaml:"is_elementary_school"`
	Latitude             float64    `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude            float64    `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	Status               string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt            time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *schoolR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schoolL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchoolColumns = struct {
	ID                   string
	Name                 string
	GeographicalAreaCode string
	RawSkolverketData    string
	IsHighSchool         string
	IsElementarySchool   string
	Latitude             string
	Longitude            string
	Status               string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "id",
	Name:                 "name",
	GeographicalAreaCode: "geographical_area_code",
	RawSkolverketData:    "raw_skolverket_data",
	IsHighSchool:         "is_high_school",
	IsElementarySchool:   "is_elementary_school",
	Latitude:             "latitude",
	Longitude:            "longitude",
	Status:               "status",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

var SchoolTableColumns = struct {
	ID                   string
	Name                 string
	GeographicalAreaCode string
	RawSkolverketData    string
	IsHighSchool         string
	IsElementarySchool   string
	Latitude             string
	Longitude            string
	Status               string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "schools.id",
	Name:                 "schools.name",
	GeographicalAreaCode: "schools.geographical_area_code",
	RawSkolverketData:    "schools.raw_skolverket_data",
	IsHighSchool:         "schools.is_high_school",
	IsElementarySchool:   "schools.is_elementary_school",
	Latitude:             "schools.latitude",
	Longitude:            "schools.longitude",
	Status:               "schools.status",
	CreatedAt:            "schools.created_at",
	UpdatedAt:            "schools.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SchoolWhere = struct {
	ID                   whereHelperint
	Name                 whereHelperstring
	GeographicalAreaCode whereHelperstring
	RawSkolverketData    whereHelpertypes_JSON
	IsHighSchool         whereHelperbool
	IsElementarySchool   whereHelperbool
	Latitude             whereHelperfloat64
	Longitude            whereHelperfloat64
	Status               whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpernull_Time
}{
	ID:                   whereHelperint{field: "\"schools\".\"id\""},
	Name:                 whereHelperstring{field: "\"schools\".\"name\""},
	GeographicalAreaCode: whereHelperstring{field: "\"schools\".\"geographical_area_code\""},
	RawSkolverketData:    whereHelpertypes_JSON{field: "\"schools\".\"raw_skolverket_data\""},
	IsHighSchool:         whereHelperbool{field: "\"schools\".\"is_high_school\""},
	IsElementarySchool:   whereHelperbool{field: "\"schools\".\"is_elementary_school\""},
	Latitude:             whereHelperfloat64{field: "\"schools\".\"latitude\""},
	Longitude:            whereHelperfloat64{field: "\"schools\".\"longitude\""},
	Status:               whereHelperstring{field: "\"schools\".\"status\""},
	CreatedAt:            whereHelpertime_Time{field: "\"schools\".\"created_at\""},
	UpdatedAt:            whereHelpernull_Time{field: "\"schools\".\"updated_at\""},
}

// SchoolRels is where relationship names are stored.
var SchoolRels = struct {
	Users string
}{
	Users: "Users",
}

// schoolR is where relationships are stored.
type schoolR struct {
	Users UserSlice `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*schoolR) NewStruct() *schoolR {
	return &schoolR{}
}

func (r *schoolR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// schoolL is where Load methods for each relationship are stored.
type schoolL struct{}

var (
	schoolAllColumns            = []string{"id", "name", "geographical_area_code", "raw_skolverket_data", "is_high_school", "is_elementary_school", "latitude", "longitude", "status", "created_at", "updated_at"}
	schoolColumnsWithoutDefault = []string{"id", "name", "geographical_area_code", "raw_skolverket_data", "is_high_school", "is_elementary_school", "latitude", "longitude", "status"}
	schoolColumnsWithDefault    = []string{"created_at", "updated_at"}
	schoolPrimaryKeyColumns     = []string{"id"}
	schoolGeneratedColumns      = []string{}
)

type (
	// SchoolSlice is an alias for a slice of pointers to School.
	// This should almost always be used instead of []School.
	SchoolSlice []*School
	// SchoolHook is the signature for custom School hook methods
	SchoolHook func(context.Context, boil.ContextExecutor, *School) error

	schoolQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schoolType                 = reflect.TypeOf(&School{})
	schoolMapping              = queries.MakeStructMapping(schoolType)
	schoolPrimaryKeyMapping, _ = queries.BindMapping(schoolType, schoolMapping, schoolPrimaryKeyColumns)
	schoolInsertCacheMut       sync.RWMutex
	schoolInsertCache          = make(map[string]insertCache)
	schoolUpdateCacheMut       sync.RWMutex
	schoolUpdateCache          = make(map[string]updateCache)
	schoolUpsertCacheMut       sync.RWMutex
	schoolUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schoolAfterSelectHooks []SchoolHook

var schoolBeforeInsertHooks []SchoolHook
var schoolAfterInsertHooks []SchoolHook

var schoolBeforeUpdateHooks []SchoolHook
var schoolAfterUpdateHooks []SchoolHook

var schoolBeforeDeleteHooks []SchoolHook
var schoolAfterDeleteHooks []SchoolHook

var schoolBeforeUpsertHooks []SchoolHook
var schoolAfterUpsertHooks []SchoolHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *School) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *School) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *School) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *School) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *School) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *School) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *School) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *School) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *School) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schoolAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchoolHook registers your hook function for all future operations.
func AddSchoolHook(hookPoint boil.HookPoint, schoolHook SchoolHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		schoolAfterSelectHooks = append(schoolAfterSelectHooks, schoolHook)
	case boil.BeforeInsertHook:
		schoolBeforeInsertHooks = append(schoolBeforeInsertHooks, schoolHook)
	case boil.AfterInsertHook:
		schoolAfterInsertHooks = append(schoolAfterInsertHooks, schoolHook)
	case boil.BeforeUpdateHook:
		schoolBeforeUpdateHooks = append(schoolBeforeUpdateHooks, schoolHook)
	case boil.AfterUpdateHook:
		schoolAfterUpdateHooks = append(schoolAfterUpdateHooks, schoolHook)
	case boil.BeforeDeleteHook:
		schoolBeforeDeleteHooks = append(schoolBeforeDeleteHooks, schoolHook)
	case boil.AfterDeleteHook:
		schoolAfterDeleteHooks = append(schoolAfterDeleteHooks, schoolHook)
	case boil.BeforeUpsertHook:
		schoolBeforeUpsertHooks = append(schoolBeforeUpsertHooks, schoolHook)
	case boil.AfterUpsertHook:
		schoolAfterUpsertHooks = append(schoolAfterUpsertHooks, schoolHook)
	}
}

// One returns a single school record from the query.
func (q schoolQuery) One(ctx context.Context, exec boil.ContextExecutor) (*School, error) {
	o := &School{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schools")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all School records from the query.
func (q schoolQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchoolSlice, error) {
	var o []*School

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to School slice")
	}

	if len(schoolAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all School records in the query.
func (q schoolQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schools rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schoolQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schools exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *School) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"school_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (schoolL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchool interface{}, mods queries.Applicator) error {
	var slice []*School
	var object *School

	if singular {
		var ok bool
		object, ok = maybeSchool.(*School)
		if !ok {
			object = new(School)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSchool)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSchool))
			}
		}
	} else {
		s, ok := maybeSchool.(*[]*School)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSchool)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSchool))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &schoolR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &schoolR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.school_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.School = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SchoolID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.School = local
				break
			}
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the school, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.School appropriately.
func (o *School) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SchoolID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"school_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SchoolID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &schoolR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				School: o,
			}
		} else {
			rel.R.School = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// school replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.School's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.School's Users accordingly.
func (o *School) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"school_id\" = null where \"school_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.SchoolID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.School = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.School.
func (o *School) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SchoolID, nil)
		if rel.R != nil {
			rel.R.School = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("school_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// Schools retrieves all the records using an executor.
func Schools(mods ...qm.QueryMod) schoolQuery {
	mods = append(mods, qm.From("\"schools\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"schools\".*"})
	}

	return schoolQuery{q}
}

// FindSchool retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchool(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*School, error) {
	schoolObj := &School{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schools\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, schoolObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schools")
	}

	if err = schoolObj.doAfterSelectHooks(ctx, exec); err != nil {
		return schoolObj, err
	}

	return schoolObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *School) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schools provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schoolColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schoolInsertCacheMut.RLock()
	cache, cached := schoolInsertCache[key]
	schoolInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schoolAllColumns,
			schoolColumnsWithDefault,
			schoolColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schoolType, schoolMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schoolType, schoolMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schools\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schools\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schools")
	}

	if !cached {
		schoolInsertCacheMut.Lock()
		schoolInsertCache[key] = cache
		schoolInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the School.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *School) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schoolUpdateCacheMut.RLock()
	cache, cached := schoolUpdateCache[key]
	schoolUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schoolAllColumns,
			schoolPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update schools, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schools\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, schoolPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schoolType, schoolMapping, append(wl, schoolPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update schools row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for schools")
	}

	if !cached {
		schoolUpdateCacheMut.Lock()
		schoolUpdateCache[key] = cache
		schoolUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schoolQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for schools")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for schools")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchoolSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schools\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, schoolPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in school slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all school")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *School) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schools provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schoolColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schoolUpsertCacheMut.RLock()
	cache, cached := schoolUpsertCache[key]
	schoolUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			schoolAllColumns,
			schoolColumnsWithDefault,
			schoolColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			schoolAllColumns,
			schoolPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert schools, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(schoolPrimaryKeyColumns))
			copy(conflict, schoolPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"schools\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(schoolType, schoolMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schoolType, schoolMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert schools")
	}

	if !cached {
		schoolUpsertCacheMut.Lock()
		schoolUpsertCache[key] = cache
		schoolUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single School record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *School) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no School provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schoolPrimaryKeyMapping)
	sql := "DELETE FROM \"schools\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from schools")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for schools")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schoolQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no schoolQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schools")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schools")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchoolSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schoolBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schools\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schoolPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from school slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schools")
	}

	if len(schoolAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *School) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchool(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchoolSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchoolSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schoolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schools\".* FROM \"schools\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schoolPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SchoolSlice")
	}

	*o = slice

	return nil
}

// SchoolExists checks if the School row exists.
func SchoolExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schools\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schools exists")
	}

	return exists, nil
}

// Exists checks if the School row exists.
func (o *School) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SchoolExists(ctx, exec, o.ID)
}
