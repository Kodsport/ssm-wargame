// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CTFEvent is an object representing the database table.
type CTFEvent struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	URL       string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *ctfEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ctfEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CTFEventColumns = struct {
	ID        string
	Name      string
	URL       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	URL:       "url",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var CTFEventTableColumns = struct {
	ID        string
	Name      string
	URL       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "ctf_events.id",
	Name:      "ctf_events.name",
	URL:       "ctf_events.url",
	CreatedAt: "ctf_events.created_at",
	UpdatedAt: "ctf_events.updated_at",
}

// Generated where

var CTFEventWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	URL       whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"ctf_events\".\"id\""},
	Name:      whereHelperstring{field: "\"ctf_events\".\"name\""},
	URL:       whereHelperstring{field: "\"ctf_events\".\"url\""},
	CreatedAt: whereHelpertime_Time{field: "\"ctf_events\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"ctf_events\".\"updated_at\""},
}

// CTFEventRels is where relationship names are stored.
var CTFEventRels = struct {
	Challenges string
}{
	Challenges: "Challenges",
}

// ctfEventR is where relationships are stored.
type ctfEventR struct {
	Challenges ChallengeSlice `boil:"Challenges" json:"Challenges" toml:"Challenges" yaml:"Challenges"`
}

// NewStruct creates a new relationship struct
func (*ctfEventR) NewStruct() *ctfEventR {
	return &ctfEventR{}
}

func (r *ctfEventR) GetChallenges() ChallengeSlice {
	if r == nil {
		return nil
	}
	return r.Challenges
}

// ctfEventL is where Load methods for each relationship are stored.
type ctfEventL struct{}

var (
	ctfEventAllColumns            = []string{"id", "name", "url", "created_at", "updated_at"}
	ctfEventColumnsWithoutDefault = []string{"id", "name", "url"}
	ctfEventColumnsWithDefault    = []string{"created_at", "updated_at"}
	ctfEventPrimaryKeyColumns     = []string{"id"}
	ctfEventGeneratedColumns      = []string{}
)

type (
	// CTFEventSlice is an alias for a slice of pointers to CTFEvent.
	// This should almost always be used instead of []CTFEvent.
	CTFEventSlice []*CTFEvent
	// CTFEventHook is the signature for custom CTFEvent hook methods
	CTFEventHook func(context.Context, boil.ContextExecutor, *CTFEvent) error

	ctfEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ctfEventType                 = reflect.TypeOf(&CTFEvent{})
	ctfEventMapping              = queries.MakeStructMapping(ctfEventType)
	ctfEventPrimaryKeyMapping, _ = queries.BindMapping(ctfEventType, ctfEventMapping, ctfEventPrimaryKeyColumns)
	ctfEventInsertCacheMut       sync.RWMutex
	ctfEventInsertCache          = make(map[string]insertCache)
	ctfEventUpdateCacheMut       sync.RWMutex
	ctfEventUpdateCache          = make(map[string]updateCache)
	ctfEventUpsertCacheMut       sync.RWMutex
	ctfEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ctfEventAfterSelectMu sync.Mutex
var ctfEventAfterSelectHooks []CTFEventHook

var ctfEventBeforeInsertMu sync.Mutex
var ctfEventBeforeInsertHooks []CTFEventHook
var ctfEventAfterInsertMu sync.Mutex
var ctfEventAfterInsertHooks []CTFEventHook

var ctfEventBeforeUpdateMu sync.Mutex
var ctfEventBeforeUpdateHooks []CTFEventHook
var ctfEventAfterUpdateMu sync.Mutex
var ctfEventAfterUpdateHooks []CTFEventHook

var ctfEventBeforeDeleteMu sync.Mutex
var ctfEventBeforeDeleteHooks []CTFEventHook
var ctfEventAfterDeleteMu sync.Mutex
var ctfEventAfterDeleteHooks []CTFEventHook

var ctfEventBeforeUpsertMu sync.Mutex
var ctfEventBeforeUpsertHooks []CTFEventHook
var ctfEventAfterUpsertMu sync.Mutex
var ctfEventAfterUpsertHooks []CTFEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CTFEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CTFEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CTFEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CTFEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CTFEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CTFEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CTFEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CTFEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CTFEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ctfEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCTFEventHook registers your hook function for all future operations.
func AddCTFEventHook(hookPoint boil.HookPoint, ctfEventHook CTFEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ctfEventAfterSelectMu.Lock()
		ctfEventAfterSelectHooks = append(ctfEventAfterSelectHooks, ctfEventHook)
		ctfEventAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ctfEventBeforeInsertMu.Lock()
		ctfEventBeforeInsertHooks = append(ctfEventBeforeInsertHooks, ctfEventHook)
		ctfEventBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ctfEventAfterInsertMu.Lock()
		ctfEventAfterInsertHooks = append(ctfEventAfterInsertHooks, ctfEventHook)
		ctfEventAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ctfEventBeforeUpdateMu.Lock()
		ctfEventBeforeUpdateHooks = append(ctfEventBeforeUpdateHooks, ctfEventHook)
		ctfEventBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ctfEventAfterUpdateMu.Lock()
		ctfEventAfterUpdateHooks = append(ctfEventAfterUpdateHooks, ctfEventHook)
		ctfEventAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ctfEventBeforeDeleteMu.Lock()
		ctfEventBeforeDeleteHooks = append(ctfEventBeforeDeleteHooks, ctfEventHook)
		ctfEventBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ctfEventAfterDeleteMu.Lock()
		ctfEventAfterDeleteHooks = append(ctfEventAfterDeleteHooks, ctfEventHook)
		ctfEventAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ctfEventBeforeUpsertMu.Lock()
		ctfEventBeforeUpsertHooks = append(ctfEventBeforeUpsertHooks, ctfEventHook)
		ctfEventBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ctfEventAfterUpsertMu.Lock()
		ctfEventAfterUpsertHooks = append(ctfEventAfterUpsertHooks, ctfEventHook)
		ctfEventAfterUpsertMu.Unlock()
	}
}

// One returns a single ctfEvent record from the query.
func (q ctfEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CTFEvent, error) {
	o := &CTFEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ctf_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CTFEvent records from the query.
func (q ctfEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (CTFEventSlice, error) {
	var o []*CTFEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CTFEvent slice")
	}

	if len(ctfEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CTFEvent records in the query.
func (q ctfEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ctf_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ctfEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ctf_events exists")
	}

	return count > 0, nil
}

// Challenges retrieves all the challenge's Challenges with an executor.
func (o *CTFEvent) Challenges(mods ...qm.QueryMod) challengeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"challenges\".\"ctf_event_id\"=?", o.ID),
	)

	return Challenges(queryMods...)
}

// LoadChallenges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ctfEventL) LoadChallenges(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCTFEvent interface{}, mods queries.Applicator) error {
	var slice []*CTFEvent
	var object *CTFEvent

	if singular {
		var ok bool
		object, ok = maybeCTFEvent.(*CTFEvent)
		if !ok {
			object = new(CTFEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCTFEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCTFEvent))
			}
		}
	} else {
		s, ok := maybeCTFEvent.(*[]*CTFEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCTFEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCTFEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ctfEventR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ctfEventR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenges`),
		qm.WhereIn(`challenges.ctf_event_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load challenges")
	}

	var resultSlice []*Challenge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice challenges")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on challenges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenges")
	}

	if len(challengeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Challenges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &challengeR{}
			}
			foreign.R.CTFEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CTFEventID) {
				local.R.Challenges = append(local.R.Challenges, foreign)
				if foreign.R == nil {
					foreign.R = &challengeR{}
				}
				foreign.R.CTFEvent = local
				break
			}
		}
	}

	return nil
}

// AddChallenges adds the given related objects to the existing relationships
// of the ctf_event, optionally inserting them as new records.
// Appends related to o.R.Challenges.
// Sets related.R.CTFEvent appropriately.
func (o *CTFEvent) AddChallenges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Challenge) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CTFEventID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"challenges\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ctf_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, challengePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CTFEventID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &ctfEventR{
			Challenges: related,
		}
	} else {
		o.R.Challenges = append(o.R.Challenges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &challengeR{
				CTFEvent: o,
			}
		} else {
			rel.R.CTFEvent = o
		}
	}
	return nil
}

// SetChallenges removes all previously related items of the
// ctf_event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CTFEvent's Challenges accordingly.
// Replaces o.R.Challenges with related.
// Sets related.R.CTFEvent's Challenges accordingly.
func (o *CTFEvent) SetChallenges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Challenge) error {
	query := "update \"challenges\" set \"ctf_event_id\" = null where \"ctf_event_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Challenges {
			queries.SetScanner(&rel.CTFEventID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CTFEvent = nil
		}
		o.R.Challenges = nil
	}

	return o.AddChallenges(ctx, exec, insert, related...)
}

// RemoveChallenges relationships from objects passed in.
// Removes related items from R.Challenges (uses pointer comparison, removal does not keep order)
// Sets related.R.CTFEvent.
func (o *CTFEvent) RemoveChallenges(ctx context.Context, exec boil.ContextExecutor, related ...*Challenge) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CTFEventID, nil)
		if rel.R != nil {
			rel.R.CTFEvent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ctf_event_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Challenges {
			if rel != ri {
				continue
			}

			ln := len(o.R.Challenges)
			if ln > 1 && i < ln-1 {
				o.R.Challenges[i] = o.R.Challenges[ln-1]
			}
			o.R.Challenges = o.R.Challenges[:ln-1]
			break
		}
	}

	return nil
}

// CTFEvents retrieves all the records using an executor.
func CTFEvents(mods ...qm.QueryMod) ctfEventQuery {
	mods = append(mods, qm.From("\"ctf_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ctf_events\".*"})
	}

	return ctfEventQuery{q}
}

// FindCTFEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCTFEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CTFEvent, error) {
	ctfEventObj := &CTFEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ctf_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ctfEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ctf_events")
	}

	if err = ctfEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ctfEventObj, err
	}

	return ctfEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CTFEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ctf_events provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ctfEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ctfEventInsertCacheMut.RLock()
	cache, cached := ctfEventInsertCache[key]
	ctfEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ctfEventAllColumns,
			ctfEventColumnsWithDefault,
			ctfEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ctfEventType, ctfEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ctfEventType, ctfEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ctf_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ctf_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ctf_events")
	}

	if !cached {
		ctfEventInsertCacheMut.Lock()
		ctfEventInsertCache[key] = cache
		ctfEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CTFEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CTFEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ctfEventUpdateCacheMut.RLock()
	cache, cached := ctfEventUpdateCache[key]
	ctfEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ctfEventAllColumns,
			ctfEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ctf_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ctf_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ctfEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ctfEventType, ctfEventMapping, append(wl, ctfEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ctf_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ctf_events")
	}

	if !cached {
		ctfEventUpdateCacheMut.Lock()
		ctfEventUpdateCache[key] = cache
		ctfEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ctfEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ctf_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ctf_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CTFEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ctfEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ctf_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ctfEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ctfEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ctfEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CTFEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no ctf_events provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ctfEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ctfEventUpsertCacheMut.RLock()
	cache, cached := ctfEventUpsertCache[key]
	ctfEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ctfEventAllColumns,
			ctfEventColumnsWithDefault,
			ctfEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ctfEventAllColumns,
			ctfEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ctf_events, could not build update column list")
		}

		ret := strmangle.SetComplement(ctfEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ctfEventPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert ctf_events, could not build conflict column list")
			}

			conflict = make([]string, len(ctfEventPrimaryKeyColumns))
			copy(conflict, ctfEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ctf_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ctfEventType, ctfEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ctfEventType, ctfEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ctf_events")
	}

	if !cached {
		ctfEventUpsertCacheMut.Lock()
		ctfEventUpsertCache[key] = cache
		ctfEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CTFEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CTFEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CTFEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ctfEventPrimaryKeyMapping)
	sql := "DELETE FROM \"ctf_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ctf_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ctf_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ctfEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ctfEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ctf_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ctf_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CTFEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ctfEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ctfEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ctf_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ctfEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ctfEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ctf_events")
	}

	if len(ctfEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CTFEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCTFEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CTFEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CTFEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ctfEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ctf_events\".* FROM \"ctf_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ctfEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CTFEventSlice")
	}

	*o = slice

	return nil
}

// CTFEventExists checks if the CTFEvent row exists.
func CTFEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ctf_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ctf_events exists")
	}

	return exists, nil
}

// Exists checks if the CTFEvent row exists.
func (o *CTFEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CTFEventExists(ctx, exec, o.ID)
}
