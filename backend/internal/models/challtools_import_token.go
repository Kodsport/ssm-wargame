// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChalltoolsImportToken is an object representing the database table.
type ChalltoolsImportToken struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *challtoolsImportTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L challtoolsImportTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChalltoolsImportTokenColumns = struct {
	ID        string
	Token     string
	ExpiresAt string
	CreatedAt string
}{
	ID:        "id",
	Token:     "token",
	ExpiresAt: "expires_at",
	CreatedAt: "created_at",
}

var ChalltoolsImportTokenTableColumns = struct {
	ID        string
	Token     string
	ExpiresAt string
	CreatedAt string
}{
	ID:        "challtools_import_token.id",
	Token:     "challtools_import_token.token",
	ExpiresAt: "challtools_import_token.expires_at",
	CreatedAt: "challtools_import_token.created_at",
}

// Generated where

var ChalltoolsImportTokenWhere = struct {
	ID        whereHelperstring
	Token     whereHelperstring
	ExpiresAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"challtools_import_token\".\"id\""},
	Token:     whereHelperstring{field: "\"challtools_import_token\".\"token\""},
	ExpiresAt: whereHelpertime_Time{field: "\"challtools_import_token\".\"expires_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"challtools_import_token\".\"created_at\""},
}

// ChalltoolsImportTokenRels is where relationship names are stored.
var ChalltoolsImportTokenRels = struct {
}{}

// challtoolsImportTokenR is where relationships are stored.
type challtoolsImportTokenR struct {
}

// NewStruct creates a new relationship struct
func (*challtoolsImportTokenR) NewStruct() *challtoolsImportTokenR {
	return &challtoolsImportTokenR{}
}

// challtoolsImportTokenL is where Load methods for each relationship are stored.
type challtoolsImportTokenL struct{}

var (
	challtoolsImportTokenAllColumns            = []string{"id", "token", "expires_at", "created_at"}
	challtoolsImportTokenColumnsWithoutDefault = []string{"id", "token", "expires_at"}
	challtoolsImportTokenColumnsWithDefault    = []string{"created_at"}
	challtoolsImportTokenPrimaryKeyColumns     = []string{"id"}
	challtoolsImportTokenGeneratedColumns      = []string{}
)

type (
	// ChalltoolsImportTokenSlice is an alias for a slice of pointers to ChalltoolsImportToken.
	// This should almost always be used instead of []ChalltoolsImportToken.
	ChalltoolsImportTokenSlice []*ChalltoolsImportToken
	// ChalltoolsImportTokenHook is the signature for custom ChalltoolsImportToken hook methods
	ChalltoolsImportTokenHook func(context.Context, boil.ContextExecutor, *ChalltoolsImportToken) error

	challtoolsImportTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	challtoolsImportTokenType                 = reflect.TypeOf(&ChalltoolsImportToken{})
	challtoolsImportTokenMapping              = queries.MakeStructMapping(challtoolsImportTokenType)
	challtoolsImportTokenPrimaryKeyMapping, _ = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, challtoolsImportTokenPrimaryKeyColumns)
	challtoolsImportTokenInsertCacheMut       sync.RWMutex
	challtoolsImportTokenInsertCache          = make(map[string]insertCache)
	challtoolsImportTokenUpdateCacheMut       sync.RWMutex
	challtoolsImportTokenUpdateCache          = make(map[string]updateCache)
	challtoolsImportTokenUpsertCacheMut       sync.RWMutex
	challtoolsImportTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var challtoolsImportTokenAfterSelectMu sync.Mutex
var challtoolsImportTokenAfterSelectHooks []ChalltoolsImportTokenHook

var challtoolsImportTokenBeforeInsertMu sync.Mutex
var challtoolsImportTokenBeforeInsertHooks []ChalltoolsImportTokenHook
var challtoolsImportTokenAfterInsertMu sync.Mutex
var challtoolsImportTokenAfterInsertHooks []ChalltoolsImportTokenHook

var challtoolsImportTokenBeforeUpdateMu sync.Mutex
var challtoolsImportTokenBeforeUpdateHooks []ChalltoolsImportTokenHook
var challtoolsImportTokenAfterUpdateMu sync.Mutex
var challtoolsImportTokenAfterUpdateHooks []ChalltoolsImportTokenHook

var challtoolsImportTokenBeforeDeleteMu sync.Mutex
var challtoolsImportTokenBeforeDeleteHooks []ChalltoolsImportTokenHook
var challtoolsImportTokenAfterDeleteMu sync.Mutex
var challtoolsImportTokenAfterDeleteHooks []ChalltoolsImportTokenHook

var challtoolsImportTokenBeforeUpsertMu sync.Mutex
var challtoolsImportTokenBeforeUpsertHooks []ChalltoolsImportTokenHook
var challtoolsImportTokenAfterUpsertMu sync.Mutex
var challtoolsImportTokenAfterUpsertHooks []ChalltoolsImportTokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChalltoolsImportToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChalltoolsImportToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChalltoolsImportToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChalltoolsImportToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChalltoolsImportToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChalltoolsImportToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChalltoolsImportToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChalltoolsImportToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChalltoolsImportToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challtoolsImportTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChalltoolsImportTokenHook registers your hook function for all future operations.
func AddChalltoolsImportTokenHook(hookPoint boil.HookPoint, challtoolsImportTokenHook ChalltoolsImportTokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		challtoolsImportTokenAfterSelectMu.Lock()
		challtoolsImportTokenAfterSelectHooks = append(challtoolsImportTokenAfterSelectHooks, challtoolsImportTokenHook)
		challtoolsImportTokenAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		challtoolsImportTokenBeforeInsertMu.Lock()
		challtoolsImportTokenBeforeInsertHooks = append(challtoolsImportTokenBeforeInsertHooks, challtoolsImportTokenHook)
		challtoolsImportTokenBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		challtoolsImportTokenAfterInsertMu.Lock()
		challtoolsImportTokenAfterInsertHooks = append(challtoolsImportTokenAfterInsertHooks, challtoolsImportTokenHook)
		challtoolsImportTokenAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		challtoolsImportTokenBeforeUpdateMu.Lock()
		challtoolsImportTokenBeforeUpdateHooks = append(challtoolsImportTokenBeforeUpdateHooks, challtoolsImportTokenHook)
		challtoolsImportTokenBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		challtoolsImportTokenAfterUpdateMu.Lock()
		challtoolsImportTokenAfterUpdateHooks = append(challtoolsImportTokenAfterUpdateHooks, challtoolsImportTokenHook)
		challtoolsImportTokenAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		challtoolsImportTokenBeforeDeleteMu.Lock()
		challtoolsImportTokenBeforeDeleteHooks = append(challtoolsImportTokenBeforeDeleteHooks, challtoolsImportTokenHook)
		challtoolsImportTokenBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		challtoolsImportTokenAfterDeleteMu.Lock()
		challtoolsImportTokenAfterDeleteHooks = append(challtoolsImportTokenAfterDeleteHooks, challtoolsImportTokenHook)
		challtoolsImportTokenAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		challtoolsImportTokenBeforeUpsertMu.Lock()
		challtoolsImportTokenBeforeUpsertHooks = append(challtoolsImportTokenBeforeUpsertHooks, challtoolsImportTokenHook)
		challtoolsImportTokenBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		challtoolsImportTokenAfterUpsertMu.Lock()
		challtoolsImportTokenAfterUpsertHooks = append(challtoolsImportTokenAfterUpsertHooks, challtoolsImportTokenHook)
		challtoolsImportTokenAfterUpsertMu.Unlock()
	}
}

// One returns a single challtoolsImportToken record from the query.
func (q challtoolsImportTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChalltoolsImportToken, error) {
	o := &ChalltoolsImportToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for challtools_import_token")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChalltoolsImportToken records from the query.
func (q challtoolsImportTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChalltoolsImportTokenSlice, error) {
	var o []*ChalltoolsImportToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChalltoolsImportToken slice")
	}

	if len(challtoolsImportTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChalltoolsImportToken records in the query.
func (q challtoolsImportTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count challtools_import_token rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q challtoolsImportTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if challtools_import_token exists")
	}

	return count > 0, nil
}

// ChalltoolsImportTokens retrieves all the records using an executor.
func ChalltoolsImportTokens(mods ...qm.QueryMod) challtoolsImportTokenQuery {
	mods = append(mods, qm.From("\"challtools_import_token\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"challtools_import_token\".*"})
	}

	return challtoolsImportTokenQuery{q}
}

// FindChalltoolsImportToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChalltoolsImportToken(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ChalltoolsImportToken, error) {
	challtoolsImportTokenObj := &ChalltoolsImportToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"challtools_import_token\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, challtoolsImportTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from challtools_import_token")
	}

	if err = challtoolsImportTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return challtoolsImportTokenObj, err
	}

	return challtoolsImportTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChalltoolsImportToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no challtools_import_token provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challtoolsImportTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	challtoolsImportTokenInsertCacheMut.RLock()
	cache, cached := challtoolsImportTokenInsertCache[key]
	challtoolsImportTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			challtoolsImportTokenAllColumns,
			challtoolsImportTokenColumnsWithDefault,
			challtoolsImportTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"challtools_import_token\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"challtools_import_token\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into challtools_import_token")
	}

	if !cached {
		challtoolsImportTokenInsertCacheMut.Lock()
		challtoolsImportTokenInsertCache[key] = cache
		challtoolsImportTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChalltoolsImportToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChalltoolsImportToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	challtoolsImportTokenUpdateCacheMut.RLock()
	cache, cached := challtoolsImportTokenUpdateCache[key]
	challtoolsImportTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			challtoolsImportTokenAllColumns,
			challtoolsImportTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update challtools_import_token, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"challtools_import_token\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, challtoolsImportTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, append(wl, challtoolsImportTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update challtools_import_token row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for challtools_import_token")
	}

	if !cached {
		challtoolsImportTokenUpdateCacheMut.Lock()
		challtoolsImportTokenUpdateCache[key] = cache
		challtoolsImportTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q challtoolsImportTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for challtools_import_token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for challtools_import_token")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChalltoolsImportTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challtoolsImportTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"challtools_import_token\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, challtoolsImportTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in challtoolsImportToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all challtoolsImportToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChalltoolsImportToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no challtools_import_token provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challtoolsImportTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	challtoolsImportTokenUpsertCacheMut.RLock()
	cache, cached := challtoolsImportTokenUpsertCache[key]
	challtoolsImportTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			challtoolsImportTokenAllColumns,
			challtoolsImportTokenColumnsWithDefault,
			challtoolsImportTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			challtoolsImportTokenAllColumns,
			challtoolsImportTokenPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert challtools_import_token, could not build update column list")
		}

		ret := strmangle.SetComplement(challtoolsImportTokenAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(challtoolsImportTokenPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert challtools_import_token, could not build conflict column list")
			}

			conflict = make([]string, len(challtoolsImportTokenPrimaryKeyColumns))
			copy(conflict, challtoolsImportTokenPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"challtools_import_token\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(challtoolsImportTokenType, challtoolsImportTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert challtools_import_token")
	}

	if !cached {
		challtoolsImportTokenUpsertCacheMut.Lock()
		challtoolsImportTokenUpsertCache[key] = cache
		challtoolsImportTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChalltoolsImportToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChalltoolsImportToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChalltoolsImportToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), challtoolsImportTokenPrimaryKeyMapping)
	sql := "DELETE FROM \"challtools_import_token\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from challtools_import_token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for challtools_import_token")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q challtoolsImportTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no challtoolsImportTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from challtools_import_token")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for challtools_import_token")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChalltoolsImportTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(challtoolsImportTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challtoolsImportTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"challtools_import_token\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, challtoolsImportTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from challtoolsImportToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for challtools_import_token")
	}

	if len(challtoolsImportTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChalltoolsImportToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChalltoolsImportToken(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChalltoolsImportTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChalltoolsImportTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challtoolsImportTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"challtools_import_token\".* FROM \"challtools_import_token\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, challtoolsImportTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChalltoolsImportTokenSlice")
	}

	*o = slice

	return nil
}

// ChalltoolsImportTokenExists checks if the ChalltoolsImportToken row exists.
func ChalltoolsImportTokenExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"challtools_import_token\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if challtools_import_token exists")
	}

	return exists, nil
}

// Exists checks if the ChalltoolsImportToken row exists.
func (o *ChalltoolsImportToken) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChalltoolsImportTokenExists(ctx, exec, o.ID)
}
