// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Course is an object representing the database table.
type Course struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Category    string    `boil:"category" json:"category" toml:"category" yaml:"category"`
	Difficulty  string    `boil:"difficulty" json:"difficulty" toml:"difficulty" yaml:"difficulty"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Publish     bool      `boil:"publish" json:"publish" toml:"publish" yaml:"publish"`
	Title       string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Slug        string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`

	R *courseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L courseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourseColumns = struct {
	ID          string
	Category    string
	Difficulty  string
	Description string
	CreatedAt   string
	UpdatedAt   string
	Publish     string
	Title       string
	Slug        string
}{
	ID:          "id",
	Category:    "category",
	Difficulty:  "difficulty",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Publish:     "publish",
	Title:       "title",
	Slug:        "slug",
}

var CourseTableColumns = struct {
	ID          string
	Category    string
	Difficulty  string
	Description string
	CreatedAt   string
	UpdatedAt   string
	Publish     string
	Title       string
	Slug        string
}{
	ID:          "courses.id",
	Category:    "courses.category",
	Difficulty:  "courses.difficulty",
	Description: "courses.description",
	CreatedAt:   "courses.created_at",
	UpdatedAt:   "courses.updated_at",
	Publish:     "courses.publish",
	Title:       "courses.title",
	Slug:        "courses.slug",
}

// Generated where

var CourseWhere = struct {
	ID          whereHelperstring
	Category    whereHelperstring
	Difficulty  whereHelperstring
	Description whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	Publish     whereHelperbool
	Title       whereHelperstring
	Slug        whereHelperstring
}{
	ID:          whereHelperstring{field: "\"courses\".\"id\""},
	Category:    whereHelperstring{field: "\"courses\".\"category\""},
	Difficulty:  whereHelperstring{field: "\"courses\".\"difficulty\""},
	Description: whereHelperstring{field: "\"courses\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"courses\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"courses\".\"updated_at\""},
	Publish:     whereHelperbool{field: "\"courses\".\"publish\""},
	Title:       whereHelperstring{field: "\"courses\".\"title\""},
	Slug:        whereHelperstring{field: "\"courses\".\"slug\""},
}

// CourseRels is where relationship names are stored.
var CourseRels = struct {
	Authors           string
	CourseEnrollments string
	CourseItems       string
}{
	Authors:           "Authors",
	CourseEnrollments: "CourseEnrollments",
	CourseItems:       "CourseItems",
}

// courseR is where relationships are stored.
type courseR struct {
	Authors           AuthorSlice           `boil:"Authors" json:"Authors" toml:"Authors" yaml:"Authors"`
	CourseEnrollments CourseEnrollmentSlice `boil:"CourseEnrollments" json:"CourseEnrollments" toml:"CourseEnrollments" yaml:"CourseEnrollments"`
	CourseItems       CourseItemSlice       `boil:"CourseItems" json:"CourseItems" toml:"CourseItems" yaml:"CourseItems"`
}

// NewStruct creates a new relationship struct
func (*courseR) NewStruct() *courseR {
	return &courseR{}
}

func (r *courseR) GetAuthors() AuthorSlice {
	if r == nil {
		return nil
	}
	return r.Authors
}

func (r *courseR) GetCourseEnrollments() CourseEnrollmentSlice {
	if r == nil {
		return nil
	}
	return r.CourseEnrollments
}

func (r *courseR) GetCourseItems() CourseItemSlice {
	if r == nil {
		return nil
	}
	return r.CourseItems
}

// courseL is where Load methods for each relationship are stored.
type courseL struct{}

var (
	courseAllColumns            = []string{"id", "category", "difficulty", "description", "created_at", "updated_at", "publish", "title", "slug"}
	courseColumnsWithoutDefault = []string{"id", "category", "difficulty", "description", "publish", "title", "slug"}
	courseColumnsWithDefault    = []string{"created_at", "updated_at"}
	coursePrimaryKeyColumns     = []string{"id"}
	courseGeneratedColumns      = []string{}
)

type (
	// CourseSlice is an alias for a slice of pointers to Course.
	// This should almost always be used instead of []Course.
	CourseSlice []*Course
	// CourseHook is the signature for custom Course hook methods
	CourseHook func(context.Context, boil.ContextExecutor, *Course) error

	courseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courseType                 = reflect.TypeOf(&Course{})
	courseMapping              = queries.MakeStructMapping(courseType)
	coursePrimaryKeyMapping, _ = queries.BindMapping(courseType, courseMapping, coursePrimaryKeyColumns)
	courseInsertCacheMut       sync.RWMutex
	courseInsertCache          = make(map[string]insertCache)
	courseUpdateCacheMut       sync.RWMutex
	courseUpdateCache          = make(map[string]updateCache)
	courseUpsertCacheMut       sync.RWMutex
	courseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var courseAfterSelectHooks []CourseHook

var courseBeforeInsertHooks []CourseHook
var courseAfterInsertHooks []CourseHook

var courseBeforeUpdateHooks []CourseHook
var courseAfterUpdateHooks []CourseHook

var courseBeforeDeleteHooks []CourseHook
var courseAfterDeleteHooks []CourseHook

var courseBeforeUpsertHooks []CourseHook
var courseAfterUpsertHooks []CourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Course) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Course) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Course) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Course) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Course) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Course) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Course) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Course) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Course) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCourseHook registers your hook function for all future operations.
func AddCourseHook(hookPoint boil.HookPoint, courseHook CourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		courseAfterSelectHooks = append(courseAfterSelectHooks, courseHook)
	case boil.BeforeInsertHook:
		courseBeforeInsertHooks = append(courseBeforeInsertHooks, courseHook)
	case boil.AfterInsertHook:
		courseAfterInsertHooks = append(courseAfterInsertHooks, courseHook)
	case boil.BeforeUpdateHook:
		courseBeforeUpdateHooks = append(courseBeforeUpdateHooks, courseHook)
	case boil.AfterUpdateHook:
		courseAfterUpdateHooks = append(courseAfterUpdateHooks, courseHook)
	case boil.BeforeDeleteHook:
		courseBeforeDeleteHooks = append(courseBeforeDeleteHooks, courseHook)
	case boil.AfterDeleteHook:
		courseAfterDeleteHooks = append(courseAfterDeleteHooks, courseHook)
	case boil.BeforeUpsertHook:
		courseBeforeUpsertHooks = append(courseBeforeUpsertHooks, courseHook)
	case boil.AfterUpsertHook:
		courseAfterUpsertHooks = append(courseAfterUpsertHooks, courseHook)
	}
}

// One returns a single course record from the query.
func (q courseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Course, error) {
	o := &Course{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for courses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Course records from the query.
func (q courseQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourseSlice, error) {
	var o []*Course

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Course slice")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Course records in the query.
func (q courseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count courses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if courses exists")
	}

	return count > 0, nil
}

// Authors retrieves all the author's Authors with an executor.
func (o *Course) Authors(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"course_authors\" on \"authors\".\"id\" = \"course_authors\".\"author_id\""),
		qm.Where("\"course_authors\".\"course_id\"=?", o.ID),
	)

	return Authors(queryMods...)
}

// CourseEnrollments retrieves all the course_enrollment's CourseEnrollments with an executor.
func (o *Course) CourseEnrollments(mods ...qm.QueryMod) courseEnrollmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"course_enrollments\".\"course_id\"=?", o.ID),
	)

	return CourseEnrollments(queryMods...)
}

// CourseItems retrieves all the course_item's CourseItems with an executor.
func (o *Course) CourseItems(mods ...qm.QueryMod) courseItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"course_items\".\"course_id\"=?", o.ID),
	)

	return CourseItems(queryMods...)
}

// LoadAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadAuthors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		var ok bool
		object, ok = maybeCourse.(*Course)
		if !ok {
			object = new(Course)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourse))
			}
		}
	} else {
		s, ok := maybeCourse.(*[]*Course)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"authors\".\"id\", \"authors\".\"slug\", \"authors\".\"full_name\", \"authors\".\"sponsor\", \"authors\".\"description\", \"authors\".\"image_url\", \"authors\".\"publish\", \"authors\".\"created_at\", \"authors\".\"updated_at\", \"a\".\"course_id\""),
		qm.From("\"authors\""),
		qm.InnerJoin("\"course_authors\" as \"a\" on \"authors\".\"id\" = \"a\".\"author_id\""),
		qm.WhereIn("\"a\".\"course_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authors")
	}

	var resultSlice []*Author

	var localJoinCols []string
	for results.Next() {
		one := new(Author)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Slug, &one.FullName, &one.Sponsor, &one.Description, &one.ImageURL, &one.Publish, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for authors")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice authors")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on authors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authors")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Authors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.Courses = append(foreign.R.Courses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Authors = append(local.R.Authors, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Courses = append(foreign.R.Courses, local)
				break
			}
		}
	}

	return nil
}

// LoadCourseEnrollments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadCourseEnrollments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		var ok bool
		object, ok = maybeCourse.(*Course)
		if !ok {
			object = new(Course)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourse))
			}
		}
	} else {
		s, ok := maybeCourse.(*[]*Course)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course_enrollments`),
		qm.WhereIn(`course_enrollments.course_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_enrollments")
	}

	var resultSlice []*CourseEnrollment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_enrollments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_enrollments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_enrollments")
	}

	if len(courseEnrollmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseEnrollments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseEnrollmentR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.CourseEnrollments = append(local.R.CourseEnrollments, foreign)
				if foreign.R == nil {
					foreign.R = &courseEnrollmentR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadCourseItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadCourseItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		var ok bool
		object, ok = maybeCourse.(*Course)
		if !ok {
			object = new(Course)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourse))
			}
		}
	} else {
		s, ok := maybeCourse.(*[]*Course)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course_items`),
		qm.WhereIn(`course_items.course_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_items")
	}

	var resultSlice []*CourseItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_items")
	}

	if len(courseItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseItemR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.CourseItems = append(local.R.CourseItems, foreign)
				if foreign.R == nil {
					foreign.R = &courseItemR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// AddAuthors adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.Courses appropriately.
func (o *Course) AddAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"course_authors\" (\"course_id\", \"author_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &courseR{
			Authors: related,
		}
	} else {
		o.R.Authors = append(o.R.Authors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				Courses: CourseSlice{o},
			}
		} else {
			rel.R.Courses = append(rel.R.Courses, o)
		}
	}
	return nil
}

// SetAuthors removes all previously related items of the
// course replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Courses's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.Courses's Authors accordingly.
func (o *Course) SetAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	query := "delete from \"course_authors\" where \"course_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAuthorsFromCoursesSlice(o, related)
	if o.R != nil {
		o.R.Authors = nil
	}

	return o.AddAuthors(ctx, exec, insert, related...)
}

// RemoveAuthors relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.Courses.
func (o *Course) RemoveAuthors(ctx context.Context, exec boil.ContextExecutor, related ...*Author) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"course_authors\" where \"course_id\" = $1 and \"author_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAuthorsFromCoursesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Authors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Authors)
			if ln > 1 && i < ln-1 {
				o.R.Authors[i] = o.R.Authors[ln-1]
			}
			o.R.Authors = o.R.Authors[:ln-1]
			break
		}
	}

	return nil
}

func removeAuthorsFromCoursesSlice(o *Course, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Courses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Courses)
			if ln > 1 && i < ln-1 {
				rel.R.Courses[i] = rel.R.Courses[ln-1]
			}
			rel.R.Courses = rel.R.Courses[:ln-1]
			break
		}
	}
}

// AddCourseEnrollments adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.CourseEnrollments.
// Sets related.R.Course appropriately.
func (o *Course) AddCourseEnrollments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseEnrollment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"course_enrollments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
				strmangle.WhereClause("\"", "\"", 2, courseEnrollmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			CourseEnrollments: related,
		}
	} else {
		o.R.CourseEnrollments = append(o.R.CourseEnrollments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseEnrollmentR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddCourseItems adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.CourseItems.
// Sets related.R.Course appropriately.
func (o *Course) AddCourseItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"course_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
				strmangle.WhereClause("\"", "\"", 2, courseItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			CourseItems: related,
		}
	} else {
		o.R.CourseItems = append(o.R.CourseItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseItemR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// Courses retrieves all the records using an executor.
func Courses(mods ...qm.QueryMod) courseQuery {
	mods = append(mods, qm.From("\"courses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"courses\".*"})
	}

	return courseQuery{q}
}

// FindCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourse(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Course, error) {
	courseObj := &Course{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"courses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, courseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from courses")
	}

	if err = courseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return courseObj, err
	}

	return courseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Course) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no courses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courseInsertCacheMut.RLock()
	cache, cached := courseInsertCache[key]
	courseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courseType, courseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"courses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"courses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into courses")
	}

	if !cached {
		courseInsertCacheMut.Lock()
		courseInsertCache[key] = cache
		courseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Course.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Course) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	courseUpdateCacheMut.RLock()
	cache, cached := courseUpdateCache[key]
	courseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update courses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"courses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, coursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, append(wl, coursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update courses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for courses")
	}

	if !cached {
		courseUpdateCacheMut.Lock()
		courseUpdateCache[key] = cache
		courseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q courseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for courses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"courses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, coursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all course")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Course) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no courses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courseUpsertCacheMut.RLock()
	cache, cached := courseUpsertCache[key]
	courseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert courses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(coursePrimaryKeyColumns))
			copy(conflict, coursePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"courses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courseType, courseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert courses")
	}

	if !cached {
		courseUpsertCacheMut.Lock()
		courseUpsertCache[key] = cache
		courseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Course record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Course) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Course provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coursePrimaryKeyMapping)
	sql := "DELETE FROM \"courses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for courses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no courseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for courses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(courseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coursePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for courses")
	}

	if len(courseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Course) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"courses\".* FROM \"courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coursePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CourseSlice")
	}

	*o = slice

	return nil
}

// CourseExists checks if the Course row exists.
func CourseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"courses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if courses exists")
	}

	return exists, nil
}

// Exists checks if the Course row exists.
func (o *Course) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CourseExists(ctx, exec, o.ID)
}
