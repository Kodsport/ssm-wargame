// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Challenge is an object representing the database table.
type Challenge struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug           string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Title          string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description    string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	PublishAt      null.Time   `boil:"publish_at" json:"publish_at,omitempty" toml:"publish_at" yaml:"publish_at,omitempty"`
	CTFEventID     null.String `boil:"ctf_event_id" json:"ctf_event_id,omitempty" toml:"ctf_event_id" yaml:"ctf_event_id,omitempty"`
	CategoryID     string      `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	StaticScore    null.Int    `boil:"static_score" json:"static_score,omitempty" toml:"static_score" yaml:"static_score,omitempty"`
	Hide           bool        `boil:"hide" json:"hide" toml:"hide" yaml:"hide"`
	Custom         null.JSON   `boil:"custom" json:"custom,omitempty" toml:"custom" yaml:"custom,omitempty"`
	ChallNamespace null.String `boil:"chall_namespace" json:"chall_namespace,omitempty" toml:"chall_namespace" yaml:"chall_namespace,omitempty"`

	R *challengeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L challengeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChallengeColumns = struct {
	ID             string
	Slug           string
	Title          string
	Description    string
	PublishAt      string
	CTFEventID     string
	CategoryID     string
	CreatedAt      string
	UpdatedAt      string
	StaticScore    string
	Hide           string
	Custom         string
	ChallNamespace string
}{
	ID:             "id",
	Slug:           "slug",
	Title:          "title",
	Description:    "description",
	PublishAt:      "publish_at",
	CTFEventID:     "ctf_event_id",
	CategoryID:     "category_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	StaticScore:    "static_score",
	Hide:           "hide",
	Custom:         "custom",
	ChallNamespace: "chall_namespace",
}

var ChallengeTableColumns = struct {
	ID             string
	Slug           string
	Title          string
	Description    string
	PublishAt      string
	CTFEventID     string
	CategoryID     string
	CreatedAt      string
	UpdatedAt      string
	StaticScore    string
	Hide           string
	Custom         string
	ChallNamespace string
}{
	ID:             "challenges.id",
	Slug:           "challenges.slug",
	Title:          "challenges.title",
	Description:    "challenges.description",
	PublishAt:      "challenges.publish_at",
	CTFEventID:     "challenges.ctf_event_id",
	CategoryID:     "challenges.category_id",
	CreatedAt:      "challenges.created_at",
	UpdatedAt:      "challenges.updated_at",
	StaticScore:    "challenges.static_score",
	Hide:           "challenges.hide",
	Custom:         "challenges.custom",
	ChallNamespace: "challenges.chall_namespace",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChallengeWhere = struct {
	ID             whereHelperstring
	Slug           whereHelperstring
	Title          whereHelperstring
	Description    whereHelperstring
	PublishAt      whereHelpernull_Time
	CTFEventID     whereHelpernull_String
	CategoryID     whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpernull_Time
	StaticScore    whereHelpernull_Int
	Hide           whereHelperbool
	Custom         whereHelpernull_JSON
	ChallNamespace whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"challenges\".\"id\""},
	Slug:           whereHelperstring{field: "\"challenges\".\"slug\""},
	Title:          whereHelperstring{field: "\"challenges\".\"title\""},
	Description:    whereHelperstring{field: "\"challenges\".\"description\""},
	PublishAt:      whereHelpernull_Time{field: "\"challenges\".\"publish_at\""},
	CTFEventID:     whereHelpernull_String{field: "\"challenges\".\"ctf_event_id\""},
	CategoryID:     whereHelperstring{field: "\"challenges\".\"category_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"challenges\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"challenges\".\"updated_at\""},
	StaticScore:    whereHelpernull_Int{field: "\"challenges\".\"static_score\""},
	Hide:           whereHelperbool{field: "\"challenges\".\"hide\""},
	Custom:         whereHelpernull_JSON{field: "\"challenges\".\"custom\""},
	ChallNamespace: whereHelpernull_String{field: "\"challenges\".\"chall_namespace\""},
}

// ChallengeRels is where relationship names are stored.
var ChallengeRels = struct {
	Category          string
	CTFEvent          string
	MonthlyChallenge  string
	Authors           string
	ChallengeFiles    string
	ChallengeServices string
	CourseItems       string
	Flags             string
	KnackKodenSolves  string
	SchoolSolves      string
	Submissions       string
	UserSolves        string
}{
	Category:          "Category",
	CTFEvent:          "CTFEvent",
	MonthlyChallenge:  "MonthlyChallenge",
	Authors:           "Authors",
	ChallengeFiles:    "ChallengeFiles",
	ChallengeServices: "ChallengeServices",
	CourseItems:       "CourseItems",
	Flags:             "Flags",
	KnackKodenSolves:  "KnackKodenSolves",
	SchoolSolves:      "SchoolSolves",
	Submissions:       "Submissions",
	UserSolves:        "UserSolves",
}

// challengeR is where relationships are stored.
type challengeR struct {
	Category          *Category             `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	CTFEvent          *CTFEvent             `boil:"CTFEvent" json:"CTFEvent" toml:"CTFEvent" yaml:"CTFEvent"`
	MonthlyChallenge  *MonthlyChallenge     `boil:"MonthlyChallenge" json:"MonthlyChallenge" toml:"MonthlyChallenge" yaml:"MonthlyChallenge"`
	Authors           AuthorSlice           `boil:"Authors" json:"Authors" toml:"Authors" yaml:"Authors"`
	ChallengeFiles    ChallengeFileSlice    `boil:"ChallengeFiles" json:"ChallengeFiles" toml:"ChallengeFiles" yaml:"ChallengeFiles"`
	ChallengeServices ChallengeServiceSlice `boil:"ChallengeServices" json:"ChallengeServices" toml:"ChallengeServices" yaml:"ChallengeServices"`
	CourseItems       CourseItemSlice       `boil:"CourseItems" json:"CourseItems" toml:"CourseItems" yaml:"CourseItems"`
	Flags             FlagSlice             `boil:"Flags" json:"Flags" toml:"Flags" yaml:"Flags"`
	KnackKodenSolves  KnackKodenSolfSlice   `boil:"KnackKodenSolves" json:"KnackKodenSolves" toml:"KnackKodenSolves" yaml:"KnackKodenSolves"`
	SchoolSolves      SchoolSolfSlice       `boil:"SchoolSolves" json:"SchoolSolves" toml:"SchoolSolves" yaml:"SchoolSolves"`
	Submissions       SubmissionSlice       `boil:"Submissions" json:"Submissions" toml:"Submissions" yaml:"Submissions"`
	UserSolves        UserSolfSlice         `boil:"UserSolves" json:"UserSolves" toml:"UserSolves" yaml:"UserSolves"`
}

// NewStruct creates a new relationship struct
func (*challengeR) NewStruct() *challengeR {
	return &challengeR{}
}

func (r *challengeR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *challengeR) GetCTFEvent() *CTFEvent {
	if r == nil {
		return nil
	}
	return r.CTFEvent
}

func (r *challengeR) GetMonthlyChallenge() *MonthlyChallenge {
	if r == nil {
		return nil
	}
	return r.MonthlyChallenge
}

func (r *challengeR) GetAuthors() AuthorSlice {
	if r == nil {
		return nil
	}
	return r.Authors
}

func (r *challengeR) GetChallengeFiles() ChallengeFileSlice {
	if r == nil {
		return nil
	}
	return r.ChallengeFiles
}

func (r *challengeR) GetChallengeServices() ChallengeServiceSlice {
	if r == nil {
		return nil
	}
	return r.ChallengeServices
}

func (r *challengeR) GetCourseItems() CourseItemSlice {
	if r == nil {
		return nil
	}
	return r.CourseItems
}

func (r *challengeR) GetFlags() FlagSlice {
	if r == nil {
		return nil
	}
	return r.Flags
}

func (r *challengeR) GetKnackKodenSolves() KnackKodenSolfSlice {
	if r == nil {
		return nil
	}
	return r.KnackKodenSolves
}

func (r *challengeR) GetSchoolSolves() SchoolSolfSlice {
	if r == nil {
		return nil
	}
	return r.SchoolSolves
}

func (r *challengeR) GetSubmissions() SubmissionSlice {
	if r == nil {
		return nil
	}
	return r.Submissions
}

func (r *challengeR) GetUserSolves() UserSolfSlice {
	if r == nil {
		return nil
	}
	return r.UserSolves
}

// challengeL is where Load methods for each relationship are stored.
type challengeL struct{}

var (
	challengeAllColumns            = []string{"id", "slug", "title", "description", "publish_at", "ctf_event_id", "category_id", "created_at", "updated_at", "static_score", "hide", "custom", "chall_namespace"}
	challengeColumnsWithoutDefault = []string{"id", "slug", "title", "description", "category_id"}
	challengeColumnsWithDefault    = []string{"publish_at", "ctf_event_id", "created_at", "updated_at", "static_score", "hide", "custom", "chall_namespace"}
	challengePrimaryKeyColumns     = []string{"id"}
	challengeGeneratedColumns      = []string{}
)

type (
	// ChallengeSlice is an alias for a slice of pointers to Challenge.
	// This should almost always be used instead of []Challenge.
	ChallengeSlice []*Challenge
	// ChallengeHook is the signature for custom Challenge hook methods
	ChallengeHook func(context.Context, boil.ContextExecutor, *Challenge) error

	challengeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	challengeType                 = reflect.TypeOf(&Challenge{})
	challengeMapping              = queries.MakeStructMapping(challengeType)
	challengePrimaryKeyMapping, _ = queries.BindMapping(challengeType, challengeMapping, challengePrimaryKeyColumns)
	challengeInsertCacheMut       sync.RWMutex
	challengeInsertCache          = make(map[string]insertCache)
	challengeUpdateCacheMut       sync.RWMutex
	challengeUpdateCache          = make(map[string]updateCache)
	challengeUpsertCacheMut       sync.RWMutex
	challengeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var challengeAfterSelectMu sync.Mutex
var challengeAfterSelectHooks []ChallengeHook

var challengeBeforeInsertMu sync.Mutex
var challengeBeforeInsertHooks []ChallengeHook
var challengeAfterInsertMu sync.Mutex
var challengeAfterInsertHooks []ChallengeHook

var challengeBeforeUpdateMu sync.Mutex
var challengeBeforeUpdateHooks []ChallengeHook
var challengeAfterUpdateMu sync.Mutex
var challengeAfterUpdateHooks []ChallengeHook

var challengeBeforeDeleteMu sync.Mutex
var challengeBeforeDeleteHooks []ChallengeHook
var challengeAfterDeleteMu sync.Mutex
var challengeAfterDeleteHooks []ChallengeHook

var challengeBeforeUpsertMu sync.Mutex
var challengeBeforeUpsertHooks []ChallengeHook
var challengeAfterUpsertMu sync.Mutex
var challengeAfterUpsertHooks []ChallengeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Challenge) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Challenge) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Challenge) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Challenge) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Challenge) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Challenge) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Challenge) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Challenge) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Challenge) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range challengeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChallengeHook registers your hook function for all future operations.
func AddChallengeHook(hookPoint boil.HookPoint, challengeHook ChallengeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		challengeAfterSelectMu.Lock()
		challengeAfterSelectHooks = append(challengeAfterSelectHooks, challengeHook)
		challengeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		challengeBeforeInsertMu.Lock()
		challengeBeforeInsertHooks = append(challengeBeforeInsertHooks, challengeHook)
		challengeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		challengeAfterInsertMu.Lock()
		challengeAfterInsertHooks = append(challengeAfterInsertHooks, challengeHook)
		challengeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		challengeBeforeUpdateMu.Lock()
		challengeBeforeUpdateHooks = append(challengeBeforeUpdateHooks, challengeHook)
		challengeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		challengeAfterUpdateMu.Lock()
		challengeAfterUpdateHooks = append(challengeAfterUpdateHooks, challengeHook)
		challengeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		challengeBeforeDeleteMu.Lock()
		challengeBeforeDeleteHooks = append(challengeBeforeDeleteHooks, challengeHook)
		challengeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		challengeAfterDeleteMu.Lock()
		challengeAfterDeleteHooks = append(challengeAfterDeleteHooks, challengeHook)
		challengeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		challengeBeforeUpsertMu.Lock()
		challengeBeforeUpsertHooks = append(challengeBeforeUpsertHooks, challengeHook)
		challengeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		challengeAfterUpsertMu.Lock()
		challengeAfterUpsertHooks = append(challengeAfterUpsertHooks, challengeHook)
		challengeAfterUpsertMu.Unlock()
	}
}

// One returns a single challenge record from the query.
func (q challengeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Challenge, error) {
	o := &Challenge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for challenges")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Challenge records from the query.
func (q challengeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChallengeSlice, error) {
	var o []*Challenge

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Challenge slice")
	}

	if len(challengeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Challenge records in the query.
func (q challengeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count challenges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q challengeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if challenges exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Challenge) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// CTFEvent pointed to by the foreign key.
func (o *Challenge) CTFEvent(mods ...qm.QueryMod) ctfEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CTFEventID),
	}

	queryMods = append(queryMods, mods...)

	return CTFEvents(queryMods...)
}

// MonthlyChallenge pointed to by the foreign key.
func (o *Challenge) MonthlyChallenge(mods ...qm.QueryMod) monthlyChallengeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"challenge_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return MonthlyChallenges(queryMods...)
}

// Authors retrieves all the author's Authors with an executor.
func (o *Challenge) Authors(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"challenge_authors\" on \"authors\".\"id\" = \"challenge_authors\".\"author_id\""),
		qm.Where("\"challenge_authors\".\"challenge_id\"=?", o.ID),
	)

	return Authors(queryMods...)
}

// ChallengeFiles retrieves all the challenge_file's ChallengeFiles with an executor.
func (o *Challenge) ChallengeFiles(mods ...qm.QueryMod) challengeFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"challenge_files\".\"challenge_id\"=?", o.ID),
	)

	return ChallengeFiles(queryMods...)
}

// ChallengeServices retrieves all the challenge_service's ChallengeServices with an executor.
func (o *Challenge) ChallengeServices(mods ...qm.QueryMod) challengeServiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"challenge_services\".\"challenge_id\"=?", o.ID),
	)

	return ChallengeServices(queryMods...)
}

// CourseItems retrieves all the course_item's CourseItems with an executor.
func (o *Challenge) CourseItems(mods ...qm.QueryMod) courseItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"course_items\".\"challenge_id\"=?", o.ID),
	)

	return CourseItems(queryMods...)
}

// Flags retrieves all the flag's Flags with an executor.
func (o *Challenge) Flags(mods ...qm.QueryMod) flagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"flags\".\"challenge_id\"=?", o.ID),
	)

	return Flags(queryMods...)
}

// KnackKodenSolves retrieves all the knack_koden_solf's KnackKodenSolves with an executor.
func (o *Challenge) KnackKodenSolves(mods ...qm.QueryMod) knackKodenSolfQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"knack_koden_solves\".\"challenge_id\"=?", o.ID),
	)

	return KnackKodenSolves(queryMods...)
}

// SchoolSolves retrieves all the school_solf's SchoolSolves with an executor.
func (o *Challenge) SchoolSolves(mods ...qm.QueryMod) schoolSolfQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"school_solves\".\"challenge_id\"=?", o.ID),
	)

	return SchoolSolves(queryMods...)
}

// Submissions retrieves all the submission's Submissions with an executor.
func (o *Challenge) Submissions(mods ...qm.QueryMod) submissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"submissions\".\"challenge_id\"=?", o.ID),
	)

	return Submissions(queryMods...)
}

// UserSolves retrieves all the user_solf's UserSolves with an executor.
func (o *Challenge) UserSolves(mods ...qm.QueryMod) userSolfQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_solves\".\"challenge_id\"=?", o.ID),
	)

	return UserSolves(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (challengeL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.CategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}

			args[obj.CategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Challenges = append(foreign.R.Challenges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Challenges = append(foreign.R.Challenges, local)
				break
			}
		}
	}

	return nil
}

// LoadCTFEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (challengeL) LoadCTFEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		if !queries.IsNil(object.CTFEventID) {
			args[object.CTFEventID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}

			if !queries.IsNil(obj.CTFEventID) {
				args[obj.CTFEventID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ctf_events`),
		qm.WhereIn(`ctf_events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CTFEvent")
	}

	var resultSlice []*CTFEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CTFEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ctf_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ctf_events")
	}

	if len(ctfEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CTFEvent = foreign
		if foreign.R == nil {
			foreign.R = &ctfEventR{}
		}
		foreign.R.Challenges = append(foreign.R.Challenges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CTFEventID, foreign.ID) {
				local.R.CTFEvent = foreign
				if foreign.R == nil {
					foreign.R = &ctfEventR{}
				}
				foreign.R.Challenges = append(foreign.R.Challenges, local)
				break
			}
		}
	}

	return nil
}

// LoadMonthlyChallenge allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (challengeL) LoadMonthlyChallenge(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`monthly_challenges`),
		qm.WhereIn(`monthly_challenges.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonthlyChallenge")
	}

	var resultSlice []*MonthlyChallenge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonthlyChallenge")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monthly_challenges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monthly_challenges")
	}

	if len(monthlyChallengeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonthlyChallenge = foreign
		if foreign.R == nil {
			foreign.R = &monthlyChallengeR{}
		}
		foreign.R.Challenge = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ChallengeID {
				local.R.MonthlyChallenge = foreign
				if foreign.R == nil {
					foreign.R = &monthlyChallengeR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadAuthors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"authors\".\"id\", \"authors\".\"slug\", \"authors\".\"full_name\", \"authors\".\"sponsor\", \"authors\".\"description\", \"authors\".\"image_url\", \"authors\".\"publish\", \"authors\".\"created_at\", \"authors\".\"updated_at\", \"a\".\"challenge_id\""),
		qm.From("\"authors\""),
		qm.InnerJoin("\"challenge_authors\" as \"a\" on \"authors\".\"id\" = \"a\".\"author_id\""),
		qm.WhereIn("\"a\".\"challenge_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authors")
	}

	var resultSlice []*Author

	var localJoinCols []string
	for results.Next() {
		one := new(Author)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Slug, &one.FullName, &one.Sponsor, &one.Description, &one.ImageURL, &one.Publish, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for authors")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice authors")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on authors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authors")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Authors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.Challenges = append(foreign.R.Challenges, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Authors = append(local.R.Authors, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Challenges = append(foreign.R.Challenges, local)
				break
			}
		}
	}

	return nil
}

// LoadChallengeFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadChallengeFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenge_files`),
		qm.WhereIn(`challenge_files.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load challenge_files")
	}

	var resultSlice []*ChallengeFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice challenge_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on challenge_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenge_files")
	}

	if len(challengeFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChallengeFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &challengeFileR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ChallengeID) {
				local.R.ChallengeFiles = append(local.R.ChallengeFiles, foreign)
				if foreign.R == nil {
					foreign.R = &challengeFileR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadChallengeServices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadChallengeServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`challenge_services`),
		qm.WhereIn(`challenge_services.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load challenge_services")
	}

	var resultSlice []*ChallengeService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice challenge_services")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on challenge_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for challenge_services")
	}

	if len(challengeServiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChallengeServices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &challengeServiceR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.ChallengeServices = append(local.R.ChallengeServices, foreign)
				if foreign.R == nil {
					foreign.R = &challengeServiceR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadCourseItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadCourseItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`course_items`),
		qm.WhereIn(`course_items.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_items")
	}

	var resultSlice []*CourseItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_items")
	}

	if len(courseItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseItemR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.CourseItems = append(local.R.CourseItems, foreign)
				if foreign.R == nil {
					foreign.R = &courseItemR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadFlags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadFlags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`flags`),
		qm.WhereIn(`flags.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flags")
	}

	var resultSlice []*Flag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flags")
	}

	if len(flagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Flags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flagR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.Flags = append(local.R.Flags, foreign)
				if foreign.R == nil {
					foreign.R = &flagR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadKnackKodenSolves allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadKnackKodenSolves(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`knack_koden_solves`),
		qm.WhereIn(`knack_koden_solves.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load knack_koden_solves")
	}

	var resultSlice []*KnackKodenSolf
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice knack_koden_solves")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on knack_koden_solves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for knack_koden_solves")
	}

	if len(knackKodenSolfAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KnackKodenSolves = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &knackKodenSolfR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.KnackKodenSolves = append(local.R.KnackKodenSolves, foreign)
				if foreign.R == nil {
					foreign.R = &knackKodenSolfR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadSchoolSolves allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadSchoolSolves(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`school_solves`),
		qm.WhereIn(`school_solves.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load school_solves")
	}

	var resultSlice []*SchoolSolf
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice school_solves")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on school_solves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for school_solves")
	}

	if len(schoolSolfAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SchoolSolves = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &schoolSolfR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.SchoolSolves = append(local.R.SchoolSolves, foreign)
				if foreign.R == nil {
					foreign.R = &schoolSolfR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadSubmissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadSubmissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`submissions`),
		qm.WhereIn(`submissions.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load submissions")
	}

	var resultSlice []*Submission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice submissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on submissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for submissions")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Submissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &submissionR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.Submissions = append(local.R.Submissions, foreign)
				if foreign.R == nil {
					foreign.R = &submissionR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// LoadUserSolves allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (challengeL) LoadUserSolves(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChallenge interface{}, mods queries.Applicator) error {
	var slice []*Challenge
	var object *Challenge

	if singular {
		var ok bool
		object, ok = maybeChallenge.(*Challenge)
		if !ok {
			object = new(Challenge)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChallenge))
			}
		}
	} else {
		s, ok := maybeChallenge.(*[]*Challenge)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChallenge)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChallenge))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &challengeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &challengeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_solves`),
		qm.WhereIn(`user_solves.challenge_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_solves")
	}

	var resultSlice []*UserSolf
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_solves")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_solves")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_solves")
	}

	if len(userSolfAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserSolves = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userSolfR{}
			}
			foreign.R.Challenge = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChallengeID {
				local.R.UserSolves = append(local.R.UserSolves, foreign)
				if foreign.R == nil {
					foreign.R = &userSolfR{}
				}
				foreign.R.Challenge = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the challenge to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Challenges.
func (o *Challenge) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"challenges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, challengePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &challengeR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Challenges: ChallengeSlice{o},
		}
	} else {
		related.R.Challenges = append(related.R.Challenges, o)
	}

	return nil
}

// SetCTFEvent of the challenge to the related item.
// Sets o.R.CTFEvent to related.
// Adds o to related.R.Challenges.
func (o *Challenge) SetCTFEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CTFEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"challenges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ctf_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, challengePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CTFEventID, related.ID)
	if o.R == nil {
		o.R = &challengeR{
			CTFEvent: related,
		}
	} else {
		o.R.CTFEvent = related
	}

	if related.R == nil {
		related.R = &ctfEventR{
			Challenges: ChallengeSlice{o},
		}
	} else {
		related.R.Challenges = append(related.R.Challenges, o)
	}

	return nil
}

// RemoveCTFEvent relationship.
// Sets o.R.CTFEvent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Challenge) RemoveCTFEvent(ctx context.Context, exec boil.ContextExecutor, related *CTFEvent) error {
	var err error

	queries.SetScanner(&o.CTFEventID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ctf_event_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CTFEvent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Challenges {
		if queries.Equal(o.CTFEventID, ri.CTFEventID) {
			continue
		}

		ln := len(related.R.Challenges)
		if ln > 1 && i < ln-1 {
			related.R.Challenges[i] = related.R.Challenges[ln-1]
		}
		related.R.Challenges = related.R.Challenges[:ln-1]
		break
	}
	return nil
}

// SetMonthlyChallenge of the challenge to the related item.
// Sets o.R.MonthlyChallenge to related.
// Adds o to related.R.Challenge.
func (o *Challenge) SetMonthlyChallenge(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonthlyChallenge) error {
	var err error

	if insert {
		related.ChallengeID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"monthly_challenges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
			strmangle.WhereClause("\"", "\"", 2, monthlyChallengePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ChallengeID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChallengeID = o.ID
	}

	if o.R == nil {
		o.R = &challengeR{
			MonthlyChallenge: related,
		}
	} else {
		o.R.MonthlyChallenge = related
	}

	if related.R == nil {
		related.R = &monthlyChallengeR{
			Challenge: o,
		}
	} else {
		related.R.Challenge = o
	}
	return nil
}

// AddAuthors adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.Challenges appropriately.
func (o *Challenge) AddAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"challenge_authors\" (\"challenge_id\", \"author_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &challengeR{
			Authors: related,
		}
	} else {
		o.R.Authors = append(o.R.Authors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				Challenges: ChallengeSlice{o},
			}
		} else {
			rel.R.Challenges = append(rel.R.Challenges, o)
		}
	}
	return nil
}

// SetAuthors removes all previously related items of the
// challenge replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Challenges's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.Challenges's Authors accordingly.
func (o *Challenge) SetAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	query := "delete from \"challenge_authors\" where \"challenge_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAuthorsFromChallengesSlice(o, related)
	if o.R != nil {
		o.R.Authors = nil
	}

	return o.AddAuthors(ctx, exec, insert, related...)
}

// RemoveAuthors relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.Challenges.
func (o *Challenge) RemoveAuthors(ctx context.Context, exec boil.ContextExecutor, related ...*Author) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"challenge_authors\" where \"challenge_id\" = $1 and \"author_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAuthorsFromChallengesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Authors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Authors)
			if ln > 1 && i < ln-1 {
				o.R.Authors[i] = o.R.Authors[ln-1]
			}
			o.R.Authors = o.R.Authors[:ln-1]
			break
		}
	}

	return nil
}

func removeAuthorsFromChallengesSlice(o *Challenge, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Challenges {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Challenges)
			if ln > 1 && i < ln-1 {
				rel.R.Challenges[i] = rel.R.Challenges[ln-1]
			}
			rel.R.Challenges = rel.R.Challenges[:ln-1]
			break
		}
	}
}

// AddChallengeFiles adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.ChallengeFiles.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddChallengeFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChallengeFile) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChallengeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"challenge_files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, challengeFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChallengeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			ChallengeFiles: related,
		}
	} else {
		o.R.ChallengeFiles = append(o.R.ChallengeFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &challengeFileR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// SetChallengeFiles removes all previously related items of the
// challenge replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Challenge's ChallengeFiles accordingly.
// Replaces o.R.ChallengeFiles with related.
// Sets related.R.Challenge's ChallengeFiles accordingly.
func (o *Challenge) SetChallengeFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChallengeFile) error {
	query := "update \"challenge_files\" set \"challenge_id\" = null where \"challenge_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChallengeFiles {
			queries.SetScanner(&rel.ChallengeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Challenge = nil
		}
		o.R.ChallengeFiles = nil
	}

	return o.AddChallengeFiles(ctx, exec, insert, related...)
}

// RemoveChallengeFiles relationships from objects passed in.
// Removes related items from R.ChallengeFiles (uses pointer comparison, removal does not keep order)
// Sets related.R.Challenge.
func (o *Challenge) RemoveChallengeFiles(ctx context.Context, exec boil.ContextExecutor, related ...*ChallengeFile) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChallengeID, nil)
		if rel.R != nil {
			rel.R.Challenge = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("challenge_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChallengeFiles {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChallengeFiles)
			if ln > 1 && i < ln-1 {
				o.R.ChallengeFiles[i] = o.R.ChallengeFiles[ln-1]
			}
			o.R.ChallengeFiles = o.R.ChallengeFiles[:ln-1]
			break
		}
	}

	return nil
}

// AddChallengeServices adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.ChallengeServices.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddChallengeServices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChallengeService) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"challenge_services\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, challengeServicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			ChallengeServices: related,
		}
	} else {
		o.R.ChallengeServices = append(o.R.ChallengeServices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &challengeServiceR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddCourseItems adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.CourseItems.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddCourseItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"course_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, courseItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			CourseItems: related,
		}
	} else {
		o.R.CourseItems = append(o.R.CourseItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseItemR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddFlags adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.Flags.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddFlags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Flag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"flags\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, flagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			Flags: related,
		}
	} else {
		o.R.Flags = append(o.R.Flags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flagR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddKnackKodenSolves adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.KnackKodenSolves.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddKnackKodenSolves(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KnackKodenSolf) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"knack_koden_solves\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, knackKodenSolfPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ChallengeID, rel.KnackKodenTeamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			KnackKodenSolves: related,
		}
	} else {
		o.R.KnackKodenSolves = append(o.R.KnackKodenSolves, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &knackKodenSolfR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddSchoolSolves adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.SchoolSolves.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddSchoolSolves(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SchoolSolf) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"school_solves\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, schoolSolfPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SchoolID, rel.ChallengeID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			SchoolSolves: related,
		}
	} else {
		o.R.SchoolSolves = append(o.R.SchoolSolves, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &schoolSolfR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddSubmissions adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.Submissions.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Submission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"submissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, submissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			Submissions: related,
		}
	} else {
		o.R.Submissions = append(o.R.Submissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &submissionR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// AddUserSolves adds the given related objects to the existing relationships
// of the challenge, optionally inserting them as new records.
// Appends related to o.R.UserSolves.
// Sets related.R.Challenge appropriately.
func (o *Challenge) AddUserSolves(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSolf) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChallengeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_solves\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"challenge_id"}),
				strmangle.WhereClause("\"", "\"", 2, userSolfPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.ChallengeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChallengeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &challengeR{
			UserSolves: related,
		}
	} else {
		o.R.UserSolves = append(o.R.UserSolves, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userSolfR{
				Challenge: o,
			}
		} else {
			rel.R.Challenge = o
		}
	}
	return nil
}

// Challenges retrieves all the records using an executor.
func Challenges(mods ...qm.QueryMod) challengeQuery {
	mods = append(mods, qm.From("\"challenges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"challenges\".*"})
	}

	return challengeQuery{q}
}

// FindChallenge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChallenge(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Challenge, error) {
	challengeObj := &Challenge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"challenges\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, challengeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from challenges")
	}

	if err = challengeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return challengeObj, err
	}

	return challengeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Challenge) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no challenges provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	challengeInsertCacheMut.RLock()
	cache, cached := challengeInsertCache[key]
	challengeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			challengeAllColumns,
			challengeColumnsWithDefault,
			challengeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(challengeType, challengeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(challengeType, challengeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"challenges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"challenges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into challenges")
	}

	if !cached {
		challengeInsertCacheMut.Lock()
		challengeInsertCache[key] = cache
		challengeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Challenge.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Challenge) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	challengeUpdateCacheMut.RLock()
	cache, cached := challengeUpdateCache[key]
	challengeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			challengeAllColumns,
			challengePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update challenges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"challenges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, challengePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(challengeType, challengeMapping, append(wl, challengePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update challenges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for challenges")
	}

	if !cached {
		challengeUpdateCacheMut.Lock()
		challengeUpdateCache[key] = cache
		challengeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q challengeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for challenges")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChallengeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"challenges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, challengePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in challenge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all challenge")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Challenge) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no challenges provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(challengeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	challengeUpsertCacheMut.RLock()
	cache, cached := challengeUpsertCache[key]
	challengeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			challengeAllColumns,
			challengeColumnsWithDefault,
			challengeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			challengeAllColumns,
			challengePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert challenges, could not build update column list")
		}

		ret := strmangle.SetComplement(challengeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(challengePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert challenges, could not build conflict column list")
			}

			conflict = make([]string, len(challengePrimaryKeyColumns))
			copy(conflict, challengePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"challenges\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(challengeType, challengeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(challengeType, challengeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert challenges")
	}

	if !cached {
		challengeUpsertCacheMut.Lock()
		challengeUpsertCache[key] = cache
		challengeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Challenge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Challenge) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Challenge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), challengePrimaryKeyMapping)
	sql := "DELETE FROM \"challenges\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for challenges")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q challengeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no challengeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from challenges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for challenges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChallengeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(challengeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"challenges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, challengePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from challenge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for challenges")
	}

	if len(challengeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Challenge) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChallenge(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChallengeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChallengeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), challengePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"challenges\".* FROM \"challenges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, challengePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChallengeSlice")
	}

	*o = slice

	return nil
}

// ChallengeExists checks if the Challenge row exists.
func ChallengeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"challenges\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if challenges exists")
	}

	return exists, nil
}

// Exists checks if the Challenge row exists.
func (o *Challenge) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChallengeExists(ctx, exec, o.ID)
}
