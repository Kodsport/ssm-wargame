// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge views
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// SsmChallengeCollection is the viewed result type that is projected based on
// a view.
type SsmChallengeCollection struct {
	// Type to project
	Projected SsmChallengeCollectionView
	// View to render
	View string
}

// SsmChallengeCollectionView is a type that runs validations on a projected
// type.
type SsmChallengeCollectionView []*SsmChallengeView

// SsmChallengeView is a type that runs validations on a projected type.
type SsmChallengeView struct {
	ID *string
	// A unique string that can be used in URLs
	Slug *string
	// Title displayed to user
	Title *string
	// A short text describing the challenge
	Description *string
	// The number of points given to the solver
	Score     *int32
	Services  []*ChallengeServiceView
	Files     []*ChallengeFilesView
	Published *bool
	// The numer of people who solved the challenge
	Solves *int64
}

// ChallengeServiceView is a type that runs validations on a projected type.
type ChallengeServiceView struct {
}

// ChallengeFilesView is a type that runs validations on a projected type.
type ChallengeFilesView struct {
}

var (
	// SsmChallengeCollectionMap is a map indexing the attribute names of
	// SsmChallengeCollection by view name.
	SsmChallengeCollectionMap = map[string][]string{
		"default": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"solves",
		},
		"author": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"solves",
			"published",
		},
	}
	// SsmChallengeMap is a map indexing the attribute names of SsmChallenge by
	// view name.
	SsmChallengeMap = map[string][]string{
		"default": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"solves",
		},
		"author": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"solves",
			"published",
		},
	}
)

// ValidateSsmChallengeCollection runs the validations defined on the viewed
// result type SsmChallengeCollection.
func ValidateSsmChallengeCollection(result SsmChallengeCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSsmChallengeCollectionView(result.Projected)
	case "author":
		err = ValidateSsmChallengeCollectionViewAuthor(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "author"})
	}
	return
}

// ValidateSsmChallengeCollectionView runs the validations defined on
// SsmChallengeCollectionView using the "default" view.
func ValidateSsmChallengeCollectionView(result SsmChallengeCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsmChallengeView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsmChallengeCollectionViewAuthor runs the validations defined on
// SsmChallengeCollectionView using the "author" view.
func ValidateSsmChallengeCollectionViewAuthor(result SsmChallengeCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsmChallengeViewAuthor(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsmChallengeView runs the validations defined on SsmChallengeView
// using the "default" view.
func ValidateSsmChallengeView(result *SsmChallengeView) (err error) {
	if result.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "result"))
	}
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "result"))
	}
	if result.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "result"))
	}
	return
}

// ValidateSsmChallengeViewAuthor runs the validations defined on
// SsmChallengeView using the "author" view.
func ValidateSsmChallengeViewAuthor(result *SsmChallengeView) (err error) {
	if result.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "result"))
	}
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "result"))
	}
	if result.Published == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published", "result"))
	}
	if result.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "result"))
	}
	return
}

// ValidateChallengeServiceView runs the validations defined on
// ChallengeServiceView.
func ValidateChallengeServiceView(result *ChallengeServiceView) (err error) {

	return
}

// ValidateChallengeFilesView runs the validations defined on
// ChallengeFilesView.
func ValidateChallengeFilesView(result *ChallengeFilesView) (err error) {

	return
}
