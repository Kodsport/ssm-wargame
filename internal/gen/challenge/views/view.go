// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge views
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// SsmChallengeCollection is the viewed result type that is projected based on
// a view.
type SsmChallengeCollection struct {
	// Type to project
	Projected SsmChallengeCollectionView
	// View to render
	View string
}

// SsmMonthlyChallengeCollection is the viewed result type that is projected
// based on a view.
type SsmMonthlyChallengeCollection struct {
	// Type to project
	Projected SsmMonthlyChallengeCollectionView
	// View to render
	View string
}

// SsmChallengeCollectionView is a type that runs validations on a projected
// type.
type SsmChallengeCollectionView []*SsmChallengeView

// SsmChallengeView is a type that runs validations on a projected type.
type SsmChallengeView struct {
	ID *string
	// A unique string that can be used in URLs
	Slug *string
	// Title displayed to user
	Title *string
	// A short text describing the challenge
	Description *string
	// The number of points given to the solver
	Score     *int32
	Services  []*ChallengeServiceView
	Files     []*ChallengeFilesView
	Published *bool
	// The numer of people who solved the challenge
	Solves *int64
}

// ChallengeServiceView is a type that runs validations on a projected type.
type ChallengeServiceView struct {
}

// ChallengeFilesView is a type that runs validations on a projected type.
type ChallengeFilesView struct {
	Filename *string
	URL      *string
}

// SsmMonthlyChallengeCollectionView is a type that runs validations on a
// projected type.
type SsmMonthlyChallengeCollectionView []*SsmMonthlyChallengeView

// SsmMonthlyChallengeView is a type that runs validations on a projected type.
type SsmMonthlyChallengeView struct {
	// The month(s) that the challenge is assigned for
	DisplayMonth *string
	// Starting date of the monthly challenge
	StartDate *string
	// Ending date of the monthly challenge
	EndDate *string
	ID      *string
	// A unique string that can be used in URLs
	Slug *string
	// Title displayed to user
	Title *string
	// A short text describing the challenge
	Description *string
	// The number of points given to the solver
	Score     *int32
	Services  []*ChallengeServiceView
	Files     []*ChallengeFilesView
	Published *bool
	// The numer of people who solved the challenge
	Solves *int64
}

var (
	// SsmChallengeCollectionMap is a map indexing the attribute names of
	// SsmChallengeCollection by view name.
	SsmChallengeCollectionMap = map[string][]string{
		"default": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"published",
			"solves",
		},
	}
	// SsmMonthlyChallengeCollectionMap is a map indexing the attribute names of
	// SsmMonthlyChallengeCollection by view name.
	SsmMonthlyChallengeCollectionMap = map[string][]string{
		"default": {
			"display_month",
			"start_date",
			"end_date",
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"published",
			"solves",
		},
	}
	// SsmChallengeMap is a map indexing the attribute names of SsmChallenge by
	// view name.
	SsmChallengeMap = map[string][]string{
		"default": {
			"id",
			"slug",
			"title",
			"description",
			"score",
			"services",
			"files",
			"published",
			"solves",
		},
	}
	// SsmMonthlyChallengeMap is a map indexing the attribute names of
	// SsmMonthlyChallenge by view name.
	SsmMonthlyChallengeMap = map[string][]string{
		"default": {
			"display_month",
			"start_date",
			"end_date",
		},
	}
)

// ValidateSsmChallengeCollection runs the validations defined on the viewed
// result type SsmChallengeCollection.
func ValidateSsmChallengeCollection(result SsmChallengeCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSsmChallengeCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSsmMonthlyChallengeCollection runs the validations defined on the
// viewed result type SsmMonthlyChallengeCollection.
func ValidateSsmMonthlyChallengeCollection(result SsmMonthlyChallengeCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSsmMonthlyChallengeCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSsmChallengeCollectionView runs the validations defined on
// SsmChallengeCollectionView using the "default" view.
func ValidateSsmChallengeCollectionView(result SsmChallengeCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsmChallengeView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsmChallengeView runs the validations defined on SsmChallengeView
// using the "default" view.
func ValidateSsmChallengeView(result *SsmChallengeView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "result"))
	}
	if result.Published == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published", "result"))
	}
	if result.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "result"))
	}
	if result.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "result"))
	}
	for _, e := range result.Files {
		if e != nil {
			if err2 := ValidateChallengeFilesView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChallengeServiceView runs the validations defined on
// ChallengeServiceView.
func ValidateChallengeServiceView(result *ChallengeServiceView) (err error) {

	return
}

// ValidateChallengeFilesView runs the validations defined on
// ChallengeFilesView.
func ValidateChallengeFilesView(result *ChallengeFilesView) (err error) {
	if result.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	return
}

// ValidateSsmMonthlyChallengeCollectionView runs the validations defined on
// SsmMonthlyChallengeCollectionView using the "default" view.
func ValidateSsmMonthlyChallengeCollectionView(result SsmMonthlyChallengeCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsmMonthlyChallengeView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsmMonthlyChallengeView runs the validations defined on
// SsmMonthlyChallengeView using the "default" view.
func ValidateSsmMonthlyChallengeView(result *SsmMonthlyChallengeView) (err error) {
	if result.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_date", "result"))
	}
	if result.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_date", "result"))
	}
	if result.DisplayMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("display_month", "result"))
	}
	return
}
