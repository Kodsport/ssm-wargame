// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package server

import (
	"context"
	"io"
	"net/http"

	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListChallengesResponse returns an encoder for responses returned by
// the challenge ListChallenges endpoint.
func EncodeListChallengesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(challengeviews.SsmChallengeCollection)
		enc := encoder(ctx, w)
		body := NewSsmChallengeResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeSubmitFlagResponse returns an encoder for responses returned by the
// challenge SubmitFlag endpoint.
func EncodeSubmitFlagResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeSubmitFlagRequest returns a decoder for requests sent to the challenge
// SubmitFlag endpoint.
func DecodeSubmitFlagRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SubmitFlagRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSubmitFlagRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			challengeID string

			params = mux.Vars(r)
		)
		challengeID = params["challengeId"]
		err = goa.MergeErrors(err, goa.ValidateFormat("challengeID", challengeID, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
		payload := NewSubmitFlagPayload(&body, challengeID)

		return payload, nil
	}
}

// EncodeSubmitFlagError returns an encoder for errors returned by the
// SubmitFlag challenge endpoint.
func EncodeSubmitFlagError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "already_solved":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSubmitFlagAlreadySolvedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "incorrect_flag":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSubmitFlagIncorrectFlagResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalChallengeviewsSsmChallengeViewToSsmChallengeResponse builds a value
// of type *SsmChallengeResponse from a value of type
// *challengeviews.SsmChallengeView.
func marshalChallengeviewsSsmChallengeViewToSsmChallengeResponse(v *challengeviews.SsmChallengeView) *SsmChallengeResponse {
	res := &SsmChallengeResponse{
		ID:          *v.ID,
		Slug:        v.Slug,
		Title:       *v.Title,
		Description: *v.Description,
		Score:       *v.Score,
		Published:   *v.Published,
		Solves:      *v.Solves,
	}
	if v.Services != nil {
		res.Services = make([]*ChallengeServiceResponse, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse(val)
		}
	}
	if v.Files != nil {
		res.Files = make([]*ChallengeFilesResponse, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse(val)
		}
	}

	return res
}

// marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse builds a
// value of type *ChallengeServiceResponse from a value of type
// *challengeviews.ChallengeServiceView.
func marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse(v *challengeviews.ChallengeServiceView) *ChallengeServiceResponse {
	if v == nil {
		return nil
	}
	res := &ChallengeServiceResponse{}

	return res
}

// marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse builds a
// value of type *ChallengeFilesResponse from a value of type
// *challengeviews.ChallengeFilesView.
func marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse(v *challengeviews.ChallengeFilesView) *ChallengeFilesResponse {
	if v == nil {
		return nil
	}
	res := &ChallengeFilesResponse{}

	return res
}
