// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package server

import (
	"context"
	"net/http"

	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListChallengesResponse returns an encoder for responses returned by
// the challenge ListChallenges endpoint.
func EncodeListChallengesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(challengeviews.SsmChallengeCollection)
		enc := encoder(ctx, w)
		body := NewSsmChallengeResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalChallengeviewsSsmChallengeViewToSsmChallengeResponse builds a value
// of type *SsmChallengeResponse from a value of type
// *challengeviews.SsmChallengeView.
func marshalChallengeviewsSsmChallengeViewToSsmChallengeResponse(v *challengeviews.SsmChallengeView) *SsmChallengeResponse {
	res := &SsmChallengeResponse{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Score:       v.Score,
		Published:   v.Published,
	}
	if v.Services != nil {
		res.Services = make([]*ChallengeServiceResponse, len(v.Services))
		for i, val := range v.Services {
			res.Services[i] = marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse(val)
		}
	}
	if v.Files != nil {
		res.Files = make([]*ChallengeFilesResponse, len(v.Files))
		for i, val := range v.Files {
			res.Files[i] = marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse(val)
		}
	}

	return res
}

// marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse builds a
// value of type *ChallengeServiceResponse from a value of type
// *challengeviews.ChallengeServiceView.
func marshalChallengeviewsChallengeServiceViewToChallengeServiceResponse(v *challengeviews.ChallengeServiceView) *ChallengeServiceResponse {
	if v == nil {
		return nil
	}
	res := &ChallengeServiceResponse{}

	return res
}

// marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse builds a
// value of type *ChallengeFilesResponse from a value of type
// *challengeviews.ChallengeFilesView.
func marshalChallengeviewsChallengeFilesViewToChallengeFilesResponse(v *challengeviews.ChallengeFilesView) *ChallengeFilesResponse {
	if v == nil {
		return nil
	}
	res := &ChallengeFilesResponse{}

	return res
}
