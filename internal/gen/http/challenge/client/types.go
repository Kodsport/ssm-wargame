// Code generated by goa v3.5.2, DO NOT EDIT.
//
// challenge HTTP client types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	challengeviews "github.com/sakerhetsm/ssm-wargame/internal/gen/challenge/views"
	goa "goa.design/goa/v3/pkg"
)

// ListChallengesResponseBody is the type of the "challenge" service
// "ListChallenges" endpoint HTTP response body.
type ListChallengesResponseBody []*SsmChallengeResponse

// SsmChallengeResponse is used to define fields on response body types.
type SsmChallengeResponse struct {
	ID          *string                     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string                     `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string                     `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Score       *int                        `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	Published   *bool                       `form:"published,omitempty" json:"published,omitempty" xml:"published,omitempty"`
	Services    []*ChallengeServiceResponse `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files       []*ChallengeFilesResponse   `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
}

// ChallengeFilesResponse is used to define fields on response body types.
type ChallengeFilesResponse struct {
}

// NewListChallengesSsmChallengeCollectionOK builds a "challenge" service
// "ListChallenges" endpoint result from a HTTP "OK" response.
func NewListChallengesSsmChallengeCollectionOK(body ListChallengesResponseBody) challengeviews.SsmChallengeCollectionView {
	v := make([]*challengeviews.SsmChallengeView, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmChallengeResponseToChallengeviewsSsmChallengeView(val)
	}

	return v
}

// ValidateSsmChallengeResponse runs the validations defined on
// SsmChallengeResponse
func ValidateSsmChallengeResponse(body *SsmChallengeResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Published == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published", "body"))
	}
	if body.Score != nil {
		if *body.Score < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.score", *body.Score, 0, true))
		}
	}
	return
}
