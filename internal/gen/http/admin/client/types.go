// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin HTTP client types
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package client

import (
	admin "github.com/sakerhetsm/ssm-wargame/internal/gen/admin"
	adminviews "github.com/sakerhetsm/ssm-wargame/internal/gen/admin/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateChallengeRequestBody is the type of the "admin" service
// "CreateChallenge" endpoint HTTP request body.
type CreateChallengeRequestBody struct {
	// A unique string that can be used in URLs
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Title displayed to user
	Title string `form:"title" json:"title" xml:"title"`
	// A short text describing the challenge
	Description string `form:"description" json:"description" xml:"description"`
	// The number of points given to the solver
	Score int32 `form:"score" json:"score" xml:"score"`
}

// ListChallengesResponseBody is the type of the "admin" service
// "ListChallenges" endpoint HTTP response body.
type ListChallengesResponseBody []*SsmChallengeResponse

// SsmChallengeResponse is used to define fields on response body types.
type SsmChallengeResponse struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// A unique string that can be used in URLs
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Title displayed to user
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// A short text describing the challenge
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The number of points given to the solver
	Score     *int32                      `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	Services  []*ChallengeServiceResponse `form:"services,omitempty" json:"services,omitempty" xml:"services,omitempty"`
	Files     []*ChallengeFilesResponse   `form:"files,omitempty" json:"files,omitempty" xml:"files,omitempty"`
	Published *bool                       `form:"published,omitempty" json:"published,omitempty" xml:"published,omitempty"`
	// The numer of people who solved the challenge
	Solves *int64 `form:"solves,omitempty" json:"solves,omitempty" xml:"solves,omitempty"`
}

// ChallengeServiceResponse is used to define fields on response body types.
type ChallengeServiceResponse struct {
}

// ChallengeFilesResponse is used to define fields on response body types.
type ChallengeFilesResponse struct {
}

// NewCreateChallengeRequestBody builds the HTTP request body from the payload
// of the "CreateChallenge" endpoint of the "admin" service.
func NewCreateChallengeRequestBody(p *admin.CreateChallengePayload) *CreateChallengeRequestBody {
	body := &CreateChallengeRequestBody{
		Slug:        p.Slug,
		Title:       p.Title,
		Description: p.Description,
		Score:       p.Score,
	}
	return body
}

// NewListChallengesSsmChallengeCollectionOK builds a "admin" service
// "ListChallenges" endpoint result from a HTTP "OK" response.
func NewListChallengesSsmChallengeCollectionOK(body ListChallengesResponseBody) adminviews.SsmChallengeCollectionView {
	v := make([]*adminviews.SsmChallengeView, len(body))
	for i, val := range body {
		v[i] = unmarshalSsmChallengeResponseToAdminviewsSsmChallengeView(val)
	}

	return v
}

// ValidateSsmChallengeResponse runs the validations defined on
// SsmChallengeResponse
func ValidateSsmChallengeResponse(body *SsmChallengeResponse) (err error) {
	if body.Solves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solves", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.Published == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published", "body"))
	}
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	return
}
