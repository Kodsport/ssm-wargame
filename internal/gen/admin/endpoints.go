// Code generated by goa v3.5.2, DO NOT EDIT.
//
// admin endpoints
//
// Command:
// $ goa gen github.com/sakerhetsm/ssm-wargame/internal/design -o internal/

package admin

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "admin" service endpoints.
type Endpoints struct {
	ListChallenges         goa.Endpoint
	CreateChallenge        goa.Endpoint
	PresignChallFileUpload goa.Endpoint
	ListMonthlyChallenges  goa.Endpoint
	DeleteMonthlyChallenge goa.Endpoint
	CreateMonthlyChallenge goa.Endpoint
	ListUsers              goa.Endpoint
}

// NewEndpoints wraps the methods of the "admin" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListChallenges:         NewListChallengesEndpoint(s, a.JWTAuth),
		CreateChallenge:        NewCreateChallengeEndpoint(s, a.JWTAuth),
		PresignChallFileUpload: NewPresignChallFileUploadEndpoint(s, a.JWTAuth),
		ListMonthlyChallenges:  NewListMonthlyChallengesEndpoint(s, a.JWTAuth),
		DeleteMonthlyChallenge: NewDeleteMonthlyChallengeEndpoint(s, a.JWTAuth),
		CreateMonthlyChallenge: NewCreateMonthlyChallengeEndpoint(s, a.JWTAuth),
		ListUsers:              NewListUsersEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "admin" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListChallenges = m(e.ListChallenges)
	e.CreateChallenge = m(e.CreateChallenge)
	e.PresignChallFileUpload = m(e.PresignChallFileUpload)
	e.ListMonthlyChallenges = m(e.ListMonthlyChallenges)
	e.DeleteMonthlyChallenge = m(e.DeleteMonthlyChallenge)
	e.CreateMonthlyChallenge = m(e.CreateMonthlyChallenge)
	e.ListUsers = m(e.ListUsers)
}

// NewListChallengesEndpoint returns an endpoint function that calls the method
// "ListChallenges" of service "admin".
func NewListChallengesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListChallengesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.ListChallenges(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSsmChallengeCollection(res, "default")
		return vres, nil
	}
}

// NewCreateChallengeEndpoint returns an endpoint function that calls the
// method "CreateChallenge" of service "admin".
func NewCreateChallengeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateChallengePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.CreateChallenge(ctx, p)
	}
}

// NewPresignChallFileUploadEndpoint returns an endpoint function that calls
// the method "PresignChallFileUpload" of service "admin".
func NewPresignChallFileUploadEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PresignChallFileUploadPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.PresignChallFileUpload(ctx, p)
	}
}

// NewListMonthlyChallengesEndpoint returns an endpoint function that calls the
// method "ListMonthlyChallenges" of service "admin".
func NewListMonthlyChallengesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListMonthlyChallengesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListMonthlyChallenges(ctx, p)
	}
}

// NewDeleteMonthlyChallengeEndpoint returns an endpoint function that calls
// the method "DeleteMonthlyChallenge" of service "admin".
func NewDeleteMonthlyChallengeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteMonthlyChallengePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteMonthlyChallenge(ctx, p)
	}
}

// NewCreateMonthlyChallengeEndpoint returns an endpoint function that calls
// the method "CreateMonthlyChallenge" of service "admin".
func NewCreateMonthlyChallengeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateMonthlyChallengePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.CreateMonthlyChallenge(ctx, p)
	}
}

// NewListUsersEndpoint returns an endpoint function that calls the method
// "ListUsers" of service "admin".
func NewListUsersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListUsersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListUsers(ctx, p)
	}
}
