// Code generated by sqlc. DO NOT EDIT.
// source: challenge.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const challengeExists = `-- name: ChallengeExists :one
SELECT EXISTS(SELECT 1 FROM challenges WHERE id = $1)
`

func (q *Queries) ChallengeExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, challengeExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM challenge_files WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const deleteMonthlyChallenge = `-- name: DeleteMonthlyChallenge :exec
DELETE FROM monthly_challenges WHERE challenge_id = $1
`

func (q *Queries) DeleteMonthlyChallenge(ctx context.Context, challengeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMonthlyChallenge, challengeID)
	return err
}

const fileMarkUploaded = `-- name: FileMarkUploaded :exec
UPDATE challenge_files SET uploaded = true, updated_at = NOW() WHERE id = $1
`

func (q *Queries) FileMarkUploaded(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, fileMarkUploaded, id)
	return err
}

const flagExists = `-- name: FlagExists :one
SELECT EXISTS(SELECT 1 FROM flags WHERE challenge_id = $1 AND flag = $2)
`

type FlagExistsParams struct {
	ChallengeID uuid.UUID
	Flag        string
}

func (q *Queries) FlagExists(ctx context.Context, arg FlagExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, flagExists, arg.ChallengeID, arg.Flag)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getChallFiles = `-- name: GetChallFiles :many
SELECT id, challenge_id, friendly_name, bucket, key, md5, uploaded, created_at, updated_at FROM challenge_files WHERE uploaded = true AND challenge_id = ANY($1::uuid[])
`

func (q *Queries) GetChallFiles(ctx context.Context, ids []uuid.UUID) ([]ChallengeFile, error) {
	rows, err := q.db.Query(ctx, getChallFiles, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChallengeFile
	for rows.Next() {
		var i ChallengeFile
		if err := rows.Scan(
			&i.ID,
			&i.ChallengeID,
			&i.FriendlyName,
			&i.Bucket,
			&i.Key,
			&i.Md5,
			&i.Uploaded,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAttempt = `-- name: InsertAttempt :exec
INSERT INTO submissions (id, user_id, challenge_id, successful, input) VALUES ($1, $2, $3, $4, $5)
`

type InsertAttemptParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	ChallengeID uuid.UUID
	Successful  bool
	Input       string
}

func (q *Queries) InsertAttempt(ctx context.Context, arg InsertAttemptParams) error {
	_, err := q.db.Exec(ctx, insertAttempt,
		arg.ID,
		arg.UserID,
		arg.ChallengeID,
		arg.Successful,
		arg.Input,
	)
	return err
}

const insertChallenge = `-- name: InsertChallenge :exec
INSERT INTO challenges (id, title, slug, description, score, published) VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertChallengeParams struct {
	ID          uuid.UUID
	Title       string
	Slug        string
	Description string
	Score       int32
	Published   bool
}

func (q *Queries) InsertChallenge(ctx context.Context, arg InsertChallengeParams) error {
	_, err := q.db.Exec(ctx, insertChallenge,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Score,
		arg.Published,
	)
	return err
}

const insertFile = `-- name: InsertFile :exec
INSERT INTO challenge_files (id, challenge_id, friendly_name, bucket, key, md5, uploaded) VALUES ($1::uuid, $2::uuid, $3::text, $4::text, $5::text, $6::text, false)
`

type InsertFileParams struct {
	ID          uuid.UUID
	ChallengeID uuid.UUID
	Fname       string
	Bucket      string
	Key         string
	Md5         string
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) error {
	_, err := q.db.Exec(ctx, insertFile,
		arg.ID,
		arg.ChallengeID,
		arg.Fname,
		arg.Bucket,
		arg.Key,
		arg.Md5,
	)
	return err
}

const insertMonthlyChallenge = `-- name: InsertMonthlyChallenge :exec
INSERT INTO monthly_challenges (challenge_id, start_date, end_date, display_month) VALUES ($1, $2, $3, $4)
`

type InsertMonthlyChallengeParams struct {
	ChallengeID  uuid.UUID
	StartDate    time.Time
	EndDate      time.Time
	DisplayMonth time.Time
}

func (q *Queries) InsertMonthlyChallenge(ctx context.Context, arg InsertMonthlyChallengeParams) error {
	_, err := q.db.Exec(ctx, insertMonthlyChallenge,
		arg.ChallengeID,
		arg.StartDate,
		arg.EndDate,
		arg.DisplayMonth,
	)
	return err
}

const insertSolve = `-- name: InsertSolve :exec
INSERT INTO user_solves (user_id, challenge_id) VALUES ($1, $2)
`

type InsertSolveParams struct {
	UserID      uuid.UUID
	ChallengeID uuid.UUID
}

func (q *Queries) InsertSolve(ctx context.Context, arg InsertSolveParams) error {
	_, err := q.db.Exec(ctx, insertSolve, arg.UserID, arg.ChallengeID)
	return err
}

const listChallengesWithSolves = `-- name: ListChallengesWithSolves :many
SELECT c.id, c.slug, c.title, c.description, c.score, c.published, c.ctf_event_id, c.created_at, c.updated_at, COUNT(us.user_id) num_solves 
FROM challenges c LEFT JOIN user_solves us ON us.challenge_id = c.id 
WHERE (NOT c.published = $1::bool OR c.published = true)
GROUP BY c.id
`

type ListChallengesWithSolvesRow struct {
	ID          uuid.UUID
	Slug        string
	Title       string
	Description string
	Score       int32
	Published   bool
	CtfEventID  uuid.NullUUID
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
	NumSolves   int64
}

func (q *Queries) ListChallengesWithSolves(ctx context.Context, showUnpublished bool) ([]ListChallengesWithSolvesRow, error) {
	rows, err := q.db.Query(ctx, listChallengesWithSolves, showUnpublished)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChallengesWithSolvesRow
	for rows.Next() {
		var i ListChallengesWithSolvesRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Score,
			&i.Published,
			&i.CtfEventID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NumSolves,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMonthlyChallenges = `-- name: ListMonthlyChallenges :many
SELECT challenge_id, start_date, end_date, display_month, created_at, updated_at FROM monthly_challenges
`

func (q *Queries) ListMonthlyChallenges(ctx context.Context) ([]MonthlyChallenge, error) {
	rows, err := q.db.Query(ctx, listMonthlyChallenges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonthlyChallenge
	for rows.Next() {
		var i MonthlyChallenge
		if err := rows.Scan(
			&i.ChallengeID,
			&i.StartDate,
			&i.EndDate,
			&i.DisplayMonth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userHasSolved = `-- name: UserHasSolved :one
SELECT EXISTS (SELECT user_id, challenge_id, created_at FROM user_solves WHERE challenge_id = $1 AND user_id = $2)
`

type UserHasSolvedParams struct {
	ChallengeID uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) UserHasSolved(ctx context.Context, arg UserHasSolvedParams) (bool, error) {
	row := q.db.QueryRow(ctx, userHasSolved, arg.ChallengeID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
