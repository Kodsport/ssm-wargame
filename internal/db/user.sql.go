// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const insertUserDiscord = `-- name: InsertUserDiscord :exec
INSERT INTO users (id, discord_id, email, role) VALUES ($1::uuid, $2::text, $3::text, 'solver')
`

type InsertUserDiscordParams struct {
	ID        uuid.UUID
	DiscordID string
	Email     string
}

func (q *Queries) InsertUserDiscord(ctx context.Context, arg InsertUserDiscordParams) error {
	_, err := q.db.Exec(ctx, insertUserDiscord, arg.ID, arg.DiscordID, arg.Email)
	return err
}

const userByID = `-- name: UserByID :one
SELECT id, discord_id, first_name, last_name, email, role, school_id, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) UserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, userByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.SchoolID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userIDByDiscordID = `-- name: UserIDByDiscordID :one
SELECT id FROM users WHERE discord_id = $1::text
`

func (q *Queries) UserIDByDiscordID(ctx context.Context, discordID string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, userIDByDiscordID, discordID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
